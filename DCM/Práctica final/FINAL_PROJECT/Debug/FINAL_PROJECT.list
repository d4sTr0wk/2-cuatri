
FINAL_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b4c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08005cd8  08005cd8  00015cd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d90  08005d90  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005d90  08005d90  00015d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d98  08005d98  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d98  08005d98  00015d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d9c  08005d9c  00015d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005da0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000070  08005e10  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08005e10  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac97  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017a9  00000000  00000000  0002ad37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c8  00000000  00000000  0002c4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000840  00000000  00000000  0002cda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025a6e  00000000  00000000  0002d5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a948  00000000  00000000  00053056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e929d  00000000  00000000  0005d99e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00146c3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002800  00000000  00000000  00146c8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005cbc 	.word	0x08005cbc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08005cbc 	.word	0x08005cbc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_uldivmod>:
 8000ae0:	b953      	cbnz	r3, 8000af8 <__aeabi_uldivmod+0x18>
 8000ae2:	b94a      	cbnz	r2, 8000af8 <__aeabi_uldivmod+0x18>
 8000ae4:	2900      	cmp	r1, #0
 8000ae6:	bf08      	it	eq
 8000ae8:	2800      	cmpeq	r0, #0
 8000aea:	bf1c      	itt	ne
 8000aec:	f04f 31ff 	movne.w	r1, #4294967295
 8000af0:	f04f 30ff 	movne.w	r0, #4294967295
 8000af4:	f000 b974 	b.w	8000de0 <__aeabi_idiv0>
 8000af8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000afc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b00:	f000 f806 	bl	8000b10 <__udivmoddi4>
 8000b04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b0c:	b004      	add	sp, #16
 8000b0e:	4770      	bx	lr

08000b10 <__udivmoddi4>:
 8000b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b14:	9d08      	ldr	r5, [sp, #32]
 8000b16:	4604      	mov	r4, r0
 8000b18:	468e      	mov	lr, r1
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d14d      	bne.n	8000bba <__udivmoddi4+0xaa>
 8000b1e:	428a      	cmp	r2, r1
 8000b20:	4694      	mov	ip, r2
 8000b22:	d969      	bls.n	8000bf8 <__udivmoddi4+0xe8>
 8000b24:	fab2 f282 	clz	r2, r2
 8000b28:	b152      	cbz	r2, 8000b40 <__udivmoddi4+0x30>
 8000b2a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b2e:	f1c2 0120 	rsb	r1, r2, #32
 8000b32:	fa20 f101 	lsr.w	r1, r0, r1
 8000b36:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b3a:	ea41 0e03 	orr.w	lr, r1, r3
 8000b3e:	4094      	lsls	r4, r2
 8000b40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b44:	0c21      	lsrs	r1, r4, #16
 8000b46:	fbbe f6f8 	udiv	r6, lr, r8
 8000b4a:	fa1f f78c 	uxth.w	r7, ip
 8000b4e:	fb08 e316 	mls	r3, r8, r6, lr
 8000b52:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b56:	fb06 f107 	mul.w	r1, r6, r7
 8000b5a:	4299      	cmp	r1, r3
 8000b5c:	d90a      	bls.n	8000b74 <__udivmoddi4+0x64>
 8000b5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b62:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b66:	f080 811f 	bcs.w	8000da8 <__udivmoddi4+0x298>
 8000b6a:	4299      	cmp	r1, r3
 8000b6c:	f240 811c 	bls.w	8000da8 <__udivmoddi4+0x298>
 8000b70:	3e02      	subs	r6, #2
 8000b72:	4463      	add	r3, ip
 8000b74:	1a5b      	subs	r3, r3, r1
 8000b76:	b2a4      	uxth	r4, r4
 8000b78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b7c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b84:	fb00 f707 	mul.w	r7, r0, r7
 8000b88:	42a7      	cmp	r7, r4
 8000b8a:	d90a      	bls.n	8000ba2 <__udivmoddi4+0x92>
 8000b8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b90:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b94:	f080 810a 	bcs.w	8000dac <__udivmoddi4+0x29c>
 8000b98:	42a7      	cmp	r7, r4
 8000b9a:	f240 8107 	bls.w	8000dac <__udivmoddi4+0x29c>
 8000b9e:	4464      	add	r4, ip
 8000ba0:	3802      	subs	r0, #2
 8000ba2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ba6:	1be4      	subs	r4, r4, r7
 8000ba8:	2600      	movs	r6, #0
 8000baa:	b11d      	cbz	r5, 8000bb4 <__udivmoddi4+0xa4>
 8000bac:	40d4      	lsrs	r4, r2
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e9c5 4300 	strd	r4, r3, [r5]
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	428b      	cmp	r3, r1
 8000bbc:	d909      	bls.n	8000bd2 <__udivmoddi4+0xc2>
 8000bbe:	2d00      	cmp	r5, #0
 8000bc0:	f000 80ef 	beq.w	8000da2 <__udivmoddi4+0x292>
 8000bc4:	2600      	movs	r6, #0
 8000bc6:	e9c5 0100 	strd	r0, r1, [r5]
 8000bca:	4630      	mov	r0, r6
 8000bcc:	4631      	mov	r1, r6
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	fab3 f683 	clz	r6, r3
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	d14a      	bne.n	8000c70 <__udivmoddi4+0x160>
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	d302      	bcc.n	8000be4 <__udivmoddi4+0xd4>
 8000bde:	4282      	cmp	r2, r0
 8000be0:	f200 80f9 	bhi.w	8000dd6 <__udivmoddi4+0x2c6>
 8000be4:	1a84      	subs	r4, r0, r2
 8000be6:	eb61 0303 	sbc.w	r3, r1, r3
 8000bea:	2001      	movs	r0, #1
 8000bec:	469e      	mov	lr, r3
 8000bee:	2d00      	cmp	r5, #0
 8000bf0:	d0e0      	beq.n	8000bb4 <__udivmoddi4+0xa4>
 8000bf2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bf6:	e7dd      	b.n	8000bb4 <__udivmoddi4+0xa4>
 8000bf8:	b902      	cbnz	r2, 8000bfc <__udivmoddi4+0xec>
 8000bfa:	deff      	udf	#255	; 0xff
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	2a00      	cmp	r2, #0
 8000c02:	f040 8092 	bne.w	8000d2a <__udivmoddi4+0x21a>
 8000c06:	eba1 010c 	sub.w	r1, r1, ip
 8000c0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0e:	fa1f fe8c 	uxth.w	lr, ip
 8000c12:	2601      	movs	r6, #1
 8000c14:	0c20      	lsrs	r0, r4, #16
 8000c16:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c1a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c1e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c22:	fb0e f003 	mul.w	r0, lr, r3
 8000c26:	4288      	cmp	r0, r1
 8000c28:	d908      	bls.n	8000c3c <__udivmoddi4+0x12c>
 8000c2a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c2e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c32:	d202      	bcs.n	8000c3a <__udivmoddi4+0x12a>
 8000c34:	4288      	cmp	r0, r1
 8000c36:	f200 80cb 	bhi.w	8000dd0 <__udivmoddi4+0x2c0>
 8000c3a:	4643      	mov	r3, r8
 8000c3c:	1a09      	subs	r1, r1, r0
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c44:	fb07 1110 	mls	r1, r7, r0, r1
 8000c48:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x156>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5c:	d202      	bcs.n	8000c64 <__udivmoddi4+0x154>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	f200 80bb 	bhi.w	8000dda <__udivmoddi4+0x2ca>
 8000c64:	4608      	mov	r0, r1
 8000c66:	eba4 040e 	sub.w	r4, r4, lr
 8000c6a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c6e:	e79c      	b.n	8000baa <__udivmoddi4+0x9a>
 8000c70:	f1c6 0720 	rsb	r7, r6, #32
 8000c74:	40b3      	lsls	r3, r6
 8000c76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c7e:	fa20 f407 	lsr.w	r4, r0, r7
 8000c82:	fa01 f306 	lsl.w	r3, r1, r6
 8000c86:	431c      	orrs	r4, r3
 8000c88:	40f9      	lsrs	r1, r7
 8000c8a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c8e:	fa00 f306 	lsl.w	r3, r0, r6
 8000c92:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c96:	0c20      	lsrs	r0, r4, #16
 8000c98:	fa1f fe8c 	uxth.w	lr, ip
 8000c9c:	fb09 1118 	mls	r1, r9, r8, r1
 8000ca0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ca4:	fb08 f00e 	mul.w	r0, r8, lr
 8000ca8:	4288      	cmp	r0, r1
 8000caa:	fa02 f206 	lsl.w	r2, r2, r6
 8000cae:	d90b      	bls.n	8000cc8 <__udivmoddi4+0x1b8>
 8000cb0:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cb8:	f080 8088 	bcs.w	8000dcc <__udivmoddi4+0x2bc>
 8000cbc:	4288      	cmp	r0, r1
 8000cbe:	f240 8085 	bls.w	8000dcc <__udivmoddi4+0x2bc>
 8000cc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000cc6:	4461      	add	r1, ip
 8000cc8:	1a09      	subs	r1, r1, r0
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cd0:	fb09 1110 	mls	r1, r9, r0, r1
 8000cd4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cdc:	458e      	cmp	lr, r1
 8000cde:	d908      	bls.n	8000cf2 <__udivmoddi4+0x1e2>
 8000ce0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ce8:	d26c      	bcs.n	8000dc4 <__udivmoddi4+0x2b4>
 8000cea:	458e      	cmp	lr, r1
 8000cec:	d96a      	bls.n	8000dc4 <__udivmoddi4+0x2b4>
 8000cee:	3802      	subs	r0, #2
 8000cf0:	4461      	add	r1, ip
 8000cf2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cf6:	fba0 9402 	umull	r9, r4, r0, r2
 8000cfa:	eba1 010e 	sub.w	r1, r1, lr
 8000cfe:	42a1      	cmp	r1, r4
 8000d00:	46c8      	mov	r8, r9
 8000d02:	46a6      	mov	lr, r4
 8000d04:	d356      	bcc.n	8000db4 <__udivmoddi4+0x2a4>
 8000d06:	d053      	beq.n	8000db0 <__udivmoddi4+0x2a0>
 8000d08:	b15d      	cbz	r5, 8000d22 <__udivmoddi4+0x212>
 8000d0a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d0e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d12:	fa01 f707 	lsl.w	r7, r1, r7
 8000d16:	fa22 f306 	lsr.w	r3, r2, r6
 8000d1a:	40f1      	lsrs	r1, r6
 8000d1c:	431f      	orrs	r7, r3
 8000d1e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d22:	2600      	movs	r6, #0
 8000d24:	4631      	mov	r1, r6
 8000d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2a:	f1c2 0320 	rsb	r3, r2, #32
 8000d2e:	40d8      	lsrs	r0, r3
 8000d30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d34:	fa21 f303 	lsr.w	r3, r1, r3
 8000d38:	4091      	lsls	r1, r2
 8000d3a:	4301      	orrs	r1, r0
 8000d3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d40:	fa1f fe8c 	uxth.w	lr, ip
 8000d44:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d48:	fb07 3610 	mls	r6, r7, r0, r3
 8000d4c:	0c0b      	lsrs	r3, r1, #16
 8000d4e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d52:	fb00 f60e 	mul.w	r6, r0, lr
 8000d56:	429e      	cmp	r6, r3
 8000d58:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x260>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d66:	d22f      	bcs.n	8000dc8 <__udivmoddi4+0x2b8>
 8000d68:	429e      	cmp	r6, r3
 8000d6a:	d92d      	bls.n	8000dc8 <__udivmoddi4+0x2b8>
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	4463      	add	r3, ip
 8000d70:	1b9b      	subs	r3, r3, r6
 8000d72:	b289      	uxth	r1, r1
 8000d74:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d78:	fb07 3316 	mls	r3, r7, r6, r3
 8000d7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d80:	fb06 f30e 	mul.w	r3, r6, lr
 8000d84:	428b      	cmp	r3, r1
 8000d86:	d908      	bls.n	8000d9a <__udivmoddi4+0x28a>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d90:	d216      	bcs.n	8000dc0 <__udivmoddi4+0x2b0>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d914      	bls.n	8000dc0 <__udivmoddi4+0x2b0>
 8000d96:	3e02      	subs	r6, #2
 8000d98:	4461      	add	r1, ip
 8000d9a:	1ac9      	subs	r1, r1, r3
 8000d9c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000da0:	e738      	b.n	8000c14 <__udivmoddi4+0x104>
 8000da2:	462e      	mov	r6, r5
 8000da4:	4628      	mov	r0, r5
 8000da6:	e705      	b.n	8000bb4 <__udivmoddi4+0xa4>
 8000da8:	4606      	mov	r6, r0
 8000daa:	e6e3      	b.n	8000b74 <__udivmoddi4+0x64>
 8000dac:	4618      	mov	r0, r3
 8000dae:	e6f8      	b.n	8000ba2 <__udivmoddi4+0x92>
 8000db0:	454b      	cmp	r3, r9
 8000db2:	d2a9      	bcs.n	8000d08 <__udivmoddi4+0x1f8>
 8000db4:	ebb9 0802 	subs.w	r8, r9, r2
 8000db8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	e7a3      	b.n	8000d08 <__udivmoddi4+0x1f8>
 8000dc0:	4646      	mov	r6, r8
 8000dc2:	e7ea      	b.n	8000d9a <__udivmoddi4+0x28a>
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	e794      	b.n	8000cf2 <__udivmoddi4+0x1e2>
 8000dc8:	4640      	mov	r0, r8
 8000dca:	e7d1      	b.n	8000d70 <__udivmoddi4+0x260>
 8000dcc:	46d0      	mov	r8, sl
 8000dce:	e77b      	b.n	8000cc8 <__udivmoddi4+0x1b8>
 8000dd0:	3b02      	subs	r3, #2
 8000dd2:	4461      	add	r1, ip
 8000dd4:	e732      	b.n	8000c3c <__udivmoddi4+0x12c>
 8000dd6:	4630      	mov	r0, r6
 8000dd8:	e709      	b.n	8000bee <__udivmoddi4+0xde>
 8000dda:	4464      	add	r4, ip
 8000ddc:	3802      	subs	r0, #2
 8000dde:	e742      	b.n	8000c66 <__udivmoddi4+0x156>

08000de0 <__aeabi_idiv0>:
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000de8:	f3bf 8f4f 	dsb	sy
}
 8000dec:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <__NVIC_SystemReset+0x24>)
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000df6:	4904      	ldr	r1, [pc, #16]	; (8000e08 <__NVIC_SystemReset+0x24>)
 8000df8:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <__NVIC_SystemReset+0x28>)
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000dfe:	f3bf 8f4f 	dsb	sy
}
 8000e02:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <__NVIC_SystemReset+0x20>
 8000e08:	e000ed00 	.word	0xe000ed00
 8000e0c:	05fa0004 	.word	0x05fa0004

08000e10 <lectura_columnas>:
/* USER CODE BEGIN 0 */

const int matriz_teclado[4][4] = { { 0xC, 0xD, 0xE, 0xF },
		{ 0xB, 0x9, 0x6, 0x3 }, { 0x0, 0x8, 0x5, 0x2 }, { 0xA, 0x7, 0x4, 0x1 } };

int lectura_columnas() {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, Col1_Pin))
 8000e14:	2140      	movs	r1, #64	; 0x40
 8000e16:	4814      	ldr	r0, [pc, #80]	; (8000e68 <lectura_columnas+0x58>)
 8000e18:	f001 fffc 	bl	8002e14 <HAL_GPIO_ReadPin>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <lectura_columnas+0x16>
		return (1);
 8000e22:	2301      	movs	r3, #1
 8000e24:	e01e      	b.n	8000e64 <lectura_columnas+0x54>
	else if (HAL_GPIO_ReadPin(GPIOA, Col2_Pin))
 8000e26:	2180      	movs	r1, #128	; 0x80
 8000e28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2c:	f001 fff2 	bl	8002e14 <HAL_GPIO_ReadPin>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <lectura_columnas+0x2a>
		return (2);
 8000e36:	2302      	movs	r3, #2
 8000e38:	e014      	b.n	8000e64 <lectura_columnas+0x54>
	else if (HAL_GPIO_ReadPin(GPIOA, Col3_Pin))
 8000e3a:	2140      	movs	r1, #64	; 0x40
 8000e3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e40:	f001 ffe8 	bl	8002e14 <HAL_GPIO_ReadPin>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <lectura_columnas+0x3e>
		return (3);
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e00a      	b.n	8000e64 <lectura_columnas+0x54>
	else if (HAL_GPIO_ReadPin(GPIOA, Col4_Pin))
 8000e4e:	2120      	movs	r1, #32
 8000e50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e54:	f001 ffde 	bl	8002e14 <HAL_GPIO_ReadPin>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <lectura_columnas+0x52>
		return (4);
 8000e5e:	2304      	movs	r3, #4
 8000e60:	e000      	b.n	8000e64 <lectura_columnas+0x54>

	return (0);
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	48000400 	.word	0x48000400

08000e6c <write_num_display_dec>:

void write_num_display_dec(int digit, int point) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
	switch (digit) {
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b09      	cmp	r3, #9
 8000e7a:	f200 81bb 	bhi.w	80011f4 <write_num_display_dec+0x388>
 8000e7e:	a201      	add	r2, pc, #4	; (adr r2, 8000e84 <write_num_display_dec+0x18>)
 8000e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e84:	08000ead 	.word	0x08000ead
 8000e88:	08000f01 	.word	0x08000f01
 8000e8c:	08000f55 	.word	0x08000f55
 8000e90:	08000fa9 	.word	0x08000fa9
 8000e94:	08000ffd 	.word	0x08000ffd
 8000e98:	08001051 	.word	0x08001051
 8000e9c:	080010a5 	.word	0x080010a5
 8000ea0:	080010f9 	.word	0x080010f9
 8000ea4:	0800114d 	.word	0x0800114d
 8000ea8:	080011a1 	.word	0x080011a1
	case (0):
		HAL_GPIO_WritePin(GPIOB, Seg0_Pin, GPIO_PIN_SET);
 8000eac:	2201      	movs	r2, #1
 8000eae:	2120      	movs	r1, #32
 8000eb0:	48d5      	ldr	r0, [pc, #852]	; (8001208 <write_num_display_dec+0x39c>)
 8000eb2:	f001 ffc7 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg1_Pin, GPIO_PIN_SET);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	2110      	movs	r1, #16
 8000eba:	48d3      	ldr	r0, [pc, #844]	; (8001208 <write_num_display_dec+0x39c>)
 8000ebc:	f001 ffc2 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg2_Pin, GPIO_PIN_SET);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ec6:	48d0      	ldr	r0, [pc, #832]	; (8001208 <write_num_display_dec+0x39c>)
 8000ec8:	f001 ffbc 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Seg3_Pin, GPIO_PIN_SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed6:	f001 ffb5 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg4_Pin, GPIO_PIN_SET);
 8000eda:	2201      	movs	r2, #1
 8000edc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ee0:	48c9      	ldr	r0, [pc, #804]	; (8001208 <write_num_display_dec+0x39c>)
 8000ee2:	f001 ffaf 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg5_Pin, GPIO_PIN_SET);
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eec:	48c6      	ldr	r0, [pc, #792]	; (8001208 <write_num_display_dec+0x39c>)
 8000eee:	f001 ffa9 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg6_Pin, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ef8:	48c3      	ldr	r0, [pc, #780]	; (8001208 <write_num_display_dec+0x39c>)
 8000efa:	f001 ffa3 	bl	8002e44 <HAL_GPIO_WritePin>
		break;
 8000efe:	e179      	b.n	80011f4 <write_num_display_dec+0x388>
	case (1):
		HAL_GPIO_WritePin(GPIOB, Seg0_Pin, GPIO_PIN_RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2120      	movs	r1, #32
 8000f04:	48c0      	ldr	r0, [pc, #768]	; (8001208 <write_num_display_dec+0x39c>)
 8000f06:	f001 ff9d 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg1_Pin, GPIO_PIN_SET);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	2110      	movs	r1, #16
 8000f0e:	48be      	ldr	r0, [pc, #760]	; (8001208 <write_num_display_dec+0x39c>)
 8000f10:	f001 ff98 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg2_Pin, GPIO_PIN_SET);
 8000f14:	2201      	movs	r2, #1
 8000f16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f1a:	48bb      	ldr	r0, [pc, #748]	; (8001208 <write_num_display_dec+0x39c>)
 8000f1c:	f001 ff92 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Seg3_Pin, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2a:	f001 ff8b 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg4_Pin, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f34:	48b4      	ldr	r0, [pc, #720]	; (8001208 <write_num_display_dec+0x39c>)
 8000f36:	f001 ff85 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg5_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f40:	48b1      	ldr	r0, [pc, #708]	; (8001208 <write_num_display_dec+0x39c>)
 8000f42:	f001 ff7f 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg6_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f4c:	48ae      	ldr	r0, [pc, #696]	; (8001208 <write_num_display_dec+0x39c>)
 8000f4e:	f001 ff79 	bl	8002e44 <HAL_GPIO_WritePin>
		break;
 8000f52:	e14f      	b.n	80011f4 <write_num_display_dec+0x388>
	case (2):
		HAL_GPIO_WritePin(GPIOB, Seg0_Pin, GPIO_PIN_SET);
 8000f54:	2201      	movs	r2, #1
 8000f56:	2120      	movs	r1, #32
 8000f58:	48ab      	ldr	r0, [pc, #684]	; (8001208 <write_num_display_dec+0x39c>)
 8000f5a:	f001 ff73 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg1_Pin, GPIO_PIN_SET);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	2110      	movs	r1, #16
 8000f62:	48a9      	ldr	r0, [pc, #676]	; (8001208 <write_num_display_dec+0x39c>)
 8000f64:	f001 ff6e 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg2_Pin, GPIO_PIN_RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f6e:	48a6      	ldr	r0, [pc, #664]	; (8001208 <write_num_display_dec+0x39c>)
 8000f70:	f001 ff68 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Seg3_Pin, GPIO_PIN_SET);
 8000f74:	2201      	movs	r2, #1
 8000f76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7e:	f001 ff61 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg4_Pin, GPIO_PIN_SET);
 8000f82:	2201      	movs	r2, #1
 8000f84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f88:	489f      	ldr	r0, [pc, #636]	; (8001208 <write_num_display_dec+0x39c>)
 8000f8a:	f001 ff5b 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg5_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f94:	489c      	ldr	r0, [pc, #624]	; (8001208 <write_num_display_dec+0x39c>)
 8000f96:	f001 ff55 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg6_Pin, GPIO_PIN_SET);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fa0:	4899      	ldr	r0, [pc, #612]	; (8001208 <write_num_display_dec+0x39c>)
 8000fa2:	f001 ff4f 	bl	8002e44 <HAL_GPIO_WritePin>
		break;
 8000fa6:	e125      	b.n	80011f4 <write_num_display_dec+0x388>
	case (3):
		HAL_GPIO_WritePin(GPIOB, Seg0_Pin, GPIO_PIN_SET);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	2120      	movs	r1, #32
 8000fac:	4896      	ldr	r0, [pc, #600]	; (8001208 <write_num_display_dec+0x39c>)
 8000fae:	f001 ff49 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg1_Pin, GPIO_PIN_SET);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	2110      	movs	r1, #16
 8000fb6:	4894      	ldr	r0, [pc, #592]	; (8001208 <write_num_display_dec+0x39c>)
 8000fb8:	f001 ff44 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg2_Pin, GPIO_PIN_SET);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc2:	4891      	ldr	r0, [pc, #580]	; (8001208 <write_num_display_dec+0x39c>)
 8000fc4:	f001 ff3e 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Seg3_Pin, GPIO_PIN_SET);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd2:	f001 ff37 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg4_Pin, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fdc:	488a      	ldr	r0, [pc, #552]	; (8001208 <write_num_display_dec+0x39c>)
 8000fde:	f001 ff31 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg5_Pin, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fe8:	4887      	ldr	r0, [pc, #540]	; (8001208 <write_num_display_dec+0x39c>)
 8000fea:	f001 ff2b 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg6_Pin, GPIO_PIN_SET);
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ff4:	4884      	ldr	r0, [pc, #528]	; (8001208 <write_num_display_dec+0x39c>)
 8000ff6:	f001 ff25 	bl	8002e44 <HAL_GPIO_WritePin>
		break;
 8000ffa:	e0fb      	b.n	80011f4 <write_num_display_dec+0x388>
	case (4):
		HAL_GPIO_WritePin(GPIOB, Seg0_Pin, GPIO_PIN_RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2120      	movs	r1, #32
 8001000:	4881      	ldr	r0, [pc, #516]	; (8001208 <write_num_display_dec+0x39c>)
 8001002:	f001 ff1f 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg1_Pin, GPIO_PIN_SET);
 8001006:	2201      	movs	r2, #1
 8001008:	2110      	movs	r1, #16
 800100a:	487f      	ldr	r0, [pc, #508]	; (8001208 <write_num_display_dec+0x39c>)
 800100c:	f001 ff1a 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg2_Pin, GPIO_PIN_SET);
 8001010:	2201      	movs	r2, #1
 8001012:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001016:	487c      	ldr	r0, [pc, #496]	; (8001208 <write_num_display_dec+0x39c>)
 8001018:	f001 ff14 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Seg3_Pin, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001022:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001026:	f001 ff0d 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg4_Pin, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001030:	4875      	ldr	r0, [pc, #468]	; (8001208 <write_num_display_dec+0x39c>)
 8001032:	f001 ff07 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg5_Pin, GPIO_PIN_SET);
 8001036:	2201      	movs	r2, #1
 8001038:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800103c:	4872      	ldr	r0, [pc, #456]	; (8001208 <write_num_display_dec+0x39c>)
 800103e:	f001 ff01 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg6_Pin, GPIO_PIN_SET);
 8001042:	2201      	movs	r2, #1
 8001044:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001048:	486f      	ldr	r0, [pc, #444]	; (8001208 <write_num_display_dec+0x39c>)
 800104a:	f001 fefb 	bl	8002e44 <HAL_GPIO_WritePin>
		break;
 800104e:	e0d1      	b.n	80011f4 <write_num_display_dec+0x388>
	case (5):
		HAL_GPIO_WritePin(GPIOB, Seg0_Pin, GPIO_PIN_SET);
 8001050:	2201      	movs	r2, #1
 8001052:	2120      	movs	r1, #32
 8001054:	486c      	ldr	r0, [pc, #432]	; (8001208 <write_num_display_dec+0x39c>)
 8001056:	f001 fef5 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg1_Pin, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	2110      	movs	r1, #16
 800105e:	486a      	ldr	r0, [pc, #424]	; (8001208 <write_num_display_dec+0x39c>)
 8001060:	f001 fef0 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg2_Pin, GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800106a:	4867      	ldr	r0, [pc, #412]	; (8001208 <write_num_display_dec+0x39c>)
 800106c:	f001 feea 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Seg3_Pin, GPIO_PIN_SET);
 8001070:	2201      	movs	r2, #1
 8001072:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001076:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107a:	f001 fee3 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg4_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001084:	4860      	ldr	r0, [pc, #384]	; (8001208 <write_num_display_dec+0x39c>)
 8001086:	f001 fedd 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg5_Pin, GPIO_PIN_SET);
 800108a:	2201      	movs	r2, #1
 800108c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001090:	485d      	ldr	r0, [pc, #372]	; (8001208 <write_num_display_dec+0x39c>)
 8001092:	f001 fed7 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg6_Pin, GPIO_PIN_SET);
 8001096:	2201      	movs	r2, #1
 8001098:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800109c:	485a      	ldr	r0, [pc, #360]	; (8001208 <write_num_display_dec+0x39c>)
 800109e:	f001 fed1 	bl	8002e44 <HAL_GPIO_WritePin>
		break;
 80010a2:	e0a7      	b.n	80011f4 <write_num_display_dec+0x388>
	case (6):
		HAL_GPIO_WritePin(GPIOB, Seg0_Pin, GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	2120      	movs	r1, #32
 80010a8:	4857      	ldr	r0, [pc, #348]	; (8001208 <write_num_display_dec+0x39c>)
 80010aa:	f001 fecb 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg1_Pin, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2110      	movs	r1, #16
 80010b2:	4855      	ldr	r0, [pc, #340]	; (8001208 <write_num_display_dec+0x39c>)
 80010b4:	f001 fec6 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg2_Pin, GPIO_PIN_SET);
 80010b8:	2201      	movs	r2, #1
 80010ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010be:	4852      	ldr	r0, [pc, #328]	; (8001208 <write_num_display_dec+0x39c>)
 80010c0:	f001 fec0 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Seg3_Pin, GPIO_PIN_SET);
 80010c4:	2201      	movs	r2, #1
 80010c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ce:	f001 feb9 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg4_Pin, GPIO_PIN_SET);
 80010d2:	2201      	movs	r2, #1
 80010d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010d8:	484b      	ldr	r0, [pc, #300]	; (8001208 <write_num_display_dec+0x39c>)
 80010da:	f001 feb3 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg5_Pin, GPIO_PIN_SET);
 80010de:	2201      	movs	r2, #1
 80010e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010e4:	4848      	ldr	r0, [pc, #288]	; (8001208 <write_num_display_dec+0x39c>)
 80010e6:	f001 fead 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg6_Pin, GPIO_PIN_SET);
 80010ea:	2201      	movs	r2, #1
 80010ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010f0:	4845      	ldr	r0, [pc, #276]	; (8001208 <write_num_display_dec+0x39c>)
 80010f2:	f001 fea7 	bl	8002e44 <HAL_GPIO_WritePin>
		break;
 80010f6:	e07d      	b.n	80011f4 <write_num_display_dec+0x388>
	case (7):
		HAL_GPIO_WritePin(GPIOB, Seg0_Pin, GPIO_PIN_SET);
 80010f8:	2201      	movs	r2, #1
 80010fa:	2120      	movs	r1, #32
 80010fc:	4842      	ldr	r0, [pc, #264]	; (8001208 <write_num_display_dec+0x39c>)
 80010fe:	f001 fea1 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg1_Pin, GPIO_PIN_SET);
 8001102:	2201      	movs	r2, #1
 8001104:	2110      	movs	r1, #16
 8001106:	4840      	ldr	r0, [pc, #256]	; (8001208 <write_num_display_dec+0x39c>)
 8001108:	f001 fe9c 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg2_Pin, GPIO_PIN_SET);
 800110c:	2201      	movs	r2, #1
 800110e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001112:	483d      	ldr	r0, [pc, #244]	; (8001208 <write_num_display_dec+0x39c>)
 8001114:	f001 fe96 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Seg3_Pin, GPIO_PIN_RESET);
 8001118:	2200      	movs	r2, #0
 800111a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800111e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001122:	f001 fe8f 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg4_Pin, GPIO_PIN_RESET);
 8001126:	2200      	movs	r2, #0
 8001128:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800112c:	4836      	ldr	r0, [pc, #216]	; (8001208 <write_num_display_dec+0x39c>)
 800112e:	f001 fe89 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg5_Pin, GPIO_PIN_RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001138:	4833      	ldr	r0, [pc, #204]	; (8001208 <write_num_display_dec+0x39c>)
 800113a:	f001 fe83 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg6_Pin, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001144:	4830      	ldr	r0, [pc, #192]	; (8001208 <write_num_display_dec+0x39c>)
 8001146:	f001 fe7d 	bl	8002e44 <HAL_GPIO_WritePin>
		break;
 800114a:	e053      	b.n	80011f4 <write_num_display_dec+0x388>
	case (8):
		HAL_GPIO_WritePin(GPIOB, Seg0_Pin, GPIO_PIN_SET);
 800114c:	2201      	movs	r2, #1
 800114e:	2120      	movs	r1, #32
 8001150:	482d      	ldr	r0, [pc, #180]	; (8001208 <write_num_display_dec+0x39c>)
 8001152:	f001 fe77 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg1_Pin, GPIO_PIN_SET);
 8001156:	2201      	movs	r2, #1
 8001158:	2110      	movs	r1, #16
 800115a:	482b      	ldr	r0, [pc, #172]	; (8001208 <write_num_display_dec+0x39c>)
 800115c:	f001 fe72 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg2_Pin, GPIO_PIN_SET);
 8001160:	2201      	movs	r2, #1
 8001162:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001166:	4828      	ldr	r0, [pc, #160]	; (8001208 <write_num_display_dec+0x39c>)
 8001168:	f001 fe6c 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Seg3_Pin, GPIO_PIN_SET);
 800116c:	2201      	movs	r2, #1
 800116e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001172:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001176:	f001 fe65 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg4_Pin, GPIO_PIN_SET);
 800117a:	2201      	movs	r2, #1
 800117c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001180:	4821      	ldr	r0, [pc, #132]	; (8001208 <write_num_display_dec+0x39c>)
 8001182:	f001 fe5f 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg5_Pin, GPIO_PIN_SET);
 8001186:	2201      	movs	r2, #1
 8001188:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800118c:	481e      	ldr	r0, [pc, #120]	; (8001208 <write_num_display_dec+0x39c>)
 800118e:	f001 fe59 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg6_Pin, GPIO_PIN_SET);
 8001192:	2201      	movs	r2, #1
 8001194:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001198:	481b      	ldr	r0, [pc, #108]	; (8001208 <write_num_display_dec+0x39c>)
 800119a:	f001 fe53 	bl	8002e44 <HAL_GPIO_WritePin>
		break;
 800119e:	e029      	b.n	80011f4 <write_num_display_dec+0x388>
	case (9):
		HAL_GPIO_WritePin(GPIOB, Seg0_Pin, GPIO_PIN_SET);
 80011a0:	2201      	movs	r2, #1
 80011a2:	2120      	movs	r1, #32
 80011a4:	4818      	ldr	r0, [pc, #96]	; (8001208 <write_num_display_dec+0x39c>)
 80011a6:	f001 fe4d 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg1_Pin, GPIO_PIN_SET);
 80011aa:	2201      	movs	r2, #1
 80011ac:	2110      	movs	r1, #16
 80011ae:	4816      	ldr	r0, [pc, #88]	; (8001208 <write_num_display_dec+0x39c>)
 80011b0:	f001 fe48 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg2_Pin, GPIO_PIN_SET);
 80011b4:	2201      	movs	r2, #1
 80011b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ba:	4813      	ldr	r0, [pc, #76]	; (8001208 <write_num_display_dec+0x39c>)
 80011bc:	f001 fe42 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Seg3_Pin, GPIO_PIN_RESET);
 80011c0:	2200      	movs	r2, #0
 80011c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ca:	f001 fe3b 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg4_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011d4:	480c      	ldr	r0, [pc, #48]	; (8001208 <write_num_display_dec+0x39c>)
 80011d6:	f001 fe35 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg5_Pin, GPIO_PIN_SET);
 80011da:	2201      	movs	r2, #1
 80011dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011e0:	4809      	ldr	r0, [pc, #36]	; (8001208 <write_num_display_dec+0x39c>)
 80011e2:	f001 fe2f 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg6_Pin, GPIO_PIN_SET);
 80011e6:	2201      	movs	r2, #1
 80011e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ec:	4806      	ldr	r0, [pc, #24]	; (8001208 <write_num_display_dec+0x39c>)
 80011ee:	f001 fe29 	bl	8002e44 <HAL_GPIO_WritePin>
		break;
 80011f2:	bf00      	nop
	}
	if (point)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d008      	beq.n	800120c <write_num_display_dec+0x3a0>
		HAL_GPIO_WritePin(GPIOB, Point_Pin, GPIO_PIN_SET);
 80011fa:	2201      	movs	r2, #1
 80011fc:	2102      	movs	r1, #2
 80011fe:	4802      	ldr	r0, [pc, #8]	; (8001208 <write_num_display_dec+0x39c>)
 8001200:	f001 fe20 	bl	8002e44 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOB, Point_Pin, GPIO_PIN_RESET);

}
 8001204:	e007      	b.n	8001216 <write_num_display_dec+0x3aa>
 8001206:	bf00      	nop
 8001208:	48000400 	.word	0x48000400
		HAL_GPIO_WritePin(GPIOB, Point_Pin, GPIO_PIN_RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	2102      	movs	r1, #2
 8001210:	4803      	ldr	r0, [pc, #12]	; (8001220 <write_num_display_dec+0x3b4>)
 8001212:	f001 fe17 	bl	8002e44 <HAL_GPIO_WritePin>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	48000400 	.word	0x48000400

08001224 <write_num_display>:

int write_num_display(int fila, int columna) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
	int num_hex = matriz_teclado[fila - 1][columna - 1];
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	1e5a      	subs	r2, r3, #1
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	3b01      	subs	r3, #1
 8001236:	49d8      	ldr	r1, [pc, #864]	; (8001598 <write_num_display+0x374>)
 8001238:	0092      	lsls	r2, r2, #2
 800123a:	4413      	add	r3, r2
 800123c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001240:	60fb      	str	r3, [r7, #12]
	switch (num_hex) {
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2b0f      	cmp	r3, #15
 8001246:	f200 82d8 	bhi.w	80017fa <write_num_display+0x5d6>
 800124a:	a201      	add	r2, pc, #4	; (adr r2, 8001250 <write_num_display+0x2c>)
 800124c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001250:	08001291 	.word	0x08001291
 8001254:	080012e7 	.word	0x080012e7
 8001258:	0800133d 	.word	0x0800133d
 800125c:	08001393 	.word	0x08001393
 8001260:	080013e9 	.word	0x080013e9
 8001264:	0800143f 	.word	0x0800143f
 8001268:	08001495 	.word	0x08001495
 800126c:	080014eb 	.word	0x080014eb
 8001270:	08001541 	.word	0x08001541
 8001274:	080015a1 	.word	0x080015a1
 8001278:	080015f7 	.word	0x080015f7
 800127c:	0800164d 	.word	0x0800164d
 8001280:	080016a3 	.word	0x080016a3
 8001284:	080016f9 	.word	0x080016f9
 8001288:	0800174f 	.word	0x0800174f
 800128c:	080017a5 	.word	0x080017a5
	case (0x0):
		HAL_GPIO_WritePin(GPIOB, Seg0_Pin, GPIO_PIN_SET);
 8001290:	2201      	movs	r2, #1
 8001292:	2120      	movs	r1, #32
 8001294:	48c1      	ldr	r0, [pc, #772]	; (800159c <write_num_display+0x378>)
 8001296:	f001 fdd5 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg1_Pin, GPIO_PIN_SET);
 800129a:	2201      	movs	r2, #1
 800129c:	2110      	movs	r1, #16
 800129e:	48bf      	ldr	r0, [pc, #764]	; (800159c <write_num_display+0x378>)
 80012a0:	f001 fdd0 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg2_Pin, GPIO_PIN_SET);
 80012a4:	2201      	movs	r2, #1
 80012a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012aa:	48bc      	ldr	r0, [pc, #752]	; (800159c <write_num_display+0x378>)
 80012ac:	f001 fdca 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Seg3_Pin, GPIO_PIN_SET);
 80012b0:	2201      	movs	r2, #1
 80012b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ba:	f001 fdc3 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg4_Pin, GPIO_PIN_SET);
 80012be:	2201      	movs	r2, #1
 80012c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012c4:	48b5      	ldr	r0, [pc, #724]	; (800159c <write_num_display+0x378>)
 80012c6:	f001 fdbd 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg5_Pin, GPIO_PIN_SET);
 80012ca:	2201      	movs	r2, #1
 80012cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012d0:	48b2      	ldr	r0, [pc, #712]	; (800159c <write_num_display+0x378>)
 80012d2:	f001 fdb7 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg6_Pin, GPIO_PIN_RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012dc:	48af      	ldr	r0, [pc, #700]	; (800159c <write_num_display+0x378>)
 80012de:	f001 fdb1 	bl	8002e44 <HAL_GPIO_WritePin>
		return (0x0);
 80012e2:	2300      	movs	r3, #0
 80012e4:	e28b      	b.n	80017fe <write_num_display+0x5da>
		break;
	case (0x1):
		HAL_GPIO_WritePin(GPIOB, Seg0_Pin, GPIO_PIN_RESET);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2120      	movs	r1, #32
 80012ea:	48ac      	ldr	r0, [pc, #688]	; (800159c <write_num_display+0x378>)
 80012ec:	f001 fdaa 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg1_Pin, GPIO_PIN_SET);
 80012f0:	2201      	movs	r2, #1
 80012f2:	2110      	movs	r1, #16
 80012f4:	48a9      	ldr	r0, [pc, #676]	; (800159c <write_num_display+0x378>)
 80012f6:	f001 fda5 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg2_Pin, GPIO_PIN_SET);
 80012fa:	2201      	movs	r2, #1
 80012fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001300:	48a6      	ldr	r0, [pc, #664]	; (800159c <write_num_display+0x378>)
 8001302:	f001 fd9f 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Seg3_Pin, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	f44f 7180 	mov.w	r1, #256	; 0x100
 800130c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001310:	f001 fd98 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg4_Pin, GPIO_PIN_RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800131a:	48a0      	ldr	r0, [pc, #640]	; (800159c <write_num_display+0x378>)
 800131c:	f001 fd92 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg5_Pin, GPIO_PIN_RESET);
 8001320:	2200      	movs	r2, #0
 8001322:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001326:	489d      	ldr	r0, [pc, #628]	; (800159c <write_num_display+0x378>)
 8001328:	f001 fd8c 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg6_Pin, GPIO_PIN_RESET);
 800132c:	2200      	movs	r2, #0
 800132e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001332:	489a      	ldr	r0, [pc, #616]	; (800159c <write_num_display+0x378>)
 8001334:	f001 fd86 	bl	8002e44 <HAL_GPIO_WritePin>
		return (0x1);
 8001338:	2301      	movs	r3, #1
 800133a:	e260      	b.n	80017fe <write_num_display+0x5da>
		break;
	case (0x2):
		HAL_GPIO_WritePin(GPIOB, Seg0_Pin, GPIO_PIN_SET);
 800133c:	2201      	movs	r2, #1
 800133e:	2120      	movs	r1, #32
 8001340:	4896      	ldr	r0, [pc, #600]	; (800159c <write_num_display+0x378>)
 8001342:	f001 fd7f 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg1_Pin, GPIO_PIN_SET);
 8001346:	2201      	movs	r2, #1
 8001348:	2110      	movs	r1, #16
 800134a:	4894      	ldr	r0, [pc, #592]	; (800159c <write_num_display+0x378>)
 800134c:	f001 fd7a 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg2_Pin, GPIO_PIN_RESET);
 8001350:	2200      	movs	r2, #0
 8001352:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001356:	4891      	ldr	r0, [pc, #580]	; (800159c <write_num_display+0x378>)
 8001358:	f001 fd74 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Seg3_Pin, GPIO_PIN_SET);
 800135c:	2201      	movs	r2, #1
 800135e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001362:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001366:	f001 fd6d 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg4_Pin, GPIO_PIN_SET);
 800136a:	2201      	movs	r2, #1
 800136c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001370:	488a      	ldr	r0, [pc, #552]	; (800159c <write_num_display+0x378>)
 8001372:	f001 fd67 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg5_Pin, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800137c:	4887      	ldr	r0, [pc, #540]	; (800159c <write_num_display+0x378>)
 800137e:	f001 fd61 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg6_Pin, GPIO_PIN_SET);
 8001382:	2201      	movs	r2, #1
 8001384:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001388:	4884      	ldr	r0, [pc, #528]	; (800159c <write_num_display+0x378>)
 800138a:	f001 fd5b 	bl	8002e44 <HAL_GPIO_WritePin>
		return (0x2);
 800138e:	2302      	movs	r3, #2
 8001390:	e235      	b.n	80017fe <write_num_display+0x5da>
		break;
	case (0x3):
		HAL_GPIO_WritePin(GPIOB, Seg0_Pin, GPIO_PIN_SET);
 8001392:	2201      	movs	r2, #1
 8001394:	2120      	movs	r1, #32
 8001396:	4881      	ldr	r0, [pc, #516]	; (800159c <write_num_display+0x378>)
 8001398:	f001 fd54 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg1_Pin, GPIO_PIN_SET);
 800139c:	2201      	movs	r2, #1
 800139e:	2110      	movs	r1, #16
 80013a0:	487e      	ldr	r0, [pc, #504]	; (800159c <write_num_display+0x378>)
 80013a2:	f001 fd4f 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg2_Pin, GPIO_PIN_SET);
 80013a6:	2201      	movs	r2, #1
 80013a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ac:	487b      	ldr	r0, [pc, #492]	; (800159c <write_num_display+0x378>)
 80013ae:	f001 fd49 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Seg3_Pin, GPIO_PIN_SET);
 80013b2:	2201      	movs	r2, #1
 80013b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013bc:	f001 fd42 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg4_Pin, GPIO_PIN_RESET);
 80013c0:	2200      	movs	r2, #0
 80013c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013c6:	4875      	ldr	r0, [pc, #468]	; (800159c <write_num_display+0x378>)
 80013c8:	f001 fd3c 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg5_Pin, GPIO_PIN_RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013d2:	4872      	ldr	r0, [pc, #456]	; (800159c <write_num_display+0x378>)
 80013d4:	f001 fd36 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg6_Pin, GPIO_PIN_SET);
 80013d8:	2201      	movs	r2, #1
 80013da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013de:	486f      	ldr	r0, [pc, #444]	; (800159c <write_num_display+0x378>)
 80013e0:	f001 fd30 	bl	8002e44 <HAL_GPIO_WritePin>
		return (0x3);
 80013e4:	2303      	movs	r3, #3
 80013e6:	e20a      	b.n	80017fe <write_num_display+0x5da>
		break;
	case (0x4):
		HAL_GPIO_WritePin(GPIOB, Seg0_Pin, GPIO_PIN_RESET);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2120      	movs	r1, #32
 80013ec:	486b      	ldr	r0, [pc, #428]	; (800159c <write_num_display+0x378>)
 80013ee:	f001 fd29 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg1_Pin, GPIO_PIN_SET);
 80013f2:	2201      	movs	r2, #1
 80013f4:	2110      	movs	r1, #16
 80013f6:	4869      	ldr	r0, [pc, #420]	; (800159c <write_num_display+0x378>)
 80013f8:	f001 fd24 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg2_Pin, GPIO_PIN_SET);
 80013fc:	2201      	movs	r2, #1
 80013fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001402:	4866      	ldr	r0, [pc, #408]	; (800159c <write_num_display+0x378>)
 8001404:	f001 fd1e 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Seg3_Pin, GPIO_PIN_RESET);
 8001408:	2200      	movs	r2, #0
 800140a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800140e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001412:	f001 fd17 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg4_Pin, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800141c:	485f      	ldr	r0, [pc, #380]	; (800159c <write_num_display+0x378>)
 800141e:	f001 fd11 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg5_Pin, GPIO_PIN_SET);
 8001422:	2201      	movs	r2, #1
 8001424:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001428:	485c      	ldr	r0, [pc, #368]	; (800159c <write_num_display+0x378>)
 800142a:	f001 fd0b 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg6_Pin, GPIO_PIN_SET);
 800142e:	2201      	movs	r2, #1
 8001430:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001434:	4859      	ldr	r0, [pc, #356]	; (800159c <write_num_display+0x378>)
 8001436:	f001 fd05 	bl	8002e44 <HAL_GPIO_WritePin>
		return (0x4);
 800143a:	2304      	movs	r3, #4
 800143c:	e1df      	b.n	80017fe <write_num_display+0x5da>
		break;
	case (0x5):
		HAL_GPIO_WritePin(GPIOB, Seg0_Pin, GPIO_PIN_SET);
 800143e:	2201      	movs	r2, #1
 8001440:	2120      	movs	r1, #32
 8001442:	4856      	ldr	r0, [pc, #344]	; (800159c <write_num_display+0x378>)
 8001444:	f001 fcfe 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg1_Pin, GPIO_PIN_RESET);
 8001448:	2200      	movs	r2, #0
 800144a:	2110      	movs	r1, #16
 800144c:	4853      	ldr	r0, [pc, #332]	; (800159c <write_num_display+0x378>)
 800144e:	f001 fcf9 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg2_Pin, GPIO_PIN_SET);
 8001452:	2201      	movs	r2, #1
 8001454:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001458:	4850      	ldr	r0, [pc, #320]	; (800159c <write_num_display+0x378>)
 800145a:	f001 fcf3 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Seg3_Pin, GPIO_PIN_SET);
 800145e:	2201      	movs	r2, #1
 8001460:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001464:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001468:	f001 fcec 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg4_Pin, GPIO_PIN_RESET);
 800146c:	2200      	movs	r2, #0
 800146e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001472:	484a      	ldr	r0, [pc, #296]	; (800159c <write_num_display+0x378>)
 8001474:	f001 fce6 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg5_Pin, GPIO_PIN_SET);
 8001478:	2201      	movs	r2, #1
 800147a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800147e:	4847      	ldr	r0, [pc, #284]	; (800159c <write_num_display+0x378>)
 8001480:	f001 fce0 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg6_Pin, GPIO_PIN_SET);
 8001484:	2201      	movs	r2, #1
 8001486:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800148a:	4844      	ldr	r0, [pc, #272]	; (800159c <write_num_display+0x378>)
 800148c:	f001 fcda 	bl	8002e44 <HAL_GPIO_WritePin>
		return (0x5);
 8001490:	2305      	movs	r3, #5
 8001492:	e1b4      	b.n	80017fe <write_num_display+0x5da>
		break;
	case (0x6):
		HAL_GPIO_WritePin(GPIOB, Seg0_Pin, GPIO_PIN_SET);
 8001494:	2201      	movs	r2, #1
 8001496:	2120      	movs	r1, #32
 8001498:	4840      	ldr	r0, [pc, #256]	; (800159c <write_num_display+0x378>)
 800149a:	f001 fcd3 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg1_Pin, GPIO_PIN_RESET);
 800149e:	2200      	movs	r2, #0
 80014a0:	2110      	movs	r1, #16
 80014a2:	483e      	ldr	r0, [pc, #248]	; (800159c <write_num_display+0x378>)
 80014a4:	f001 fcce 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg2_Pin, GPIO_PIN_SET);
 80014a8:	2201      	movs	r2, #1
 80014aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014ae:	483b      	ldr	r0, [pc, #236]	; (800159c <write_num_display+0x378>)
 80014b0:	f001 fcc8 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Seg3_Pin, GPIO_PIN_SET);
 80014b4:	2201      	movs	r2, #1
 80014b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014be:	f001 fcc1 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg4_Pin, GPIO_PIN_SET);
 80014c2:	2201      	movs	r2, #1
 80014c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014c8:	4834      	ldr	r0, [pc, #208]	; (800159c <write_num_display+0x378>)
 80014ca:	f001 fcbb 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg5_Pin, GPIO_PIN_SET);
 80014ce:	2201      	movs	r2, #1
 80014d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014d4:	4831      	ldr	r0, [pc, #196]	; (800159c <write_num_display+0x378>)
 80014d6:	f001 fcb5 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg6_Pin, GPIO_PIN_SET);
 80014da:	2201      	movs	r2, #1
 80014dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014e0:	482e      	ldr	r0, [pc, #184]	; (800159c <write_num_display+0x378>)
 80014e2:	f001 fcaf 	bl	8002e44 <HAL_GPIO_WritePin>
		return (0x6);
 80014e6:	2306      	movs	r3, #6
 80014e8:	e189      	b.n	80017fe <write_num_display+0x5da>
		break;
	case (0x7):
		HAL_GPIO_WritePin(GPIOB, Seg0_Pin, GPIO_PIN_SET);
 80014ea:	2201      	movs	r2, #1
 80014ec:	2120      	movs	r1, #32
 80014ee:	482b      	ldr	r0, [pc, #172]	; (800159c <write_num_display+0x378>)
 80014f0:	f001 fca8 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg1_Pin, GPIO_PIN_SET);
 80014f4:	2201      	movs	r2, #1
 80014f6:	2110      	movs	r1, #16
 80014f8:	4828      	ldr	r0, [pc, #160]	; (800159c <write_num_display+0x378>)
 80014fa:	f001 fca3 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg2_Pin, GPIO_PIN_SET);
 80014fe:	2201      	movs	r2, #1
 8001500:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001504:	4825      	ldr	r0, [pc, #148]	; (800159c <write_num_display+0x378>)
 8001506:	f001 fc9d 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Seg3_Pin, GPIO_PIN_RESET);
 800150a:	2200      	movs	r2, #0
 800150c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001514:	f001 fc96 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg4_Pin, GPIO_PIN_RESET);
 8001518:	2200      	movs	r2, #0
 800151a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800151e:	481f      	ldr	r0, [pc, #124]	; (800159c <write_num_display+0x378>)
 8001520:	f001 fc90 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg5_Pin, GPIO_PIN_RESET);
 8001524:	2200      	movs	r2, #0
 8001526:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800152a:	481c      	ldr	r0, [pc, #112]	; (800159c <write_num_display+0x378>)
 800152c:	f001 fc8a 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg6_Pin, GPIO_PIN_RESET);
 8001530:	2200      	movs	r2, #0
 8001532:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001536:	4819      	ldr	r0, [pc, #100]	; (800159c <write_num_display+0x378>)
 8001538:	f001 fc84 	bl	8002e44 <HAL_GPIO_WritePin>
		return (0x7);
 800153c:	2307      	movs	r3, #7
 800153e:	e15e      	b.n	80017fe <write_num_display+0x5da>
		break;
	case (0x8):
		HAL_GPIO_WritePin(GPIOB, Seg0_Pin, GPIO_PIN_SET);
 8001540:	2201      	movs	r2, #1
 8001542:	2120      	movs	r1, #32
 8001544:	4815      	ldr	r0, [pc, #84]	; (800159c <write_num_display+0x378>)
 8001546:	f001 fc7d 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg1_Pin, GPIO_PIN_SET);
 800154a:	2201      	movs	r2, #1
 800154c:	2110      	movs	r1, #16
 800154e:	4813      	ldr	r0, [pc, #76]	; (800159c <write_num_display+0x378>)
 8001550:	f001 fc78 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg2_Pin, GPIO_PIN_SET);
 8001554:	2201      	movs	r2, #1
 8001556:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800155a:	4810      	ldr	r0, [pc, #64]	; (800159c <write_num_display+0x378>)
 800155c:	f001 fc72 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Seg3_Pin, GPIO_PIN_SET);
 8001560:	2201      	movs	r2, #1
 8001562:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001566:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800156a:	f001 fc6b 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg4_Pin, GPIO_PIN_SET);
 800156e:	2201      	movs	r2, #1
 8001570:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001574:	4809      	ldr	r0, [pc, #36]	; (800159c <write_num_display+0x378>)
 8001576:	f001 fc65 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg5_Pin, GPIO_PIN_SET);
 800157a:	2201      	movs	r2, #1
 800157c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001580:	4806      	ldr	r0, [pc, #24]	; (800159c <write_num_display+0x378>)
 8001582:	f001 fc5f 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg6_Pin, GPIO_PIN_SET);
 8001586:	2201      	movs	r2, #1
 8001588:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800158c:	4803      	ldr	r0, [pc, #12]	; (800159c <write_num_display+0x378>)
 800158e:	f001 fc59 	bl	8002e44 <HAL_GPIO_WritePin>
		return (0x8);
 8001592:	2308      	movs	r3, #8
 8001594:	e133      	b.n	80017fe <write_num_display+0x5da>
 8001596:	bf00      	nop
 8001598:	08005cd8 	.word	0x08005cd8
 800159c:	48000400 	.word	0x48000400
		break;
	case (0x9):
		HAL_GPIO_WritePin(GPIOB, Seg0_Pin, GPIO_PIN_SET);
 80015a0:	2201      	movs	r2, #1
 80015a2:	2120      	movs	r1, #32
 80015a4:	4898      	ldr	r0, [pc, #608]	; (8001808 <write_num_display+0x5e4>)
 80015a6:	f001 fc4d 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg1_Pin, GPIO_PIN_SET);
 80015aa:	2201      	movs	r2, #1
 80015ac:	2110      	movs	r1, #16
 80015ae:	4896      	ldr	r0, [pc, #600]	; (8001808 <write_num_display+0x5e4>)
 80015b0:	f001 fc48 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg2_Pin, GPIO_PIN_SET);
 80015b4:	2201      	movs	r2, #1
 80015b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ba:	4893      	ldr	r0, [pc, #588]	; (8001808 <write_num_display+0x5e4>)
 80015bc:	f001 fc42 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Seg3_Pin, GPIO_PIN_RESET);
 80015c0:	2200      	movs	r2, #0
 80015c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ca:	f001 fc3b 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg4_Pin, GPIO_PIN_RESET);
 80015ce:	2200      	movs	r2, #0
 80015d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015d4:	488c      	ldr	r0, [pc, #560]	; (8001808 <write_num_display+0x5e4>)
 80015d6:	f001 fc35 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg5_Pin, GPIO_PIN_SET);
 80015da:	2201      	movs	r2, #1
 80015dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015e0:	4889      	ldr	r0, [pc, #548]	; (8001808 <write_num_display+0x5e4>)
 80015e2:	f001 fc2f 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg6_Pin, GPIO_PIN_SET);
 80015e6:	2201      	movs	r2, #1
 80015e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015ec:	4886      	ldr	r0, [pc, #536]	; (8001808 <write_num_display+0x5e4>)
 80015ee:	f001 fc29 	bl	8002e44 <HAL_GPIO_WritePin>
		return (0x9);
 80015f2:	2309      	movs	r3, #9
 80015f4:	e103      	b.n	80017fe <write_num_display+0x5da>
		break;
	case (0xA):
		HAL_GPIO_WritePin(GPIOB, Seg0_Pin, GPIO_PIN_SET);
 80015f6:	2201      	movs	r2, #1
 80015f8:	2120      	movs	r1, #32
 80015fa:	4883      	ldr	r0, [pc, #524]	; (8001808 <write_num_display+0x5e4>)
 80015fc:	f001 fc22 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg1_Pin, GPIO_PIN_SET);
 8001600:	2201      	movs	r2, #1
 8001602:	2110      	movs	r1, #16
 8001604:	4880      	ldr	r0, [pc, #512]	; (8001808 <write_num_display+0x5e4>)
 8001606:	f001 fc1d 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg2_Pin, GPIO_PIN_SET);
 800160a:	2201      	movs	r2, #1
 800160c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001610:	487d      	ldr	r0, [pc, #500]	; (8001808 <write_num_display+0x5e4>)
 8001612:	f001 fc17 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Seg3_Pin, GPIO_PIN_RESET);
 8001616:	2200      	movs	r2, #0
 8001618:	f44f 7180 	mov.w	r1, #256	; 0x100
 800161c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001620:	f001 fc10 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg4_Pin, GPIO_PIN_SET);
 8001624:	2201      	movs	r2, #1
 8001626:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800162a:	4877      	ldr	r0, [pc, #476]	; (8001808 <write_num_display+0x5e4>)
 800162c:	f001 fc0a 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg5_Pin, GPIO_PIN_SET);
 8001630:	2201      	movs	r2, #1
 8001632:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001636:	4874      	ldr	r0, [pc, #464]	; (8001808 <write_num_display+0x5e4>)
 8001638:	f001 fc04 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg6_Pin, GPIO_PIN_SET);
 800163c:	2201      	movs	r2, #1
 800163e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001642:	4871      	ldr	r0, [pc, #452]	; (8001808 <write_num_display+0x5e4>)
 8001644:	f001 fbfe 	bl	8002e44 <HAL_GPIO_WritePin>
		return (0xA);
 8001648:	230a      	movs	r3, #10
 800164a:	e0d8      	b.n	80017fe <write_num_display+0x5da>
		break;
	case (0xB):
		HAL_GPIO_WritePin(GPIOB, Seg0_Pin, GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	2120      	movs	r1, #32
 8001650:	486d      	ldr	r0, [pc, #436]	; (8001808 <write_num_display+0x5e4>)
 8001652:	f001 fbf7 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg1_Pin, GPIO_PIN_RESET);
 8001656:	2200      	movs	r2, #0
 8001658:	2110      	movs	r1, #16
 800165a:	486b      	ldr	r0, [pc, #428]	; (8001808 <write_num_display+0x5e4>)
 800165c:	f001 fbf2 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg2_Pin, GPIO_PIN_SET);
 8001660:	2201      	movs	r2, #1
 8001662:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001666:	4868      	ldr	r0, [pc, #416]	; (8001808 <write_num_display+0x5e4>)
 8001668:	f001 fbec 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Seg3_Pin, GPIO_PIN_SET);
 800166c:	2201      	movs	r2, #1
 800166e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001676:	f001 fbe5 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg4_Pin, GPIO_PIN_SET);
 800167a:	2201      	movs	r2, #1
 800167c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001680:	4861      	ldr	r0, [pc, #388]	; (8001808 <write_num_display+0x5e4>)
 8001682:	f001 fbdf 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg5_Pin, GPIO_PIN_SET);
 8001686:	2201      	movs	r2, #1
 8001688:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800168c:	485e      	ldr	r0, [pc, #376]	; (8001808 <write_num_display+0x5e4>)
 800168e:	f001 fbd9 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg6_Pin, GPIO_PIN_SET);
 8001692:	2201      	movs	r2, #1
 8001694:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001698:	485b      	ldr	r0, [pc, #364]	; (8001808 <write_num_display+0x5e4>)
 800169a:	f001 fbd3 	bl	8002e44 <HAL_GPIO_WritePin>
		return (0xB);
 800169e:	230b      	movs	r3, #11
 80016a0:	e0ad      	b.n	80017fe <write_num_display+0x5da>
		break;
	case (0xC):
		HAL_GPIO_WritePin(GPIOB, Seg0_Pin, GPIO_PIN_SET);
 80016a2:	2201      	movs	r2, #1
 80016a4:	2120      	movs	r1, #32
 80016a6:	4858      	ldr	r0, [pc, #352]	; (8001808 <write_num_display+0x5e4>)
 80016a8:	f001 fbcc 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg1_Pin, GPIO_PIN_RESET);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2110      	movs	r1, #16
 80016b0:	4855      	ldr	r0, [pc, #340]	; (8001808 <write_num_display+0x5e4>)
 80016b2:	f001 fbc7 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg2_Pin, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016bc:	4852      	ldr	r0, [pc, #328]	; (8001808 <write_num_display+0x5e4>)
 80016be:	f001 fbc1 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Seg3_Pin, GPIO_PIN_SET);
 80016c2:	2201      	movs	r2, #1
 80016c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016cc:	f001 fbba 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg4_Pin, GPIO_PIN_SET);
 80016d0:	2201      	movs	r2, #1
 80016d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016d6:	484c      	ldr	r0, [pc, #304]	; (8001808 <write_num_display+0x5e4>)
 80016d8:	f001 fbb4 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg5_Pin, GPIO_PIN_SET);
 80016dc:	2201      	movs	r2, #1
 80016de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016e2:	4849      	ldr	r0, [pc, #292]	; (8001808 <write_num_display+0x5e4>)
 80016e4:	f001 fbae 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg6_Pin, GPIO_PIN_RESET);
 80016e8:	2200      	movs	r2, #0
 80016ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016ee:	4846      	ldr	r0, [pc, #280]	; (8001808 <write_num_display+0x5e4>)
 80016f0:	f001 fba8 	bl	8002e44 <HAL_GPIO_WritePin>
		return (0xC);
 80016f4:	230c      	movs	r3, #12
 80016f6:	e082      	b.n	80017fe <write_num_display+0x5da>
		break;
	case (0xD):
		HAL_GPIO_WritePin(GPIOB, Seg0_Pin, GPIO_PIN_RESET);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2120      	movs	r1, #32
 80016fc:	4842      	ldr	r0, [pc, #264]	; (8001808 <write_num_display+0x5e4>)
 80016fe:	f001 fba1 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg1_Pin, GPIO_PIN_SET);
 8001702:	2201      	movs	r2, #1
 8001704:	2110      	movs	r1, #16
 8001706:	4840      	ldr	r0, [pc, #256]	; (8001808 <write_num_display+0x5e4>)
 8001708:	f001 fb9c 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg2_Pin, GPIO_PIN_SET);
 800170c:	2201      	movs	r2, #1
 800170e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001712:	483d      	ldr	r0, [pc, #244]	; (8001808 <write_num_display+0x5e4>)
 8001714:	f001 fb96 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Seg3_Pin, GPIO_PIN_SET);
 8001718:	2201      	movs	r2, #1
 800171a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800171e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001722:	f001 fb8f 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg4_Pin, GPIO_PIN_SET);
 8001726:	2201      	movs	r2, #1
 8001728:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800172c:	4836      	ldr	r0, [pc, #216]	; (8001808 <write_num_display+0x5e4>)
 800172e:	f001 fb89 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg5_Pin, GPIO_PIN_RESET);
 8001732:	2200      	movs	r2, #0
 8001734:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001738:	4833      	ldr	r0, [pc, #204]	; (8001808 <write_num_display+0x5e4>)
 800173a:	f001 fb83 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg6_Pin, GPIO_PIN_SET);
 800173e:	2201      	movs	r2, #1
 8001740:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001744:	4830      	ldr	r0, [pc, #192]	; (8001808 <write_num_display+0x5e4>)
 8001746:	f001 fb7d 	bl	8002e44 <HAL_GPIO_WritePin>
		return (0xD);
 800174a:	230d      	movs	r3, #13
 800174c:	e057      	b.n	80017fe <write_num_display+0x5da>
		break;
	case (0xE):
		HAL_GPIO_WritePin(GPIOB, Seg0_Pin, GPIO_PIN_SET);
 800174e:	2201      	movs	r2, #1
 8001750:	2120      	movs	r1, #32
 8001752:	482d      	ldr	r0, [pc, #180]	; (8001808 <write_num_display+0x5e4>)
 8001754:	f001 fb76 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg1_Pin, GPIO_PIN_RESET);
 8001758:	2200      	movs	r2, #0
 800175a:	2110      	movs	r1, #16
 800175c:	482a      	ldr	r0, [pc, #168]	; (8001808 <write_num_display+0x5e4>)
 800175e:	f001 fb71 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg2_Pin, GPIO_PIN_RESET);
 8001762:	2200      	movs	r2, #0
 8001764:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001768:	4827      	ldr	r0, [pc, #156]	; (8001808 <write_num_display+0x5e4>)
 800176a:	f001 fb6b 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Seg3_Pin, GPIO_PIN_SET);
 800176e:	2201      	movs	r2, #1
 8001770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001778:	f001 fb64 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg4_Pin, GPIO_PIN_SET);
 800177c:	2201      	movs	r2, #1
 800177e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001782:	4821      	ldr	r0, [pc, #132]	; (8001808 <write_num_display+0x5e4>)
 8001784:	f001 fb5e 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg5_Pin, GPIO_PIN_SET);
 8001788:	2201      	movs	r2, #1
 800178a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800178e:	481e      	ldr	r0, [pc, #120]	; (8001808 <write_num_display+0x5e4>)
 8001790:	f001 fb58 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg6_Pin, GPIO_PIN_SET);
 8001794:	2201      	movs	r2, #1
 8001796:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800179a:	481b      	ldr	r0, [pc, #108]	; (8001808 <write_num_display+0x5e4>)
 800179c:	f001 fb52 	bl	8002e44 <HAL_GPIO_WritePin>
		return (0xE);
 80017a0:	230e      	movs	r3, #14
 80017a2:	e02c      	b.n	80017fe <write_num_display+0x5da>
		break;
	case (0xF):
		HAL_GPIO_WritePin(GPIOB, Seg0_Pin, GPIO_PIN_SET);
 80017a4:	2201      	movs	r2, #1
 80017a6:	2120      	movs	r1, #32
 80017a8:	4817      	ldr	r0, [pc, #92]	; (8001808 <write_num_display+0x5e4>)
 80017aa:	f001 fb4b 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg1_Pin, GPIO_PIN_RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2110      	movs	r1, #16
 80017b2:	4815      	ldr	r0, [pc, #84]	; (8001808 <write_num_display+0x5e4>)
 80017b4:	f001 fb46 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg2_Pin, GPIO_PIN_RESET);
 80017b8:	2200      	movs	r2, #0
 80017ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017be:	4812      	ldr	r0, [pc, #72]	; (8001808 <write_num_display+0x5e4>)
 80017c0:	f001 fb40 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Seg3_Pin, GPIO_PIN_RESET);
 80017c4:	2200      	movs	r2, #0
 80017c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ce:	f001 fb39 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg4_Pin, GPIO_PIN_SET);
 80017d2:	2201      	movs	r2, #1
 80017d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017d8:	480b      	ldr	r0, [pc, #44]	; (8001808 <write_num_display+0x5e4>)
 80017da:	f001 fb33 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg5_Pin, GPIO_PIN_SET);
 80017de:	2201      	movs	r2, #1
 80017e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017e4:	4808      	ldr	r0, [pc, #32]	; (8001808 <write_num_display+0x5e4>)
 80017e6:	f001 fb2d 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg6_Pin, GPIO_PIN_SET);
 80017ea:	2201      	movs	r2, #1
 80017ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017f0:	4805      	ldr	r0, [pc, #20]	; (8001808 <write_num_display+0x5e4>)
 80017f2:	f001 fb27 	bl	8002e44 <HAL_GPIO_WritePin>
		return (0xF);
 80017f6:	230f      	movs	r3, #15
 80017f8:	e001      	b.n	80017fe <write_num_display+0x5da>
		break;
	}
	return (-1);
 80017fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	48000400 	.word	0x48000400

0800180c <write_Display>:

int write_Display(int display, int fila, int columna) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]

	switch (display) {
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	3b01      	subs	r3, #1
 800181c:	2b03      	cmp	r3, #3
 800181e:	d863      	bhi.n	80018e8 <write_Display+0xdc>
 8001820:	a201      	add	r2, pc, #4	; (adr r2, 8001828 <write_Display+0x1c>)
 8001822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001826:	bf00      	nop
 8001828:	08001839 	.word	0x08001839
 800182c:	08001865 	.word	0x08001865
 8001830:	08001891 	.word	0x08001891
 8001834:	080018bd 	.word	0x080018bd
	case (1):
		HAL_GPIO_WritePin(GPIOC, Display2_Pin, GPIO_PIN_SET);
 8001838:	2201      	movs	r2, #1
 800183a:	2102      	movs	r1, #2
 800183c:	482f      	ldr	r0, [pc, #188]	; (80018fc <write_Display+0xf0>)
 800183e:	f001 fb01 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Display3_Pin, GPIO_PIN_SET);
 8001842:	2201      	movs	r2, #1
 8001844:	2101      	movs	r1, #1
 8001846:	482e      	ldr	r0, [pc, #184]	; (8001900 <write_Display+0xf4>)
 8001848:	f001 fafc 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Display4_Pin, GPIO_PIN_SET);
 800184c:	2201      	movs	r2, #1
 800184e:	2110      	movs	r1, #16
 8001850:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001854:	f001 faf6 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Display1_Pin, GPIO_PIN_RESET);
 8001858:	2200      	movs	r2, #0
 800185a:	2101      	movs	r1, #1
 800185c:	4827      	ldr	r0, [pc, #156]	; (80018fc <write_Display+0xf0>)
 800185e:	f001 faf1 	bl	8002e44 <HAL_GPIO_WritePin>
		break;
 8001862:	e041      	b.n	80018e8 <write_Display+0xdc>
	case (2):
		HAL_GPIO_WritePin(GPIOC, Display1_Pin, GPIO_PIN_SET);
 8001864:	2201      	movs	r2, #1
 8001866:	2101      	movs	r1, #1
 8001868:	4824      	ldr	r0, [pc, #144]	; (80018fc <write_Display+0xf0>)
 800186a:	f001 faeb 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Display3_Pin, GPIO_PIN_SET);
 800186e:	2201      	movs	r2, #1
 8001870:	2101      	movs	r1, #1
 8001872:	4823      	ldr	r0, [pc, #140]	; (8001900 <write_Display+0xf4>)
 8001874:	f001 fae6 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Display4_Pin, GPIO_PIN_SET);
 8001878:	2201      	movs	r2, #1
 800187a:	2110      	movs	r1, #16
 800187c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001880:	f001 fae0 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Display2_Pin, GPIO_PIN_RESET);
 8001884:	2200      	movs	r2, #0
 8001886:	2102      	movs	r1, #2
 8001888:	481c      	ldr	r0, [pc, #112]	; (80018fc <write_Display+0xf0>)
 800188a:	f001 fadb 	bl	8002e44 <HAL_GPIO_WritePin>
		break;
 800188e:	e02b      	b.n	80018e8 <write_Display+0xdc>
	case (3):
		HAL_GPIO_WritePin(GPIOC, Display1_Pin, GPIO_PIN_SET);
 8001890:	2201      	movs	r2, #1
 8001892:	2101      	movs	r1, #1
 8001894:	4819      	ldr	r0, [pc, #100]	; (80018fc <write_Display+0xf0>)
 8001896:	f001 fad5 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Display2_Pin, GPIO_PIN_SET);
 800189a:	2201      	movs	r2, #1
 800189c:	2102      	movs	r1, #2
 800189e:	4817      	ldr	r0, [pc, #92]	; (80018fc <write_Display+0xf0>)
 80018a0:	f001 fad0 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Display4_Pin, GPIO_PIN_SET);
 80018a4:	2201      	movs	r2, #1
 80018a6:	2110      	movs	r1, #16
 80018a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ac:	f001 faca 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Display3_Pin, GPIO_PIN_RESET);
 80018b0:	2200      	movs	r2, #0
 80018b2:	2101      	movs	r1, #1
 80018b4:	4812      	ldr	r0, [pc, #72]	; (8001900 <write_Display+0xf4>)
 80018b6:	f001 fac5 	bl	8002e44 <HAL_GPIO_WritePin>
		break;
 80018ba:	e015      	b.n	80018e8 <write_Display+0xdc>
	case (4):
		HAL_GPIO_WritePin(GPIOC, Display1_Pin, GPIO_PIN_SET);
 80018bc:	2201      	movs	r2, #1
 80018be:	2101      	movs	r1, #1
 80018c0:	480e      	ldr	r0, [pc, #56]	; (80018fc <write_Display+0xf0>)
 80018c2:	f001 fabf 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Display2_Pin, GPIO_PIN_SET);
 80018c6:	2201      	movs	r2, #1
 80018c8:	2102      	movs	r1, #2
 80018ca:	480c      	ldr	r0, [pc, #48]	; (80018fc <write_Display+0xf0>)
 80018cc:	f001 faba 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Display3_Pin, GPIO_PIN_SET);
 80018d0:	2201      	movs	r2, #1
 80018d2:	2101      	movs	r1, #1
 80018d4:	480a      	ldr	r0, [pc, #40]	; (8001900 <write_Display+0xf4>)
 80018d6:	f001 fab5 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Display4_Pin, GPIO_PIN_RESET);
 80018da:	2200      	movs	r2, #0
 80018dc:	2110      	movs	r1, #16
 80018de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018e2:	f001 faaf 	bl	8002e44 <HAL_GPIO_WritePin>
		break;
 80018e6:	bf00      	nop
	}

	return (write_num_display(fila, columna));
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	68b8      	ldr	r0, [r7, #8]
 80018ec:	f7ff fc9a 	bl	8001224 <write_num_display>
 80018f0:	4603      	mov	r3, r0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	48000800 	.word	0x48000800
 8001900:	48000400 	.word	0x48000400

08001904 <count_digits>:

int	count_digits(unsigned int decnum)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
	int cnt = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
	while (decnum != 0)
 8001910:	e008      	b.n	8001924 <count_digits+0x20>
	{
		cnt++;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	3301      	adds	r3, #1
 8001916:	60fb      	str	r3, [r7, #12]
		decnum /= 10;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a07      	ldr	r2, [pc, #28]	; (8001938 <count_digits+0x34>)
 800191c:	fba2 2303 	umull	r2, r3, r2, r3
 8001920:	08db      	lsrs	r3, r3, #3
 8001922:	607b      	str	r3, [r7, #4]
	while (decnum != 0)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f3      	bne.n	8001912 <count_digits+0xe>
	}
	return (cnt);
 800192a:	68fb      	ldr	r3, [r7, #12]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	cccccccd 	.word	0xcccccccd
 800193c:	00000000 	.word	0x00000000

08001940 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001944:	b0b6      	sub	sp, #216	; 0xd8
 8001946:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001948:	f000 ff34 	bl	80027b4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800194c:	f000 fd0a 	bl	8002364 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001950:	f000 fd8a 	bl	8002468 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001954:	f000 fd58 	bl	8002408 <MX_USART2_UART_Init>
	int d;
	long long int hexnum;
	unsigned int	hexnum_pequenyito;
	unsigned int decnum;
	int multiplicador;
	int hex_fil[8] = { -1 };
 8001958:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800195c:	2220      	movs	r2, #32
 800195e:	2100      	movs	r1, #0
 8001960:	4618      	mov	r0, r3
 8001962:	f003 fa87 	bl	8004e74 <memset>
 8001966:	f04f 33ff 	mov.w	r3, #4294967295
 800196a:	65fb      	str	r3, [r7, #92]	; 0x5c
	int hex_col[8] = { -1 };
 800196c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001970:	2220      	movs	r2, #32
 8001972:	2100      	movs	r1, #0
 8001974:	4618      	mov	r0, r3
 8001976:	f003 fa7d 	bl	8004e74 <memset>
 800197a:	f04f 33ff 	mov.w	r3, #4294967295
 800197e:	63fb      	str	r3, [r7, #60]	; 0x3c
	int dec_digits[10] = { -1 };
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	2228      	movs	r2, #40	; 0x28
 8001986:	2100      	movs	r1, #0
 8001988:	4618      	mov	r0, r3
 800198a:	f003 fa73 	bl	8004e74 <memset>
 800198e:	f04f 33ff 	mov.w	r3, #4294967295
 8001992:	617b      	str	r3, [r7, #20]
	int limit_left;
	int point;

	while (1) {

		d = 4;
 8001994:	2304      	movs	r3, #4
 8001996:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		hexnum = 0x0;
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
		decnum = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		multiplicador = 1;
 80019ac:	2301      	movs	r3, #1
 80019ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		columna = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		fila = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		boton_matricial = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		tam_array = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		index_digits = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for(int i = 0; i < 10; ++i)
 80019d0:	2300      	movs	r3, #0
 80019d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80019d6:	e00f      	b.n	80019f8 <main+0xb8>
			dec_digits[i] = -1;
 80019d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	33c8      	adds	r3, #200	; 0xc8
 80019e0:	f107 0210 	add.w	r2, r7, #16
 80019e4:	4413      	add	r3, r2
 80019e6:	f04f 32ff 	mov.w	r2, #4294967295
 80019ea:	f843 2cc4 	str.w	r2, [r3, #-196]
		for(int i = 0; i < 10; ++i)
 80019ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019f2:	3301      	adds	r3, #1
 80019f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80019f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019fc:	2b09      	cmp	r3, #9
 80019fe:	ddeb      	ble.n	80019d8 <main+0x98>

		HAL_GPIO_WritePin(GPIOC, Display1_Pin, GPIO_PIN_RESET);
 8001a00:	2200      	movs	r2, #0
 8001a02:	2101      	movs	r1, #1
 8001a04:	48de      	ldr	r0, [pc, #888]	; (8001d80 <main+0x440>)
 8001a06:	f001 fa1d 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Display2_Pin, GPIO_PIN_RESET);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2102      	movs	r1, #2
 8001a0e:	48dc      	ldr	r0, [pc, #880]	; (8001d80 <main+0x440>)
 8001a10:	f001 fa18 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Display3_Pin, GPIO_PIN_RESET);
 8001a14:	2200      	movs	r2, #0
 8001a16:	2101      	movs	r1, #1
 8001a18:	48da      	ldr	r0, [pc, #872]	; (8001d84 <main+0x444>)
 8001a1a:	f001 fa13 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Display4_Pin, GPIO_PIN_RESET);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2110      	movs	r1, #16
 8001a22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a26:	f001 fa0d 	bl	8002e44 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, Seg0_Pin, GPIO_PIN_RESET);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2120      	movs	r1, #32
 8001a2e:	48d5      	ldr	r0, [pc, #852]	; (8001d84 <main+0x444>)
 8001a30:	f001 fa08 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg1_Pin, GPIO_PIN_RESET);
 8001a34:	2200      	movs	r2, #0
 8001a36:	2110      	movs	r1, #16
 8001a38:	48d2      	ldr	r0, [pc, #840]	; (8001d84 <main+0x444>)
 8001a3a:	f001 fa03 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg2_Pin, GPIO_PIN_RESET);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a44:	48cf      	ldr	r0, [pc, #828]	; (8001d84 <main+0x444>)
 8001a46:	f001 f9fd 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Seg3_Pin, GPIO_PIN_RESET);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a54:	f001 f9f6 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg4_Pin, GPIO_PIN_RESET);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a5e:	48c9      	ldr	r0, [pc, #804]	; (8001d84 <main+0x444>)
 8001a60:	f001 f9f0 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg5_Pin, GPIO_PIN_RESET);
 8001a64:	2200      	movs	r2, #0
 8001a66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a6a:	48c6      	ldr	r0, [pc, #792]	; (8001d84 <main+0x444>)
 8001a6c:	f001 f9ea 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Seg6_Pin, GPIO_PIN_RESET);
 8001a70:	2200      	movs	r2, #0
 8001a72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a76:	48c3      	ldr	r0, [pc, #780]	; (8001d84 <main+0x444>)
 8001a78:	f001 f9e4 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Point_Pin, GPIO_PIN_RESET);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2102      	movs	r1, #2
 8001a80:	48c0      	ldr	r0, [pc, #768]	; (8001d84 <main+0x444>)
 8001a82:	f001 f9df 	bl	8002e44 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, Led4_Pin, GPIO_PIN_RESET);
 8001a86:	2200      	movs	r2, #0
 8001a88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a8c:	48bc      	ldr	r0, [pc, #752]	; (8001d80 <main+0x440>)
 8001a8e:	f001 f9d9 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Led3_Pin, GPIO_PIN_RESET);
 8001a92:	2200      	movs	r2, #0
 8001a94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a98:	48ba      	ldr	r0, [pc, #744]	; (8001d84 <main+0x444>)
 8001a9a:	f001 f9d3 	bl	8002e44 <HAL_GPIO_WritePin>


		HAL_GPIO_WritePin(GPIOA, CLK_Pin, GPIO_PIN_SET);
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	2102      	movs	r1, #2
 8001aa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa6:	f001 f9cd 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, CLK_Pin, GPIO_PIN_RESET);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2102      	movs	r1, #2
 8001aae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ab2:	f001 f9c7 	bl	8002e44 <HAL_GPIO_WritePin>

		// Lectura teclado matricial
		while (1) {
			HAL_Delay(500);
 8001ab6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001aba:	f000 fef7 	bl	80028ac <HAL_Delay>
			boton_matricial = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			while (HAL_GPIO_ReadPin(GPIOA, Button2_Pin) == 0) {
 8001ac4:	e0c0      	b.n	8001c48 <main+0x308>
				if (HAL_GPIO_ReadPin(GPIOA, Button1_Pin) == 1)
 8001ac6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001aca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ace:	f001 f9a1 	bl	8002e14 <HAL_GPIO_ReadPin>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d101      	bne.n	8001adc <main+0x19c>
					NVIC_SystemReset();
 8001ad8:	f7ff f984 	bl	8000de4 <__NVIC_SystemReset>

				HAL_GPIO_WritePin(GPIOC, Fil2_Pin, GPIO_PIN_RESET);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2104      	movs	r1, #4
 8001ae0:	48a7      	ldr	r0, [pc, #668]	; (8001d80 <main+0x440>)
 8001ae2:	f001 f9af 	bl	8002e44 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, Fil3_Pin, GPIO_PIN_RESET);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aec:	48a4      	ldr	r0, [pc, #656]	; (8001d80 <main+0x440>)
 8001aee:	f001 f9a9 	bl	8002e44 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, Fil4_Pin, GPIO_PIN_RESET);
 8001af2:	2200      	movs	r2, #0
 8001af4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001af8:	48a1      	ldr	r0, [pc, #644]	; (8001d80 <main+0x440>)
 8001afa:	f001 f9a3 	bl	8002e44 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, Fil1_Pin, GPIO_PIN_SET);
 8001afe:	2201      	movs	r2, #1
 8001b00:	2108      	movs	r1, #8
 8001b02:	489f      	ldr	r0, [pc, #636]	; (8001d80 <main+0x440>)
 8001b04:	f001 f99e 	bl	8002e44 <HAL_GPIO_WritePin>

				columna = lectura_columnas();
 8001b08:	f7ff f982 	bl	8000e10 <lectura_columnas>
 8001b0c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
				HAL_Delay(50);
 8001b10:	2032      	movs	r0, #50	; 0x32
 8001b12:	f000 fecb 	bl	80028ac <HAL_Delay>
				if (columna != 0) {
 8001b16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00b      	beq.n	8001b36 <main+0x1f6>
					fila = 1;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
					HAL_GPIO_WritePin(GPIOC, Fil1_Pin, GPIO_PIN_RESET);
 8001b24:	2200      	movs	r2, #0
 8001b26:	2108      	movs	r1, #8
 8001b28:	4895      	ldr	r0, [pc, #596]	; (8001d80 <main+0x440>)
 8001b2a:	f001 f98b 	bl	8002e44 <HAL_GPIO_WritePin>
					boton_matricial = 1;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
					break;
 8001b34:	e092      	b.n	8001c5c <main+0x31c>
				}

				HAL_GPIO_WritePin(GPIOC, Fil1_Pin, GPIO_PIN_RESET);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2108      	movs	r1, #8
 8001b3a:	4891      	ldr	r0, [pc, #580]	; (8001d80 <main+0x440>)
 8001b3c:	f001 f982 	bl	8002e44 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, Fil3_Pin, GPIO_PIN_RESET);
 8001b40:	2200      	movs	r2, #0
 8001b42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b46:	488e      	ldr	r0, [pc, #568]	; (8001d80 <main+0x440>)
 8001b48:	f001 f97c 	bl	8002e44 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, Fil4_Pin, GPIO_PIN_RESET);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b52:	488b      	ldr	r0, [pc, #556]	; (8001d80 <main+0x440>)
 8001b54:	f001 f976 	bl	8002e44 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, Fil2_Pin, GPIO_PIN_SET);
 8001b58:	2201      	movs	r2, #1
 8001b5a:	2104      	movs	r1, #4
 8001b5c:	4888      	ldr	r0, [pc, #544]	; (8001d80 <main+0x440>)
 8001b5e:	f001 f971 	bl	8002e44 <HAL_GPIO_WritePin>

				columna = lectura_columnas();
 8001b62:	f7ff f955 	bl	8000e10 <lectura_columnas>
 8001b66:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
				HAL_Delay(50);
 8001b6a:	2032      	movs	r0, #50	; 0x32
 8001b6c:	f000 fe9e 	bl	80028ac <HAL_Delay>
				if (columna != 0) {
 8001b70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d00b      	beq.n	8001b90 <main+0x250>
					fila = 2;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
					HAL_GPIO_WritePin(GPIOC, Fil2_Pin, GPIO_PIN_RESET);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2104      	movs	r1, #4
 8001b82:	487f      	ldr	r0, [pc, #508]	; (8001d80 <main+0x440>)
 8001b84:	f001 f95e 	bl	8002e44 <HAL_GPIO_WritePin>
					boton_matricial = 1;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
					break;
 8001b8e:	e065      	b.n	8001c5c <main+0x31c>
				}

				HAL_GPIO_WritePin(GPIOC, Fil1_Pin, GPIO_PIN_RESET);
 8001b90:	2200      	movs	r2, #0
 8001b92:	2108      	movs	r1, #8
 8001b94:	487a      	ldr	r0, [pc, #488]	; (8001d80 <main+0x440>)
 8001b96:	f001 f955 	bl	8002e44 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, Fil2_Pin, GPIO_PIN_RESET);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2104      	movs	r1, #4
 8001b9e:	4878      	ldr	r0, [pc, #480]	; (8001d80 <main+0x440>)
 8001ba0:	f001 f950 	bl	8002e44 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, Fil4_Pin, GPIO_PIN_RESET);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001baa:	4875      	ldr	r0, [pc, #468]	; (8001d80 <main+0x440>)
 8001bac:	f001 f94a 	bl	8002e44 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, Fil3_Pin, GPIO_PIN_SET);
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bb6:	4872      	ldr	r0, [pc, #456]	; (8001d80 <main+0x440>)
 8001bb8:	f001 f944 	bl	8002e44 <HAL_GPIO_WritePin>

				columna = lectura_columnas();
 8001bbc:	f7ff f928 	bl	8000e10 <lectura_columnas>
 8001bc0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
				HAL_Delay(50);
 8001bc4:	2032      	movs	r0, #50	; 0x32
 8001bc6:	f000 fe71 	bl	80028ac <HAL_Delay>
				if (columna != 0) {
 8001bca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00c      	beq.n	8001bec <main+0x2ac>
					fila = 3;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
					HAL_GPIO_WritePin(GPIOC, Fil3_Pin, GPIO_PIN_RESET);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bde:	4868      	ldr	r0, [pc, #416]	; (8001d80 <main+0x440>)
 8001be0:	f001 f930 	bl	8002e44 <HAL_GPIO_WritePin>
					boton_matricial = 1;
 8001be4:	2301      	movs	r3, #1
 8001be6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
					break;
 8001bea:	e037      	b.n	8001c5c <main+0x31c>
				}

				HAL_GPIO_WritePin(GPIOC, Fil1_Pin, GPIO_PIN_RESET);
 8001bec:	2200      	movs	r2, #0
 8001bee:	2108      	movs	r1, #8
 8001bf0:	4863      	ldr	r0, [pc, #396]	; (8001d80 <main+0x440>)
 8001bf2:	f001 f927 	bl	8002e44 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, Fil2_Pin, GPIO_PIN_RESET);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2104      	movs	r1, #4
 8001bfa:	4861      	ldr	r0, [pc, #388]	; (8001d80 <main+0x440>)
 8001bfc:	f001 f922 	bl	8002e44 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, Fil3_Pin, GPIO_PIN_RESET);
 8001c00:	2200      	movs	r2, #0
 8001c02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c06:	485e      	ldr	r0, [pc, #376]	; (8001d80 <main+0x440>)
 8001c08:	f001 f91c 	bl	8002e44 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, Fil4_Pin, GPIO_PIN_SET);
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c12:	485b      	ldr	r0, [pc, #364]	; (8001d80 <main+0x440>)
 8001c14:	f001 f916 	bl	8002e44 <HAL_GPIO_WritePin>

				columna = lectura_columnas();
 8001c18:	f7ff f8fa 	bl	8000e10 <lectura_columnas>
 8001c1c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
				HAL_Delay(50);
 8001c20:	2032      	movs	r0, #50	; 0x32
 8001c22:	f000 fe43 	bl	80028ac <HAL_Delay>
				if (columna != 0) {
 8001c26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00c      	beq.n	8001c48 <main+0x308>
					fila = 4;
 8001c2e:	2304      	movs	r3, #4
 8001c30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
					HAL_GPIO_WritePin(GPIOC, Fil4_Pin, GPIO_PIN_RESET);
 8001c34:	2200      	movs	r2, #0
 8001c36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c3a:	4851      	ldr	r0, [pc, #324]	; (8001d80 <main+0x440>)
 8001c3c:	f001 f902 	bl	8002e44 <HAL_GPIO_WritePin>
					boton_matricial = 1;
 8001c40:	2301      	movs	r3, #1
 8001c42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
					break;
 8001c46:	e009      	b.n	8001c5c <main+0x31c>
			while (HAL_GPIO_ReadPin(GPIOA, Button2_Pin) == 0) {
 8001c48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c50:	f001 f8e0 	bl	8002e14 <HAL_GPIO_ReadPin>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f43f af35 	beq.w	8001ac6 <main+0x186>
				}
			}
			if (!boton_matricial) {
 8001c5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f000 80e4 	beq.w	8001e2e <main+0x4ee>
				break;
			}
			if (!d) { // Hay más digitos que displays en  el tester
 8001c66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f040 808c 	bne.w	8001d88 <main+0x448>
				hexnum = hexnum * 0x10 + write_Display(1, fila, columna);
 8001c70:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001c74:	f04f 0400 	mov.w	r4, #0
 8001c78:	f04f 0500 	mov.w	r5, #0
 8001c7c:	011d      	lsls	r5, r3, #4
 8001c7e:	ea45 7512 	orr.w	r5, r5, r2, lsr #28
 8001c82:	0114      	lsls	r4, r2, #4
 8001c84:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001c88:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	f7ff fdbd 	bl	800180c <write_Display>
 8001c92:	4603      	mov	r3, r0
 8001c94:	17da      	asrs	r2, r3, #31
 8001c96:	4698      	mov	r8, r3
 8001c98:	4691      	mov	r9, r2
 8001c9a:	eb14 0308 	adds.w	r3, r4, r8
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	eb45 0309 	adc.w	r3, r5, r9
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001caa:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
				HAL_GPIO_WritePin(GPIOA, CLK_Pin, GPIO_PIN_SET);
 8001cae:	2201      	movs	r2, #1
 8001cb0:	2102      	movs	r1, #2
 8001cb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb6:	f001 f8c5 	bl	8002e44 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, CLK_Pin, GPIO_PIN_RESET);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2102      	movs	r1, #2
 8001cbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc2:	f001 f8bf 	bl	8002e44 <HAL_GPIO_WritePin>
				for (int i = 2; i <= 4; i++) {
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001ccc:	e031      	b.n	8001d32 <main+0x3f2>
					write_Display(i, hex_fil[tam_array - 1 - (i - 2)],
 8001cce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cd2:	1e5a      	subs	r2, r3, #1
 8001cd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cd8:	3b02      	subs	r3, #2
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	33c8      	adds	r3, #200	; 0xc8
 8001ce0:	f107 0210 	add.w	r2, r7, #16
 8001ce4:	4413      	add	r3, r2
 8001ce6:	f853 1c7c 	ldr.w	r1, [r3, #-124]
							hex_col[tam_array - 1 - (i - 2)]);
 8001cea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cee:	1e5a      	subs	r2, r3, #1
 8001cf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cf4:	3b02      	subs	r3, #2
 8001cf6:	1ad3      	subs	r3, r2, r3
					write_Display(i, hex_fil[tam_array - 1 - (i - 2)],
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	33c8      	adds	r3, #200	; 0xc8
 8001cfc:	f107 0210 	add.w	r2, r7, #16
 8001d00:	4413      	add	r3, r2
 8001d02:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001d06:	461a      	mov	r2, r3
 8001d08:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001d0c:	f7ff fd7e 	bl	800180c <write_Display>
					HAL_GPIO_WritePin(GPIOA, CLK_Pin, GPIO_PIN_SET);
 8001d10:	2201      	movs	r2, #1
 8001d12:	2102      	movs	r1, #2
 8001d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d18:	f001 f894 	bl	8002e44 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, CLK_Pin, GPIO_PIN_RESET);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2102      	movs	r1, #2
 8001d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d24:	f001 f88e 	bl	8002e44 <HAL_GPIO_WritePin>
				for (int i = 2; i <= 4; i++) {
 8001d28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001d32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	ddc9      	ble.n	8001cce <main+0x38e>
				}
				hex_fil[tam_array] = fila;
 8001d3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	33c8      	adds	r3, #200	; 0xc8
 8001d42:	f107 0210 	add.w	r2, r7, #16
 8001d46:	4413      	add	r3, r2
 8001d48:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001d4c:	f843 2c7c 	str.w	r2, [r3, #-124]
				hex_col[tam_array] = columna;
 8001d50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	33c8      	adds	r3, #200	; 0xc8
 8001d58:	f107 0210 	add.w	r2, r7, #16
 8001d5c:	4413      	add	r3, r2
 8001d5e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001d62:	f843 2c9c 	str.w	r2, [r3, #-156]
				fila = 0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
				columna = 0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
				tam_array++;
 8001d72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d76:	3301      	adds	r3, #1
 8001d78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001d7c:	e69b      	b.n	8001ab6 <main+0x176>
 8001d7e:	bf00      	nop
 8001d80:	48000800 	.word	0x48000800
 8001d84:	48000400 	.word	0x48000400

			} else {
				hexnum = hexnum * 0x10 + write_Display(d, fila, columna);
 8001d88:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001d8c:	f04f 0400 	mov.w	r4, #0
 8001d90:	f04f 0500 	mov.w	r5, #0
 8001d94:	011d      	lsls	r5, r3, #4
 8001d96:	ea45 7512 	orr.w	r5, r5, r2, lsr #28
 8001d9a:	0114      	lsls	r4, r2, #4
 8001d9c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001da0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001da4:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8001da8:	f7ff fd30 	bl	800180c <write_Display>
 8001dac:	4603      	mov	r3, r0
 8001dae:	17da      	asrs	r2, r3, #31
 8001db0:	469a      	mov	sl, r3
 8001db2:	4693      	mov	fp, r2
 8001db4:	eb14 030a 	adds.w	r3, r4, sl
 8001db8:	603b      	str	r3, [r7, #0]
 8001dba:	eb45 030b 	adc.w	r3, r5, fp
 8001dbe:	607b      	str	r3, [r7, #4]
 8001dc0:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001dc4:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
				HAL_GPIO_WritePin(GPIOA, CLK_Pin, GPIO_PIN_SET);
 8001dc8:	2201      	movs	r2, #1
 8001dca:	2102      	movs	r1, #2
 8001dcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dd0:	f001 f838 	bl	8002e44 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, CLK_Pin, GPIO_PIN_RESET);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2102      	movs	r1, #2
 8001dd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ddc:	f001 f832 	bl	8002e44 <HAL_GPIO_WritePin>
				hex_fil[tam_array] = fila;
 8001de0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	33c8      	adds	r3, #200	; 0xc8
 8001de8:	f107 0210 	add.w	r2, r7, #16
 8001dec:	4413      	add	r3, r2
 8001dee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001df2:	f843 2c7c 	str.w	r2, [r3, #-124]
				hex_col[tam_array] = columna;
 8001df6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	33c8      	adds	r3, #200	; 0xc8
 8001dfe:	f107 0210 	add.w	r2, r7, #16
 8001e02:	4413      	add	r3, r2
 8001e04:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001e08:	f843 2c9c 	str.w	r2, [r3, #-156]
				fila = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
				columna = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
				d--;
 8001e18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
				tam_array++;
 8001e22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e26:	3301      	adds	r3, #1
 8001e28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			HAL_Delay(500);
 8001e2c:	e643      	b.n	8001ab6 <main+0x176>
				break;
 8001e2e:	bf00      	nop
			}
		}

		if (hexnum <= INT_MAX) {
 8001e30:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	da68      	bge.n	8001f0a <main+0x5ca>
			hexnum_pequenyito = (unsigned int) hexnum;
 8001e38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			err = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			HAL_Delay(300);
 8001e46:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e4a:	f000 fd2f 	bl	80028ac <HAL_Delay>

			while (hexnum_pequenyito != 0) {
 8001e4e:	e019      	b.n	8001e84 <main+0x544>
				int digito = hexnum_pequenyito % 16; // Obtener el dígito hexadecimal menos significativo
 8001e50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e54:	f003 030f 	and.w	r3, r3, #15
 8001e58:	67fb      	str	r3, [r7, #124]	; 0x7c
				decnum += digito * multiplicador; // Agregar el dígito al resultado
 8001e5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e5c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001e60:	fb02 f303 	mul.w	r3, r2, r3
 8001e64:	461a      	mov	r2, r3
 8001e66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e6a:	4413      	add	r3, r2
 8001e6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
				multiplicador *= 16; // Actualizar el multiplicador para el siguiente dígito
 8001e70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e74:	011b      	lsls	r3, r3, #4
 8001e76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
				hexnum_pequenyito /= 16; // Ir al siguiente dígito hexadecimal
 8001e7a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e7e:	091b      	lsrs	r3, r3, #4
 8001e80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			while (hexnum_pequenyito != 0) {
 8001e84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1e1      	bne.n	8001e50 <main+0x510>
			}

			tam_dec_digits = count_digits(decnum);
 8001e8c:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001e90:	f7ff fd38 	bl	8001904 <count_digits>
 8001e94:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
			// Introduzco los dígitos en el arr;ay
		for (int i = 0; i <= tam_dec_digits; i++)
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001e9e:	e02d      	b.n	8001efc <main+0x5bc>
				dec_digits[i] = (int) ((decnum / (unsigned int)pow(10, i)) % 10);
 8001ea0:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001ea4:	f7fe fae2 	bl	800046c <__aeabi_i2d>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	ec43 2b11 	vmov	d1, r2, r3
 8001eb0:	ed9f 0bd7 	vldr	d0, [pc, #860]	; 8002210 <main+0x8d0>
 8001eb4:	f002 ffe6 	bl	8004e84 <pow>
 8001eb8:	ec53 2b10 	vmov	r2, r3, d0
 8001ebc:	4610      	mov	r0, r2
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	f7fe fdee 	bl	8000aa0 <__aeabi_d2uiz>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001eca:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ece:	4bd2      	ldr	r3, [pc, #840]	; (8002218 <main+0x8d8>)
 8001ed0:	fba3 2301 	umull	r2, r3, r3, r1
 8001ed4:	08da      	lsrs	r2, r3, #3
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	1aca      	subs	r2, r1, r3
 8001ee0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	33c8      	adds	r3, #200	; 0xc8
 8001ee8:	f107 0110 	add.w	r1, r7, #16
 8001eec:	440b      	add	r3, r1
 8001eee:	f843 2cc4 	str.w	r2, [r3, #-196]
		for (int i = 0; i <= tam_dec_digits; i++)
 8001ef2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001efc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001f00:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f04:	429a      	cmp	r2, r3
 8001f06:	ddcb      	ble.n	8001ea0 <main+0x560>
 8001f08:	e0e0      	b.n	80020cc <main+0x78c>

		} else { // Imprimir error
			err = 1;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			HAL_GPIO_WritePin(GPIOC, Display1_Pin, GPIO_PIN_SET);
 8001f10:	2201      	movs	r2, #1
 8001f12:	2101      	movs	r1, #1
 8001f14:	48c1      	ldr	r0, [pc, #772]	; (800221c <main+0x8dc>)
 8001f16:	f000 ff95 	bl	8002e44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, Display2_Pin, GPIO_PIN_SET);
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	2102      	movs	r1, #2
 8001f1e:	48bf      	ldr	r0, [pc, #764]	; (800221c <main+0x8dc>)
 8001f20:	f000 ff90 	bl	8002e44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Display3_Pin, GPIO_PIN_SET);
 8001f24:	2201      	movs	r2, #1
 8001f26:	2101      	movs	r1, #1
 8001f28:	48bd      	ldr	r0, [pc, #756]	; (8002220 <main+0x8e0>)
 8001f2a:	f000 ff8b 	bl	8002e44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, Display4_Pin, GPIO_PIN_RESET);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2110      	movs	r1, #16
 8001f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f36:	f000 ff85 	bl	8002e44 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOB, Seg0_Pin, GPIO_PIN_SET);
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	2120      	movs	r1, #32
 8001f3e:	48b8      	ldr	r0, [pc, #736]	; (8002220 <main+0x8e0>)
 8001f40:	f000 ff80 	bl	8002e44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Seg1_Pin, GPIO_PIN_RESET);
 8001f44:	2200      	movs	r2, #0
 8001f46:	2110      	movs	r1, #16
 8001f48:	48b5      	ldr	r0, [pc, #724]	; (8002220 <main+0x8e0>)
 8001f4a:	f000 ff7b 	bl	8002e44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Seg2_Pin, GPIO_PIN_RESET);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f54:	48b2      	ldr	r0, [pc, #712]	; (8002220 <main+0x8e0>)
 8001f56:	f000 ff75 	bl	8002e44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, Seg3_Pin, GPIO_PIN_SET);
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f64:	f000 ff6e 	bl	8002e44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Seg4_Pin, GPIO_PIN_SET);
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f6e:	48ac      	ldr	r0, [pc, #688]	; (8002220 <main+0x8e0>)
 8001f70:	f000 ff68 	bl	8002e44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Seg5_Pin, GPIO_PIN_SET);
 8001f74:	2201      	movs	r2, #1
 8001f76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f7a:	48a9      	ldr	r0, [pc, #676]	; (8002220 <main+0x8e0>)
 8001f7c:	f000 ff62 	bl	8002e44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Seg6_Pin, GPIO_PIN_SET);
 8001f80:	2201      	movs	r2, #1
 8001f82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f86:	48a6      	ldr	r0, [pc, #664]	; (8002220 <main+0x8e0>)
 8001f88:	f000 ff5c 	bl	8002e44 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOA, CLK_Pin, GPIO_PIN_SET);
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	2102      	movs	r1, #2
 8001f90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f94:	f000 ff56 	bl	8002e44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, CLK_Pin, GPIO_PIN_RESET);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	2102      	movs	r1, #2
 8001f9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fa0:	f000 ff50 	bl	8002e44 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, Display1_Pin, GPIO_PIN_SET);
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	489c      	ldr	r0, [pc, #624]	; (800221c <main+0x8dc>)
 8001faa:	f000 ff4b 	bl	8002e44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, Display2_Pin, GPIO_PIN_RESET);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2102      	movs	r1, #2
 8001fb2:	489a      	ldr	r0, [pc, #616]	; (800221c <main+0x8dc>)
 8001fb4:	f000 ff46 	bl	8002e44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Display3_Pin, GPIO_PIN_RESET);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2101      	movs	r1, #1
 8001fbc:	4898      	ldr	r0, [pc, #608]	; (8002220 <main+0x8e0>)
 8001fbe:	f000 ff41 	bl	8002e44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, Display4_Pin, GPIO_PIN_SET);
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	2110      	movs	r1, #16
 8001fc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fca:	f000 ff3b 	bl	8002e44 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOB, Seg0_Pin, GPIO_PIN_RESET);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2120      	movs	r1, #32
 8001fd2:	4893      	ldr	r0, [pc, #588]	; (8002220 <main+0x8e0>)
 8001fd4:	f000 ff36 	bl	8002e44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Seg1_Pin, GPIO_PIN_RESET);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2110      	movs	r1, #16
 8001fdc:	4890      	ldr	r0, [pc, #576]	; (8002220 <main+0x8e0>)
 8001fde:	f000 ff31 	bl	8002e44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Seg2_Pin, GPIO_PIN_RESET);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fe8:	488d      	ldr	r0, [pc, #564]	; (8002220 <main+0x8e0>)
 8001fea:	f000 ff2b 	bl	8002e44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, Seg3_Pin, GPIO_PIN_RESET);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ff4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff8:	f000 ff24 	bl	8002e44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Seg4_Pin, GPIO_PIN_SET);
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002002:	4887      	ldr	r0, [pc, #540]	; (8002220 <main+0x8e0>)
 8002004:	f000 ff1e 	bl	8002e44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Seg5_Pin, GPIO_PIN_RESET);
 8002008:	2200      	movs	r2, #0
 800200a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800200e:	4884      	ldr	r0, [pc, #528]	; (8002220 <main+0x8e0>)
 8002010:	f000 ff18 	bl	8002e44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Seg6_Pin, GPIO_PIN_SET);
 8002014:	2201      	movs	r2, #1
 8002016:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800201a:	4881      	ldr	r0, [pc, #516]	; (8002220 <main+0x8e0>)
 800201c:	f000 ff12 	bl	8002e44 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOA, CLK_Pin, GPIO_PIN_SET);
 8002020:	2201      	movs	r2, #1
 8002022:	2102      	movs	r1, #2
 8002024:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002028:	f000 ff0c 	bl	8002e44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, CLK_Pin, GPIO_PIN_RESET);
 800202c:	2200      	movs	r2, #0
 800202e:	2102      	movs	r1, #2
 8002030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002034:	f000 ff06 	bl	8002e44 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, Display1_Pin, GPIO_PIN_RESET);
 8002038:	2200      	movs	r2, #0
 800203a:	2101      	movs	r1, #1
 800203c:	4877      	ldr	r0, [pc, #476]	; (800221c <main+0x8dc>)
 800203e:	f000 ff01 	bl	8002e44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, Display2_Pin, GPIO_PIN_SET);
 8002042:	2201      	movs	r2, #1
 8002044:	2102      	movs	r1, #2
 8002046:	4875      	ldr	r0, [pc, #468]	; (800221c <main+0x8dc>)
 8002048:	f000 fefc 	bl	8002e44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Display3_Pin, GPIO_PIN_SET);
 800204c:	2201      	movs	r2, #1
 800204e:	2101      	movs	r1, #1
 8002050:	4873      	ldr	r0, [pc, #460]	; (8002220 <main+0x8e0>)
 8002052:	f000 fef7 	bl	8002e44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, Display4_Pin, GPIO_PIN_SET);
 8002056:	2201      	movs	r2, #1
 8002058:	2110      	movs	r1, #16
 800205a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800205e:	f000 fef1 	bl	8002e44 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOB, Seg0_Pin, GPIO_PIN_RESET);
 8002062:	2200      	movs	r2, #0
 8002064:	2120      	movs	r1, #32
 8002066:	486e      	ldr	r0, [pc, #440]	; (8002220 <main+0x8e0>)
 8002068:	f000 feec 	bl	8002e44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Seg1_Pin, GPIO_PIN_RESET);
 800206c:	2200      	movs	r2, #0
 800206e:	2110      	movs	r1, #16
 8002070:	486b      	ldr	r0, [pc, #428]	; (8002220 <main+0x8e0>)
 8002072:	f000 fee7 	bl	8002e44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Seg2_Pin, GPIO_PIN_RESET);
 8002076:	2200      	movs	r2, #0
 8002078:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800207c:	4868      	ldr	r0, [pc, #416]	; (8002220 <main+0x8e0>)
 800207e:	f000 fee1 	bl	8002e44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, Seg3_Pin, GPIO_PIN_RESET);
 8002082:	2200      	movs	r2, #0
 8002084:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002088:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800208c:	f000 feda 	bl	8002e44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Seg4_Pin, GPIO_PIN_RESET);
 8002090:	2200      	movs	r2, #0
 8002092:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002096:	4862      	ldr	r0, [pc, #392]	; (8002220 <main+0x8e0>)
 8002098:	f000 fed4 	bl	8002e44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Seg5_Pin, GPIO_PIN_RESET);
 800209c:	2200      	movs	r2, #0
 800209e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020a2:	485f      	ldr	r0, [pc, #380]	; (8002220 <main+0x8e0>)
 80020a4:	f000 fece 	bl	8002e44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Seg6_Pin, GPIO_PIN_RESET);
 80020a8:	2200      	movs	r2, #0
 80020aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020ae:	485c      	ldr	r0, [pc, #368]	; (8002220 <main+0x8e0>)
 80020b0:	f000 fec8 	bl	8002e44 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOA, CLK_Pin, GPIO_PIN_SET);
 80020b4:	2201      	movs	r2, #1
 80020b6:	2102      	movs	r1, #2
 80020b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020bc:	f000 fec2 	bl	8002e44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, CLK_Pin, GPIO_PIN_RESET);
 80020c0:	2200      	movs	r2, #0
 80020c2:	2102      	movs	r1, #2
 80020c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c8:	f000 febc 	bl	8002e44 <HAL_GPIO_WritePin>
		}

		leds = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		limit_right = 1;
 80020d2:	2301      	movs	r3, #1
 80020d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		limit_left = 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		point = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		index_digits = 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		while (!HAL_GPIO_ReadPin(GPIOA, Button1_Pin)) {
 80020ea:	e129      	b.n	8002340 <main+0xa00>
			if ((HAL_GPIO_ReadPin(GPIOC, Button3_Pin)) && !limit_left) //led izquierda
 80020ec:	2120      	movs	r1, #32
 80020ee:	484b      	ldr	r0, [pc, #300]	; (800221c <main+0x8dc>)
 80020f0:	f000 fe90 	bl	8002e14 <HAL_GPIO_ReadPin>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00f      	beq.n	800211a <main+0x7da>
 80020fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10b      	bne.n	800211a <main+0x7da>
			{
				HAL_Delay(300);
 8002102:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002106:	f000 fbd1 	bl	80028ac <HAL_Delay>
				leds = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
				index_digits++;
 8002110:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002114:	3301      	adds	r3, #1
 8002116:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			}
			if ((HAL_GPIO_ReadPin(GPIOC, Button4_Pin)) && !limit_right) //led derecha
 800211a:	2140      	movs	r1, #64	; 0x40
 800211c:	483f      	ldr	r0, [pc, #252]	; (800221c <main+0x8dc>)
 800211e:	f000 fe79 	bl	8002e14 <HAL_GPIO_ReadPin>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00f      	beq.n	8002148 <main+0x808>
 8002128:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10b      	bne.n	8002148 <main+0x808>
			{
				HAL_Delay(300);
 8002130:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002134:	f000 fbba 	bl	80028ac <HAL_Delay>
				leds = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
				index_digits--;
 800213e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002142:	3b01      	subs	r3, #1
 8002144:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			}
			if (!err && !leds) {
 8002148:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800214c:	2b00      	cmp	r3, #0
 800214e:	f040 80f7 	bne.w	8002340 <main+0xa00>
 8002152:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002156:	2b00      	cmp	r3, #0
 8002158:	f040 80f2 	bne.w	8002340 <main+0xa00>
				leds = 1;
 800215c:	2301      	movs	r3, #1
 800215e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
				// Imprimo dígitos
				for (int display = 1; display <= 4; ++display) {
 8002162:	2301      	movs	r3, #1
 8002164:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002168:	e0ac      	b.n	80022c4 <main+0x984>
					switch (display) {
 800216a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800216e:	3b01      	subs	r3, #1
 8002170:	2b03      	cmp	r3, #3
 8002172:	d86d      	bhi.n	8002250 <main+0x910>
 8002174:	a201      	add	r2, pc, #4	; (adr r2, 800217c <main+0x83c>)
 8002176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800217a:	bf00      	nop
 800217c:	0800218d 	.word	0x0800218d
 8002180:	080021b9 	.word	0x080021b9
 8002184:	080021e5 	.word	0x080021e5
 8002188:	08002225 	.word	0x08002225
					case (1):
						HAL_GPIO_WritePin(GPIOC, Display1_Pin, GPIO_PIN_RESET);
 800218c:	2200      	movs	r2, #0
 800218e:	2101      	movs	r1, #1
 8002190:	4822      	ldr	r0, [pc, #136]	; (800221c <main+0x8dc>)
 8002192:	f000 fe57 	bl	8002e44 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC, Display2_Pin, GPIO_PIN_SET);
 8002196:	2201      	movs	r2, #1
 8002198:	2102      	movs	r1, #2
 800219a:	4820      	ldr	r0, [pc, #128]	; (800221c <main+0x8dc>)
 800219c:	f000 fe52 	bl	8002e44 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, Display3_Pin, GPIO_PIN_SET);
 80021a0:	2201      	movs	r2, #1
 80021a2:	2101      	movs	r1, #1
 80021a4:	481e      	ldr	r0, [pc, #120]	; (8002220 <main+0x8e0>)
 80021a6:	f000 fe4d 	bl	8002e44 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, Display4_Pin, GPIO_PIN_SET);
 80021aa:	2201      	movs	r2, #1
 80021ac:	2110      	movs	r1, #16
 80021ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021b2:	f000 fe47 	bl	8002e44 <HAL_GPIO_WritePin>
						break;
 80021b6:	e04b      	b.n	8002250 <main+0x910>
					case (2):
						HAL_GPIO_WritePin(GPIOC, Display1_Pin, GPIO_PIN_SET);
 80021b8:	2201      	movs	r2, #1
 80021ba:	2101      	movs	r1, #1
 80021bc:	4817      	ldr	r0, [pc, #92]	; (800221c <main+0x8dc>)
 80021be:	f000 fe41 	bl	8002e44 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC, Display2_Pin, GPIO_PIN_RESET);
 80021c2:	2200      	movs	r2, #0
 80021c4:	2102      	movs	r1, #2
 80021c6:	4815      	ldr	r0, [pc, #84]	; (800221c <main+0x8dc>)
 80021c8:	f000 fe3c 	bl	8002e44 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, Display3_Pin, GPIO_PIN_SET);
 80021cc:	2201      	movs	r2, #1
 80021ce:	2101      	movs	r1, #1
 80021d0:	4813      	ldr	r0, [pc, #76]	; (8002220 <main+0x8e0>)
 80021d2:	f000 fe37 	bl	8002e44 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, Display4_Pin, GPIO_PIN_SET);
 80021d6:	2201      	movs	r2, #1
 80021d8:	2110      	movs	r1, #16
 80021da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021de:	f000 fe31 	bl	8002e44 <HAL_GPIO_WritePin>
						break;
 80021e2:	e035      	b.n	8002250 <main+0x910>
					case (3):
						HAL_GPIO_WritePin(GPIOC, Display1_Pin, GPIO_PIN_SET);
 80021e4:	2201      	movs	r2, #1
 80021e6:	2101      	movs	r1, #1
 80021e8:	480c      	ldr	r0, [pc, #48]	; (800221c <main+0x8dc>)
 80021ea:	f000 fe2b 	bl	8002e44 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC, Display2_Pin, GPIO_PIN_SET);
 80021ee:	2201      	movs	r2, #1
 80021f0:	2102      	movs	r1, #2
 80021f2:	480a      	ldr	r0, [pc, #40]	; (800221c <main+0x8dc>)
 80021f4:	f000 fe26 	bl	8002e44 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, Display3_Pin, GPIO_PIN_RESET);
 80021f8:	2200      	movs	r2, #0
 80021fa:	2101      	movs	r1, #1
 80021fc:	4808      	ldr	r0, [pc, #32]	; (8002220 <main+0x8e0>)
 80021fe:	f000 fe21 	bl	8002e44 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, Display4_Pin, GPIO_PIN_SET);
 8002202:	2201      	movs	r2, #1
 8002204:	2110      	movs	r1, #16
 8002206:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800220a:	f000 fe1b 	bl	8002e44 <HAL_GPIO_WritePin>
						break;
 800220e:	e01f      	b.n	8002250 <main+0x910>
 8002210:	00000000 	.word	0x00000000
 8002214:	40240000 	.word	0x40240000
 8002218:	cccccccd 	.word	0xcccccccd
 800221c:	48000800 	.word	0x48000800
 8002220:	48000400 	.word	0x48000400
					case (4):
						HAL_GPIO_WritePin(GPIOC, Display1_Pin, GPIO_PIN_SET);
 8002224:	2201      	movs	r2, #1
 8002226:	2101      	movs	r1, #1
 8002228:	484b      	ldr	r0, [pc, #300]	; (8002358 <main+0xa18>)
 800222a:	f000 fe0b 	bl	8002e44 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC, Display2_Pin, GPIO_PIN_SET);
 800222e:	2201      	movs	r2, #1
 8002230:	2102      	movs	r1, #2
 8002232:	4849      	ldr	r0, [pc, #292]	; (8002358 <main+0xa18>)
 8002234:	f000 fe06 	bl	8002e44 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, Display3_Pin, GPIO_PIN_SET);
 8002238:	2201      	movs	r2, #1
 800223a:	2101      	movs	r1, #1
 800223c:	4847      	ldr	r0, [pc, #284]	; (800235c <main+0xa1c>)
 800223e:	f000 fe01 	bl	8002e44 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, Display4_Pin, GPIO_PIN_RESET);
 8002242:	2200      	movs	r2, #0
 8002244:	2110      	movs	r1, #16
 8002246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800224a:	f000 fdfb 	bl	8002e44 <HAL_GPIO_WritePin>
						break;
 800224e:	bf00      	nop
					}
					if (index_digits % 3 == 0 && index_digits != 0 )
 8002250:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8002254:	4b42      	ldr	r3, [pc, #264]	; (8002360 <main+0xa20>)
 8002256:	fb83 3201 	smull	r3, r2, r3, r1
 800225a:	17cb      	asrs	r3, r1, #31
 800225c:	1ad2      	subs	r2, r2, r3
 800225e:	4613      	mov	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4413      	add	r3, r2
 8002264:	1aca      	subs	r2, r1, r3
 8002266:	2a00      	cmp	r2, #0
 8002268:	d107      	bne.n	800227a <main+0x93a>
 800226a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <main+0x93a>
						point = 1;
 8002272:	2301      	movs	r3, #1
 8002274:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002278:	e002      	b.n	8002280 <main+0x940>
					else
						point = 0;
 800227a:	2300      	movs	r3, #0
 800227c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					write_num_display_dec(dec_digits[index_digits++], point);
 8002280:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002284:	1c5a      	adds	r2, r3, #1
 8002286:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	33c8      	adds	r3, #200	; 0xc8
 800228e:	f107 0210 	add.w	r2, r7, #16
 8002292:	4413      	add	r3, r2
 8002294:	f853 3cc4 	ldr.w	r3, [r3, #-196]
 8002298:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800229c:	4618      	mov	r0, r3
 800229e:	f7fe fde5 	bl	8000e6c <write_num_display_dec>
					HAL_GPIO_WritePin(GPIOA, CLK_Pin, GPIO_PIN_SET);
 80022a2:	2201      	movs	r2, #1
 80022a4:	2102      	movs	r1, #2
 80022a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022aa:	f000 fdcb 	bl	8002e44 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, CLK_Pin, GPIO_PIN_RESET);
 80022ae:	2200      	movs	r2, #0
 80022b0:	2102      	movs	r1, #2
 80022b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022b6:	f000 fdc5 	bl	8002e44 <HAL_GPIO_WritePin>
				for (int display = 1; display <= 4; ++display) {
 80022ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022be:	3301      	adds	r3, #1
 80022c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80022c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	f77f af4e 	ble.w	800216a <main+0x82a>

				}
				if (index_digits == 4) { // Limite derecha
 80022ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d109      	bne.n	80022ea <main+0x9aa>
					HAL_GPIO_WritePin(GPIOC, Led4_Pin, GPIO_PIN_SET);
 80022d6:	2201      	movs	r2, #1
 80022d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022dc:	481e      	ldr	r0, [pc, #120]	; (8002358 <main+0xa18>)
 80022de:	f000 fdb1 	bl	8002e44 <HAL_GPIO_WritePin>
					limit_right = 1;
 80022e2:	2301      	movs	r3, #1
 80022e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80022e8:	e008      	b.n	80022fc <main+0x9bc>
				} else
				{
					limit_right = 0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
					HAL_GPIO_WritePin(GPIOC, Led4_Pin, GPIO_PIN_RESET);
 80022f0:	2200      	movs	r2, #0
 80022f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022f6:	4818      	ldr	r0, [pc, #96]	; (8002358 <main+0xa18>)
 80022f8:	f000 fda4 	bl	8002e44 <HAL_GPIO_WritePin>
				}
				if (index_digits == tam_dec_digits || tam_dec_digits <= 4) { // Limite izquierda
 80022fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002300:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002304:	429a      	cmp	r2, r3
 8002306:	d003      	beq.n	8002310 <main+0x9d0>
 8002308:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800230c:	2b04      	cmp	r3, #4
 800230e:	dc09      	bgt.n	8002324 <main+0x9e4>
					HAL_GPIO_WritePin(GPIOB, Led3_Pin, GPIO_PIN_SET);
 8002310:	2201      	movs	r2, #1
 8002312:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002316:	4811      	ldr	r0, [pc, #68]	; (800235c <main+0xa1c>)
 8002318:	f000 fd94 	bl	8002e44 <HAL_GPIO_WritePin>
					limit_left = 1;
 800231c:	2301      	movs	r3, #1
 800231e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002322:	e008      	b.n	8002336 <main+0x9f6>
				} else
				{
					limit_left = 0;
 8002324:	2300      	movs	r3, #0
 8002326:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
					HAL_GPIO_WritePin(GPIOB, Led3_Pin, GPIO_PIN_RESET);
 800232a:	2200      	movs	r2, #0
 800232c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002330:	480a      	ldr	r0, [pc, #40]	; (800235c <main+0xa1c>)
 8002332:	f000 fd87 	bl	8002e44 <HAL_GPIO_WritePin>
				}
				index_digits -= 4;
 8002336:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800233a:	3b04      	subs	r3, #4
 800233c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		while (!HAL_GPIO_ReadPin(GPIOA, Button1_Pin)) {
 8002340:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002344:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002348:	f000 fd64 	bl	8002e14 <HAL_GPIO_ReadPin>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	f43f aecc 	beq.w	80020ec <main+0x7ac>
		d = 4;
 8002354:	f7ff bb1e 	b.w	8001994 <main+0x54>
 8002358:	48000800 	.word	0x48000800
 800235c:	48000400 	.word	0x48000400
 8002360:	55555556 	.word	0x55555556

08002364 <SystemClock_Config>:

	/**
	 * @brief System Clock Configuration
	 * @retval None
	 */
	void SystemClock_Config(void) {
 8002364:	b580      	push	{r7, lr}
 8002366:	b096      	sub	sp, #88	; 0x58
 8002368:	af00      	add	r7, sp, #0
		RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800236a:	f107 0314 	add.w	r3, r7, #20
 800236e:	2244      	movs	r2, #68	; 0x44
 8002370:	2100      	movs	r1, #0
 8002372:	4618      	mov	r0, r3
 8002374:	f002 fd7e 	bl	8004e74 <memset>
		RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002378:	463b      	mov	r3, r7
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	605a      	str	r2, [r3, #4]
 8002380:	609a      	str	r2, [r3, #8]
 8002382:	60da      	str	r2, [r3, #12]
 8002384:	611a      	str	r2, [r3, #16]

		/** Configure the main internal regulator output voltage
		 */
		if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8002386:	f44f 7000 	mov.w	r0, #512	; 0x200
 800238a:	f000 fd81 	bl	8002e90 <HAL_PWREx_ControlVoltageScaling>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <SystemClock_Config+0x34>
				!= HAL_OK) {
			Error_Handler();
 8002394:	f000 f922 	bl	80025dc <Error_Handler>
		}

		/** Initializes the RCC Oscillators according to the specified parameters
		 * in the RCC_OscInitTypeDef structure.
		 */
		RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002398:	2302      	movs	r3, #2
 800239a:	617b      	str	r3, [r7, #20]
		RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800239c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023a0:	623b      	str	r3, [r7, #32]
		RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023a2:	2310      	movs	r3, #16
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
		RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023a6:	2302      	movs	r3, #2
 80023a8:	63fb      	str	r3, [r7, #60]	; 0x3c
		RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023aa:	2302      	movs	r3, #2
 80023ac:	643b      	str	r3, [r7, #64]	; 0x40
		RCC_OscInitStruct.PLL.PLLM = 1;
 80023ae:	2301      	movs	r3, #1
 80023b0:	647b      	str	r3, [r7, #68]	; 0x44
		RCC_OscInitStruct.PLL.PLLN = 10;
 80023b2:	230a      	movs	r3, #10
 80023b4:	64bb      	str	r3, [r7, #72]	; 0x48
		RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80023b6:	2307      	movs	r3, #7
 80023b8:	64fb      	str	r3, [r7, #76]	; 0x4c
		RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80023ba:	2302      	movs	r3, #2
 80023bc:	653b      	str	r3, [r7, #80]	; 0x50
		RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80023be:	2302      	movs	r3, #2
 80023c0:	657b      	str	r3, [r7, #84]	; 0x54
		if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80023c2:	f107 0314 	add.w	r3, r7, #20
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 fdb8 	bl	8002f3c <HAL_RCC_OscConfig>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <SystemClock_Config+0x72>
			Error_Handler();
 80023d2:	f000 f903 	bl	80025dc <Error_Handler>
		}

		/** Initializes the CPU, AHB and APB buses clocks
		 */
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80023d6:	230f      	movs	r3, #15
 80023d8:	603b      	str	r3, [r7, #0]
				| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
		RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023da:	2303      	movs	r3, #3
 80023dc:	607b      	str	r3, [r7, #4]
		RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023de:	2300      	movs	r3, #0
 80023e0:	60bb      	str	r3, [r7, #8]
		RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
		RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]

		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4)
 80023ea:	463b      	mov	r3, r7
 80023ec:	2104      	movs	r1, #4
 80023ee:	4618      	mov	r0, r3
 80023f0:	f001 f980 	bl	80036f4 <HAL_RCC_ClockConfig>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <SystemClock_Config+0x9a>
				!= HAL_OK) {
			Error_Handler();
 80023fa:	f000 f8ef 	bl	80025dc <Error_Handler>
		}
	}
 80023fe:	bf00      	nop
 8002400:	3758      	adds	r7, #88	; 0x58
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <MX_USART2_UART_Init>:
	/**
	 * @brief USART2 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_USART2_UART_Init(void) {
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
		/* USER CODE END USART2_Init 0 */

		/* USER CODE BEGIN USART2_Init 1 */

		/* USER CODE END USART2_Init 1 */
		huart2.Instance = USART2;
 800240c:	4b14      	ldr	r3, [pc, #80]	; (8002460 <MX_USART2_UART_Init+0x58>)
 800240e:	4a15      	ldr	r2, [pc, #84]	; (8002464 <MX_USART2_UART_Init+0x5c>)
 8002410:	601a      	str	r2, [r3, #0]
		huart2.Init.BaudRate = 115200;
 8002412:	4b13      	ldr	r3, [pc, #76]	; (8002460 <MX_USART2_UART_Init+0x58>)
 8002414:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002418:	605a      	str	r2, [r3, #4]
		huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800241a:	4b11      	ldr	r3, [pc, #68]	; (8002460 <MX_USART2_UART_Init+0x58>)
 800241c:	2200      	movs	r2, #0
 800241e:	609a      	str	r2, [r3, #8]
		huart2.Init.StopBits = UART_STOPBITS_1;
 8002420:	4b0f      	ldr	r3, [pc, #60]	; (8002460 <MX_USART2_UART_Init+0x58>)
 8002422:	2200      	movs	r2, #0
 8002424:	60da      	str	r2, [r3, #12]
		huart2.Init.Parity = UART_PARITY_NONE;
 8002426:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <MX_USART2_UART_Init+0x58>)
 8002428:	2200      	movs	r2, #0
 800242a:	611a      	str	r2, [r3, #16]
		huart2.Init.Mode = UART_MODE_TX_RX;
 800242c:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <MX_USART2_UART_Init+0x58>)
 800242e:	220c      	movs	r2, #12
 8002430:	615a      	str	r2, [r3, #20]
		huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002432:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <MX_USART2_UART_Init+0x58>)
 8002434:	2200      	movs	r2, #0
 8002436:	619a      	str	r2, [r3, #24]
		huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002438:	4b09      	ldr	r3, [pc, #36]	; (8002460 <MX_USART2_UART_Init+0x58>)
 800243a:	2200      	movs	r2, #0
 800243c:	61da      	str	r2, [r3, #28]
		huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800243e:	4b08      	ldr	r3, [pc, #32]	; (8002460 <MX_USART2_UART_Init+0x58>)
 8002440:	2200      	movs	r2, #0
 8002442:	621a      	str	r2, [r3, #32]
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002444:	4b06      	ldr	r3, [pc, #24]	; (8002460 <MX_USART2_UART_Init+0x58>)
 8002446:	2200      	movs	r2, #0
 8002448:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_UART_Init(&huart2) != HAL_OK) {
 800244a:	4805      	ldr	r0, [pc, #20]	; (8002460 <MX_USART2_UART_Init+0x58>)
 800244c:	f002 f832 	bl	80044b4 <HAL_UART_Init>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_USART2_UART_Init+0x52>
			Error_Handler();
 8002456:	f000 f8c1 	bl	80025dc <Error_Handler>
		}
		/* USER CODE BEGIN USART2_Init 2 */

		/* USER CODE END USART2_Init 2 */

	}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	2000008c 	.word	0x2000008c
 8002464:	40004400 	.word	0x40004400

08002468 <MX_GPIO_Init>:
	/**
	 * @brief GPIO Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_GPIO_Init(void) {
 8002468:	b580      	push	{r7, lr}
 800246a:	b08a      	sub	sp, #40	; 0x28
 800246c:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800246e:	f107 0314 	add.w	r3, r7, #20
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	605a      	str	r2, [r3, #4]
 8002478:	609a      	str	r2, [r3, #8]
 800247a:	60da      	str	r2, [r3, #12]
 800247c:	611a      	str	r2, [r3, #16]

		/* GPIO Ports Clock Enable */
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800247e:	4b54      	ldr	r3, [pc, #336]	; (80025d0 <MX_GPIO_Init+0x168>)
 8002480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002482:	4a53      	ldr	r2, [pc, #332]	; (80025d0 <MX_GPIO_Init+0x168>)
 8002484:	f043 0304 	orr.w	r3, r3, #4
 8002488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800248a:	4b51      	ldr	r3, [pc, #324]	; (80025d0 <MX_GPIO_Init+0x168>)
 800248c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248e:	f003 0304 	and.w	r3, r3, #4
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOH_CLK_ENABLE();
 8002496:	4b4e      	ldr	r3, [pc, #312]	; (80025d0 <MX_GPIO_Init+0x168>)
 8002498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249a:	4a4d      	ldr	r2, [pc, #308]	; (80025d0 <MX_GPIO_Init+0x168>)
 800249c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024a2:	4b4b      	ldr	r3, [pc, #300]	; (80025d0 <MX_GPIO_Init+0x168>)
 80024a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80024ae:	4b48      	ldr	r3, [pc, #288]	; (80025d0 <MX_GPIO_Init+0x168>)
 80024b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b2:	4a47      	ldr	r2, [pc, #284]	; (80025d0 <MX_GPIO_Init+0x168>)
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ba:	4b45      	ldr	r3, [pc, #276]	; (80025d0 <MX_GPIO_Init+0x168>)
 80024bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	60bb      	str	r3, [r7, #8]
 80024c4:	68bb      	ldr	r3, [r7, #8]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80024c6:	4b42      	ldr	r3, [pc, #264]	; (80025d0 <MX_GPIO_Init+0x168>)
 80024c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ca:	4a41      	ldr	r2, [pc, #260]	; (80025d0 <MX_GPIO_Init+0x168>)
 80024cc:	f043 0302 	orr.w	r3, r3, #2
 80024d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024d2:	4b3f      	ldr	r3, [pc, #252]	; (80025d0 <MX_GPIO_Init+0x168>)
 80024d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	607b      	str	r3, [r7, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(GPIOC,
 80024de:	2200      	movs	r2, #0
 80024e0:	f241 610f 	movw	r1, #5647	; 0x160f
 80024e4:	483b      	ldr	r0, [pc, #236]	; (80025d4 <MX_GPIO_Init+0x16c>)
 80024e6:	f000 fcad 	bl	8002e44 <HAL_GPIO_WritePin>
				Display1_Pin | Display2_Pin | Fil2_Pin | Fil1_Pin | Led4_Pin
						| Fil4_Pin | Fil3_Pin, GPIO_PIN_RESET);

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(GPIOA, CLK_Pin | Display4_Pin | Seg3_Pin,
 80024ea:	2200      	movs	r2, #0
 80024ec:	f44f 7189 	mov.w	r1, #274	; 0x112
 80024f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024f4:	f000 fca6 	bl	8002e44 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(GPIOB,
 80024f8:	2200      	movs	r2, #0
 80024fa:	f24e 5133 	movw	r1, #58675	; 0xe533
 80024fe:	4836      	ldr	r0, [pc, #216]	; (80025d8 <MX_GPIO_Init+0x170>)
 8002500:	f000 fca0 	bl	8002e44 <HAL_GPIO_WritePin>
				Display3_Pin | Point_Pin | Seg2_Pin | Seg4_Pin | Seg5_Pin
						| Seg6_Pin | Seg1_Pin | Seg0_Pin | Led3_Pin,
				GPIO_PIN_RESET);

		/*Configure GPIO pin : B1_Pin */
		GPIO_InitStruct.Pin = B1_Pin;
 8002504:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002508:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800250a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800250e:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002514:	f107 0314 	add.w	r3, r7, #20
 8002518:	4619      	mov	r1, r3
 800251a:	482e      	ldr	r0, [pc, #184]	; (80025d4 <MX_GPIO_Init+0x16c>)
 800251c:	f000 fad0 	bl	8002ac0 <HAL_GPIO_Init>

		/*Configure GPIO pins : Display1_Pin Display2_Pin Fil2_Pin Fil1_Pin
		 Led4_Pin Fil4_Pin Fil3_Pin */
		GPIO_InitStruct.Pin = Display1_Pin | Display2_Pin | Fil2_Pin | Fil1_Pin
 8002520:	f241 630f 	movw	r3, #5647	; 0x160f
 8002524:	617b      	str	r3, [r7, #20]
				| Led4_Pin | Fil4_Pin | Fil3_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002526:	2301      	movs	r3, #1
 8002528:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252e:	2300      	movs	r3, #0
 8002530:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002532:	f107 0314 	add.w	r3, r7, #20
 8002536:	4619      	mov	r1, r3
 8002538:	4826      	ldr	r0, [pc, #152]	; (80025d4 <MX_GPIO_Init+0x16c>)
 800253a:	f000 fac1 	bl	8002ac0 <HAL_GPIO_Init>

		/*Configure GPIO pins : CLK_Pin Display4_Pin Seg3_Pin */
		GPIO_InitStruct.Pin = CLK_Pin | Display4_Pin | Seg3_Pin;
 800253e:	f44f 7389 	mov.w	r3, #274	; 0x112
 8002542:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002544:	2301      	movs	r3, #1
 8002546:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254c:	2300      	movs	r3, #0
 800254e:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002550:	f107 0314 	add.w	r3, r7, #20
 8002554:	4619      	mov	r1, r3
 8002556:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800255a:	f000 fab1 	bl	8002ac0 <HAL_GPIO_Init>

		/*Configure GPIO pins : Col4_Pin Col3_Pin Col2_Pin Button1_Pin
		 Button2_Pin */
		GPIO_InitStruct.Pin = Col4_Pin | Col3_Pin | Col2_Pin | Button1_Pin
 800255e:	f44f 53c7 	mov.w	r3, #6368	; 0x18e0
 8002562:	617b      	str	r3, [r7, #20]
				| Button2_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002564:	2300      	movs	r3, #0
 8002566:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002568:	2300      	movs	r3, #0
 800256a:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256c:	f107 0314 	add.w	r3, r7, #20
 8002570:	4619      	mov	r1, r3
 8002572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002576:	f000 faa3 	bl	8002ac0 <HAL_GPIO_Init>

		/*Configure GPIO pins : Button3_Pin Button4_Pin */
		GPIO_InitStruct.Pin = Button3_Pin | Button4_Pin;
 800257a:	2360      	movs	r3, #96	; 0x60
 800257c:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800257e:	2300      	movs	r3, #0
 8002580:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002586:	f107 0314 	add.w	r3, r7, #20
 800258a:	4619      	mov	r1, r3
 800258c:	4811      	ldr	r0, [pc, #68]	; (80025d4 <MX_GPIO_Init+0x16c>)
 800258e:	f000 fa97 	bl	8002ac0 <HAL_GPIO_Init>

		/*Configure GPIO pins : Display3_Pin Point_Pin Seg2_Pin Seg4_Pin
		 Seg5_Pin Seg6_Pin Seg1_Pin Seg0_Pin
		 Led3_Pin */
		GPIO_InitStruct.Pin = Display3_Pin | Point_Pin | Seg2_Pin | Seg4_Pin
 8002592:	f24e 5333 	movw	r3, #58675	; 0xe533
 8002596:	617b      	str	r3, [r7, #20]
				| Seg5_Pin | Seg6_Pin | Seg1_Pin | Seg0_Pin | Led3_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002598:	2301      	movs	r3, #1
 800259a:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	2300      	movs	r3, #0
 800259e:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a0:	2300      	movs	r3, #0
 80025a2:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a4:	f107 0314 	add.w	r3, r7, #20
 80025a8:	4619      	mov	r1, r3
 80025aa:	480b      	ldr	r0, [pc, #44]	; (80025d8 <MX_GPIO_Init+0x170>)
 80025ac:	f000 fa88 	bl	8002ac0 <HAL_GPIO_Init>

		/*Configure GPIO pin : Col1_Pin */
		GPIO_InitStruct.Pin = Col1_Pin;
 80025b0:	2340      	movs	r3, #64	; 0x40
 80025b2:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025b4:	2300      	movs	r3, #0
 80025b6:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(Col1_GPIO_Port, &GPIO_InitStruct);
 80025bc:	f107 0314 	add.w	r3, r7, #20
 80025c0:	4619      	mov	r1, r3
 80025c2:	4805      	ldr	r0, [pc, #20]	; (80025d8 <MX_GPIO_Init+0x170>)
 80025c4:	f000 fa7c 	bl	8002ac0 <HAL_GPIO_Init>

	}
 80025c8:	bf00      	nop
 80025ca:	3728      	adds	r7, #40	; 0x28
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40021000 	.word	0x40021000
 80025d4:	48000800 	.word	0x48000800
 80025d8:	48000400 	.word	0x48000400

080025dc <Error_Handler>:

	/**
	 * @brief  This function is executed in case of error occurrence.
	 * @retval None
	 */
	void Error_Handler(void) {
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80025e0:	b672      	cpsid	i
}
 80025e2:	bf00      	nop
		/* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1) {
 80025e4:	e7fe      	b.n	80025e4 <Error_Handler+0x8>
	...

080025e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ee:	4b0f      	ldr	r3, [pc, #60]	; (800262c <HAL_MspInit+0x44>)
 80025f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f2:	4a0e      	ldr	r2, [pc, #56]	; (800262c <HAL_MspInit+0x44>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6613      	str	r3, [r2, #96]	; 0x60
 80025fa:	4b0c      	ldr	r3, [pc, #48]	; (800262c <HAL_MspInit+0x44>)
 80025fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	607b      	str	r3, [r7, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002606:	4b09      	ldr	r3, [pc, #36]	; (800262c <HAL_MspInit+0x44>)
 8002608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260a:	4a08      	ldr	r2, [pc, #32]	; (800262c <HAL_MspInit+0x44>)
 800260c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002610:	6593      	str	r3, [r2, #88]	; 0x58
 8002612:	4b06      	ldr	r3, [pc, #24]	; (800262c <HAL_MspInit+0x44>)
 8002614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	40021000 	.word	0x40021000

08002630 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b0ac      	sub	sp, #176	; 0xb0
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002638:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002648:	f107 0314 	add.w	r3, r7, #20
 800264c:	2288      	movs	r2, #136	; 0x88
 800264e:	2100      	movs	r1, #0
 8002650:	4618      	mov	r0, r3
 8002652:	f002 fc0f 	bl	8004e74 <memset>
  if(huart->Instance==USART2)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a21      	ldr	r2, [pc, #132]	; (80026e0 <HAL_UART_MspInit+0xb0>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d13b      	bne.n	80026d8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002660:	2302      	movs	r3, #2
 8002662:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002664:	2300      	movs	r3, #0
 8002666:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002668:	f107 0314 	add.w	r3, r7, #20
 800266c:	4618      	mov	r0, r3
 800266e:	f001 fa65 	bl	8003b3c <HAL_RCCEx_PeriphCLKConfig>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002678:	f7ff ffb0 	bl	80025dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800267c:	4b19      	ldr	r3, [pc, #100]	; (80026e4 <HAL_UART_MspInit+0xb4>)
 800267e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002680:	4a18      	ldr	r2, [pc, #96]	; (80026e4 <HAL_UART_MspInit+0xb4>)
 8002682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002686:	6593      	str	r3, [r2, #88]	; 0x58
 8002688:	4b16      	ldr	r3, [pc, #88]	; (80026e4 <HAL_UART_MspInit+0xb4>)
 800268a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002694:	4b13      	ldr	r3, [pc, #76]	; (80026e4 <HAL_UART_MspInit+0xb4>)
 8002696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002698:	4a12      	ldr	r2, [pc, #72]	; (80026e4 <HAL_UART_MspInit+0xb4>)
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026a0:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <HAL_UART_MspInit+0xb4>)
 80026a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80026ac:	230c      	movs	r3, #12
 80026ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b2:	2302      	movs	r3, #2
 80026b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b8:	2300      	movs	r3, #0
 80026ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026be:	2303      	movs	r3, #3
 80026c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026c4:	2307      	movs	r3, #7
 80026c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026ce:	4619      	mov	r1, r3
 80026d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026d4:	f000 f9f4 	bl	8002ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026d8:	bf00      	nop
 80026da:	37b0      	adds	r7, #176	; 0xb0
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40004400 	.word	0x40004400
 80026e4:	40021000 	.word	0x40021000

080026e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026ec:	e7fe      	b.n	80026ec <NMI_Handler+0x4>

080026ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ee:	b480      	push	{r7}
 80026f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026f2:	e7fe      	b.n	80026f2 <HardFault_Handler+0x4>

080026f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026f8:	e7fe      	b.n	80026f8 <MemManage_Handler+0x4>

080026fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026fa:	b480      	push	{r7}
 80026fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026fe:	e7fe      	b.n	80026fe <BusFault_Handler+0x4>

08002700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002704:	e7fe      	b.n	8002704 <UsageFault_Handler+0x4>

08002706 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002706:	b480      	push	{r7}
 8002708:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800270a:	bf00      	nop
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002718:	bf00      	nop
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002722:	b480      	push	{r7}
 8002724:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002734:	f000 f89a 	bl	800286c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002738:	bf00      	nop
 800273a:	bd80      	pop	{r7, pc}

0800273c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <SystemInit+0x20>)
 8002742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002746:	4a05      	ldr	r2, [pc, #20]	; (800275c <SystemInit+0x20>)
 8002748:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800274c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002750:	bf00      	nop
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002760:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002798 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002764:	f7ff ffea 	bl	800273c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002768:	480c      	ldr	r0, [pc, #48]	; (800279c <LoopForever+0x6>)
  ldr r1, =_edata
 800276a:	490d      	ldr	r1, [pc, #52]	; (80027a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800276c:	4a0d      	ldr	r2, [pc, #52]	; (80027a4 <LoopForever+0xe>)
  movs r3, #0
 800276e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002770:	e002      	b.n	8002778 <LoopCopyDataInit>

08002772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002776:	3304      	adds	r3, #4

08002778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800277a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800277c:	d3f9      	bcc.n	8002772 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800277e:	4a0a      	ldr	r2, [pc, #40]	; (80027a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002780:	4c0a      	ldr	r4, [pc, #40]	; (80027ac <LoopForever+0x16>)
  movs r3, #0
 8002782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002784:	e001      	b.n	800278a <LoopFillZerobss>

08002786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002788:	3204      	adds	r2, #4

0800278a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800278a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800278c:	d3fb      	bcc.n	8002786 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800278e:	f002 fb4d 	bl	8004e2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002792:	f7ff f8d5 	bl	8001940 <main>

08002796 <LoopForever>:

LoopForever:
    b LoopForever
 8002796:	e7fe      	b.n	8002796 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002798:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800279c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027a0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80027a4:	08005da0 	.word	0x08005da0
  ldr r2, =_sbss
 80027a8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80027ac:	20000114 	.word	0x20000114

080027b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027b0:	e7fe      	b.n	80027b0 <ADC1_2_IRQHandler>
	...

080027b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027be:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <HAL_Init+0x3c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a0b      	ldr	r2, [pc, #44]	; (80027f0 <HAL_Init+0x3c>)
 80027c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027ca:	2003      	movs	r0, #3
 80027cc:	f000 f944 	bl	8002a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027d0:	2000      	movs	r0, #0
 80027d2:	f000 f80f 	bl	80027f4 <HAL_InitTick>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d002      	beq.n	80027e2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	71fb      	strb	r3, [r7, #7]
 80027e0:	e001      	b.n	80027e6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027e2:	f7ff ff01 	bl	80025e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027e6:	79fb      	ldrb	r3, [r7, #7]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40022000 	.word	0x40022000

080027f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027fc:	2300      	movs	r3, #0
 80027fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002800:	4b17      	ldr	r3, [pc, #92]	; (8002860 <HAL_InitTick+0x6c>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d023      	beq.n	8002850 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002808:	4b16      	ldr	r3, [pc, #88]	; (8002864 <HAL_InitTick+0x70>)
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	4b14      	ldr	r3, [pc, #80]	; (8002860 <HAL_InitTick+0x6c>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	4619      	mov	r1, r3
 8002812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002816:	fbb3 f3f1 	udiv	r3, r3, r1
 800281a:	fbb2 f3f3 	udiv	r3, r2, r3
 800281e:	4618      	mov	r0, r3
 8002820:	f000 f941 	bl	8002aa6 <HAL_SYSTICK_Config>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10f      	bne.n	800284a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b0f      	cmp	r3, #15
 800282e:	d809      	bhi.n	8002844 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002830:	2200      	movs	r2, #0
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	f04f 30ff 	mov.w	r0, #4294967295
 8002838:	f000 f919 	bl	8002a6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800283c:	4a0a      	ldr	r2, [pc, #40]	; (8002868 <HAL_InitTick+0x74>)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	e007      	b.n	8002854 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	73fb      	strb	r3, [r7, #15]
 8002848:	e004      	b.n	8002854 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	73fb      	strb	r3, [r7, #15]
 800284e:	e001      	b.n	8002854 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002854:	7bfb      	ldrb	r3, [r7, #15]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	20000008 	.word	0x20000008
 8002864:	20000000 	.word	0x20000000
 8002868:	20000004 	.word	0x20000004

0800286c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002870:	4b06      	ldr	r3, [pc, #24]	; (800288c <HAL_IncTick+0x20>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	461a      	mov	r2, r3
 8002876:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_IncTick+0x24>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4413      	add	r3, r2
 800287c:	4a04      	ldr	r2, [pc, #16]	; (8002890 <HAL_IncTick+0x24>)
 800287e:	6013      	str	r3, [r2, #0]
}
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	20000008 	.word	0x20000008
 8002890:	20000110 	.word	0x20000110

08002894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return uwTick;
 8002898:	4b03      	ldr	r3, [pc, #12]	; (80028a8 <HAL_GetTick+0x14>)
 800289a:	681b      	ldr	r3, [r3, #0]
}
 800289c:	4618      	mov	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	20000110 	.word	0x20000110

080028ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028b4:	f7ff ffee 	bl	8002894 <HAL_GetTick>
 80028b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c4:	d005      	beq.n	80028d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80028c6:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <HAL_Delay+0x44>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	461a      	mov	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4413      	add	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028d2:	bf00      	nop
 80028d4:	f7ff ffde 	bl	8002894 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d8f7      	bhi.n	80028d4 <HAL_Delay+0x28>
  {
  }
}
 80028e4:	bf00      	nop
 80028e6:	bf00      	nop
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000008 	.word	0x20000008

080028f4 <__NVIC_SetPriorityGrouping>:
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002904:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <__NVIC_SetPriorityGrouping+0x44>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002910:	4013      	ands	r3, r2
 8002912:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800291c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002926:	4a04      	ldr	r2, [pc, #16]	; (8002938 <__NVIC_SetPriorityGrouping+0x44>)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	60d3      	str	r3, [r2, #12]
}
 800292c:	bf00      	nop
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	e000ed00 	.word	0xe000ed00

0800293c <__NVIC_GetPriorityGrouping>:
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002940:	4b04      	ldr	r3, [pc, #16]	; (8002954 <__NVIC_GetPriorityGrouping+0x18>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	0a1b      	lsrs	r3, r3, #8
 8002946:	f003 0307 	and.w	r3, r3, #7
}
 800294a:	4618      	mov	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	e000ed00 	.word	0xe000ed00

08002958 <__NVIC_SetPriority>:
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	6039      	str	r1, [r7, #0]
 8002962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002968:	2b00      	cmp	r3, #0
 800296a:	db0a      	blt.n	8002982 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	b2da      	uxtb	r2, r3
 8002970:	490c      	ldr	r1, [pc, #48]	; (80029a4 <__NVIC_SetPriority+0x4c>)
 8002972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002976:	0112      	lsls	r2, r2, #4
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	440b      	add	r3, r1
 800297c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002980:	e00a      	b.n	8002998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	b2da      	uxtb	r2, r3
 8002986:	4908      	ldr	r1, [pc, #32]	; (80029a8 <__NVIC_SetPriority+0x50>)
 8002988:	79fb      	ldrb	r3, [r7, #7]
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	3b04      	subs	r3, #4
 8002990:	0112      	lsls	r2, r2, #4
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	440b      	add	r3, r1
 8002996:	761a      	strb	r2, [r3, #24]
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	e000e100 	.word	0xe000e100
 80029a8:	e000ed00 	.word	0xe000ed00

080029ac <NVIC_EncodePriority>:
{
 80029ac:	b480      	push	{r7}
 80029ae:	b089      	sub	sp, #36	; 0x24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f1c3 0307 	rsb	r3, r3, #7
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	bf28      	it	cs
 80029ca:	2304      	movcs	r3, #4
 80029cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3304      	adds	r3, #4
 80029d2:	2b06      	cmp	r3, #6
 80029d4:	d902      	bls.n	80029dc <NVIC_EncodePriority+0x30>
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	3b03      	subs	r3, #3
 80029da:	e000      	b.n	80029de <NVIC_EncodePriority+0x32>
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e0:	f04f 32ff 	mov.w	r2, #4294967295
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43da      	mvns	r2, r3
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	401a      	ands	r2, r3
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029f4:	f04f 31ff 	mov.w	r1, #4294967295
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	fa01 f303 	lsl.w	r3, r1, r3
 80029fe:	43d9      	mvns	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a04:	4313      	orrs	r3, r2
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3724      	adds	r7, #36	; 0x24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
	...

08002a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a24:	d301      	bcc.n	8002a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a26:	2301      	movs	r3, #1
 8002a28:	e00f      	b.n	8002a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a2a:	4a0a      	ldr	r2, [pc, #40]	; (8002a54 <SysTick_Config+0x40>)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a32:	210f      	movs	r1, #15
 8002a34:	f04f 30ff 	mov.w	r0, #4294967295
 8002a38:	f7ff ff8e 	bl	8002958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a3c:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <SysTick_Config+0x40>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a42:	4b04      	ldr	r3, [pc, #16]	; (8002a54 <SysTick_Config+0x40>)
 8002a44:	2207      	movs	r2, #7
 8002a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	e000e010 	.word	0xe000e010

08002a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff ff47 	bl	80028f4 <__NVIC_SetPriorityGrouping>
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b086      	sub	sp, #24
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	4603      	mov	r3, r0
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	607a      	str	r2, [r7, #4]
 8002a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a80:	f7ff ff5c 	bl	800293c <__NVIC_GetPriorityGrouping>
 8002a84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	68b9      	ldr	r1, [r7, #8]
 8002a8a:	6978      	ldr	r0, [r7, #20]
 8002a8c:	f7ff ff8e 	bl	80029ac <NVIC_EncodePriority>
 8002a90:	4602      	mov	r2, r0
 8002a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a96:	4611      	mov	r1, r2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff ff5d 	bl	8002958 <__NVIC_SetPriority>
}
 8002a9e:	bf00      	nop
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7ff ffb0 	bl	8002a14 <SysTick_Config>
 8002ab4:	4603      	mov	r3, r0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b087      	sub	sp, #28
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ace:	e17f      	b.n	8002dd0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8002adc:	4013      	ands	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f000 8171 	beq.w	8002dca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d005      	beq.n	8002b00 <HAL_GPIO_Init+0x40>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f003 0303 	and.w	r3, r3, #3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d130      	bne.n	8002b62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	2203      	movs	r2, #3
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4013      	ands	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b36:	2201      	movs	r2, #1
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4013      	ands	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	091b      	lsrs	r3, r3, #4
 8002b4c:	f003 0201 	and.w	r2, r3, #1
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	2b03      	cmp	r3, #3
 8002b6c:	d118      	bne.n	8002ba0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002b74:	2201      	movs	r2, #1
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4013      	ands	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	08db      	lsrs	r3, r3, #3
 8002b8a:	f003 0201 	and.w	r2, r3, #1
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 0303 	and.w	r3, r3, #3
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d017      	beq.n	8002bdc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 0303 	and.w	r3, r3, #3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d123      	bne.n	8002c30 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	08da      	lsrs	r2, r3, #3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3208      	adds	r2, #8
 8002bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	220f      	movs	r2, #15
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	691a      	ldr	r2, [r3, #16]
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	08da      	lsrs	r2, r3, #3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3208      	adds	r2, #8
 8002c2a:	6939      	ldr	r1, [r7, #16]
 8002c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	2203      	movs	r2, #3
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	43db      	mvns	r3, r3
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4013      	ands	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 0203 	and.w	r2, r3, #3
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 80ac 	beq.w	8002dca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c72:	4b5f      	ldr	r3, [pc, #380]	; (8002df0 <HAL_GPIO_Init+0x330>)
 8002c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c76:	4a5e      	ldr	r2, [pc, #376]	; (8002df0 <HAL_GPIO_Init+0x330>)
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	6613      	str	r3, [r2, #96]	; 0x60
 8002c7e:	4b5c      	ldr	r3, [pc, #368]	; (8002df0 <HAL_GPIO_Init+0x330>)
 8002c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c8a:	4a5a      	ldr	r2, [pc, #360]	; (8002df4 <HAL_GPIO_Init+0x334>)
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	089b      	lsrs	r3, r3, #2
 8002c90:	3302      	adds	r3, #2
 8002c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c96:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	4013      	ands	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002cb4:	d025      	beq.n	8002d02 <HAL_GPIO_Init+0x242>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a4f      	ldr	r2, [pc, #316]	; (8002df8 <HAL_GPIO_Init+0x338>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d01f      	beq.n	8002cfe <HAL_GPIO_Init+0x23e>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a4e      	ldr	r2, [pc, #312]	; (8002dfc <HAL_GPIO_Init+0x33c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d019      	beq.n	8002cfa <HAL_GPIO_Init+0x23a>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a4d      	ldr	r2, [pc, #308]	; (8002e00 <HAL_GPIO_Init+0x340>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d013      	beq.n	8002cf6 <HAL_GPIO_Init+0x236>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a4c      	ldr	r2, [pc, #304]	; (8002e04 <HAL_GPIO_Init+0x344>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d00d      	beq.n	8002cf2 <HAL_GPIO_Init+0x232>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a4b      	ldr	r2, [pc, #300]	; (8002e08 <HAL_GPIO_Init+0x348>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d007      	beq.n	8002cee <HAL_GPIO_Init+0x22e>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a4a      	ldr	r2, [pc, #296]	; (8002e0c <HAL_GPIO_Init+0x34c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d101      	bne.n	8002cea <HAL_GPIO_Init+0x22a>
 8002ce6:	2306      	movs	r3, #6
 8002ce8:	e00c      	b.n	8002d04 <HAL_GPIO_Init+0x244>
 8002cea:	2307      	movs	r3, #7
 8002cec:	e00a      	b.n	8002d04 <HAL_GPIO_Init+0x244>
 8002cee:	2305      	movs	r3, #5
 8002cf0:	e008      	b.n	8002d04 <HAL_GPIO_Init+0x244>
 8002cf2:	2304      	movs	r3, #4
 8002cf4:	e006      	b.n	8002d04 <HAL_GPIO_Init+0x244>
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e004      	b.n	8002d04 <HAL_GPIO_Init+0x244>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e002      	b.n	8002d04 <HAL_GPIO_Init+0x244>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <HAL_GPIO_Init+0x244>
 8002d02:	2300      	movs	r3, #0
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	f002 0203 	and.w	r2, r2, #3
 8002d0a:	0092      	lsls	r2, r2, #2
 8002d0c:	4093      	lsls	r3, r2
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d14:	4937      	ldr	r1, [pc, #220]	; (8002df4 <HAL_GPIO_Init+0x334>)
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	089b      	lsrs	r3, r3, #2
 8002d1a:	3302      	adds	r3, #2
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d22:	4b3b      	ldr	r3, [pc, #236]	; (8002e10 <HAL_GPIO_Init+0x350>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d46:	4a32      	ldr	r2, [pc, #200]	; (8002e10 <HAL_GPIO_Init+0x350>)
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d4c:	4b30      	ldr	r3, [pc, #192]	; (8002e10 <HAL_GPIO_Init+0x350>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	43db      	mvns	r3, r3
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d70:	4a27      	ldr	r2, [pc, #156]	; (8002e10 <HAL_GPIO_Init+0x350>)
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d76:	4b26      	ldr	r3, [pc, #152]	; (8002e10 <HAL_GPIO_Init+0x350>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	4013      	ands	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d9a:	4a1d      	ldr	r2, [pc, #116]	; (8002e10 <HAL_GPIO_Init+0x350>)
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002da0:	4b1b      	ldr	r3, [pc, #108]	; (8002e10 <HAL_GPIO_Init+0x350>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	43db      	mvns	r3, r3
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	4013      	ands	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002dc4:	4a12      	ldr	r2, [pc, #72]	; (8002e10 <HAL_GPIO_Init+0x350>)
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f47f ae78 	bne.w	8002ad0 <HAL_GPIO_Init+0x10>
  }
}
 8002de0:	bf00      	nop
 8002de2:	bf00      	nop
 8002de4:	371c      	adds	r7, #28
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40010000 	.word	0x40010000
 8002df8:	48000400 	.word	0x48000400
 8002dfc:	48000800 	.word	0x48000800
 8002e00:	48000c00 	.word	0x48000c00
 8002e04:	48001000 	.word	0x48001000
 8002e08:	48001400 	.word	0x48001400
 8002e0c:	48001800 	.word	0x48001800
 8002e10:	40010400 	.word	0x40010400

08002e14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	887b      	ldrh	r3, [r7, #2]
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d002      	beq.n	8002e32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	73fb      	strb	r3, [r7, #15]
 8002e30:	e001      	b.n	8002e36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e32:	2300      	movs	r3, #0
 8002e34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	807b      	strh	r3, [r7, #2]
 8002e50:	4613      	mov	r3, r2
 8002e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e54:	787b      	ldrb	r3, [r7, #1]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e5a:	887a      	ldrh	r2, [r7, #2]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e60:	e002      	b.n	8002e68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e62:	887a      	ldrh	r2, [r7, #2]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e78:	4b04      	ldr	r3, [pc, #16]	; (8002e8c <HAL_PWREx_GetVoltageRange+0x18>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	40007000 	.word	0x40007000

08002e90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e9e:	d130      	bne.n	8002f02 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ea0:	4b23      	ldr	r3, [pc, #140]	; (8002f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eac:	d038      	beq.n	8002f20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002eae:	4b20      	ldr	r3, [pc, #128]	; (8002f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002eb6:	4a1e      	ldr	r2, [pc, #120]	; (8002f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ebc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ebe:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2232      	movs	r2, #50	; 0x32
 8002ec4:	fb02 f303 	mul.w	r3, r2, r3
 8002ec8:	4a1b      	ldr	r2, [pc, #108]	; (8002f38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002eca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ece:	0c9b      	lsrs	r3, r3, #18
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ed4:	e002      	b.n	8002edc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002edc:	4b14      	ldr	r3, [pc, #80]	; (8002f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ee8:	d102      	bne.n	8002ef0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1f2      	bne.n	8002ed6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ef0:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002efc:	d110      	bne.n	8002f20 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e00f      	b.n	8002f22 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f02:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f0e:	d007      	beq.n	8002f20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f10:	4b07      	ldr	r3, [pc, #28]	; (8002f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f18:	4a05      	ldr	r2, [pc, #20]	; (8002f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f1e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	40007000 	.word	0x40007000
 8002f34:	20000000 	.word	0x20000000
 8002f38:	431bde83 	.word	0x431bde83

08002f3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b088      	sub	sp, #32
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e3ca      	b.n	80036e4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f4e:	4b97      	ldr	r3, [pc, #604]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 030c 	and.w	r3, r3, #12
 8002f56:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f58:	4b94      	ldr	r3, [pc, #592]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0303 	and.w	r3, r3, #3
 8002f60:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0310 	and.w	r3, r3, #16
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 80e4 	beq.w	8003138 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d007      	beq.n	8002f86 <HAL_RCC_OscConfig+0x4a>
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	2b0c      	cmp	r3, #12
 8002f7a:	f040 808b 	bne.w	8003094 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	f040 8087 	bne.w	8003094 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f86:	4b89      	ldr	r3, [pc, #548]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d005      	beq.n	8002f9e <HAL_RCC_OscConfig+0x62>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e3a2      	b.n	80036e4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a1a      	ldr	r2, [r3, #32]
 8002fa2:	4b82      	ldr	r3, [pc, #520]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d004      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x7c>
 8002fae:	4b7f      	ldr	r3, [pc, #508]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fb6:	e005      	b.n	8002fc4 <HAL_RCC_OscConfig+0x88>
 8002fb8:	4b7c      	ldr	r3, [pc, #496]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 8002fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fbe:	091b      	lsrs	r3, r3, #4
 8002fc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d223      	bcs.n	8003010 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f000 fd55 	bl	8003a7c <RCC_SetFlashLatencyFromMSIRange>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e383      	b.n	80036e4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fdc:	4b73      	ldr	r3, [pc, #460]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a72      	ldr	r2, [pc, #456]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 8002fe2:	f043 0308 	orr.w	r3, r3, #8
 8002fe6:	6013      	str	r3, [r2, #0]
 8002fe8:	4b70      	ldr	r3, [pc, #448]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	496d      	ldr	r1, [pc, #436]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ffa:	4b6c      	ldr	r3, [pc, #432]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	021b      	lsls	r3, r3, #8
 8003008:	4968      	ldr	r1, [pc, #416]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 800300a:	4313      	orrs	r3, r2
 800300c:	604b      	str	r3, [r1, #4]
 800300e:	e025      	b.n	800305c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003010:	4b66      	ldr	r3, [pc, #408]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a65      	ldr	r2, [pc, #404]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 8003016:	f043 0308 	orr.w	r3, r3, #8
 800301a:	6013      	str	r3, [r2, #0]
 800301c:	4b63      	ldr	r3, [pc, #396]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	4960      	ldr	r1, [pc, #384]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 800302a:	4313      	orrs	r3, r2
 800302c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800302e:	4b5f      	ldr	r3, [pc, #380]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	021b      	lsls	r3, r3, #8
 800303c:	495b      	ldr	r1, [pc, #364]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 800303e:	4313      	orrs	r3, r2
 8003040:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d109      	bne.n	800305c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	4618      	mov	r0, r3
 800304e:	f000 fd15 	bl	8003a7c <RCC_SetFlashLatencyFromMSIRange>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e343      	b.n	80036e4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800305c:	f000 fc4a 	bl	80038f4 <HAL_RCC_GetSysClockFreq>
 8003060:	4602      	mov	r2, r0
 8003062:	4b52      	ldr	r3, [pc, #328]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	091b      	lsrs	r3, r3, #4
 8003068:	f003 030f 	and.w	r3, r3, #15
 800306c:	4950      	ldr	r1, [pc, #320]	; (80031b0 <HAL_RCC_OscConfig+0x274>)
 800306e:	5ccb      	ldrb	r3, [r1, r3]
 8003070:	f003 031f 	and.w	r3, r3, #31
 8003074:	fa22 f303 	lsr.w	r3, r2, r3
 8003078:	4a4e      	ldr	r2, [pc, #312]	; (80031b4 <HAL_RCC_OscConfig+0x278>)
 800307a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800307c:	4b4e      	ldr	r3, [pc, #312]	; (80031b8 <HAL_RCC_OscConfig+0x27c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff fbb7 	bl	80027f4 <HAL_InitTick>
 8003086:	4603      	mov	r3, r0
 8003088:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800308a:	7bfb      	ldrb	r3, [r7, #15]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d052      	beq.n	8003136 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	e327      	b.n	80036e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d032      	beq.n	8003102 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800309c:	4b43      	ldr	r3, [pc, #268]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a42      	ldr	r2, [pc, #264]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 80030a2:	f043 0301 	orr.w	r3, r3, #1
 80030a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030a8:	f7ff fbf4 	bl	8002894 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030b0:	f7ff fbf0 	bl	8002894 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e310      	b.n	80036e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030c2:	4b3a      	ldr	r3, [pc, #232]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030ce:	4b37      	ldr	r3, [pc, #220]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a36      	ldr	r2, [pc, #216]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 80030d4:	f043 0308 	orr.w	r3, r3, #8
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	4b34      	ldr	r3, [pc, #208]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	4931      	ldr	r1, [pc, #196]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030ec:	4b2f      	ldr	r3, [pc, #188]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	021b      	lsls	r3, r3, #8
 80030fa:	492c      	ldr	r1, [pc, #176]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	604b      	str	r3, [r1, #4]
 8003100:	e01a      	b.n	8003138 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003102:	4b2a      	ldr	r3, [pc, #168]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a29      	ldr	r2, [pc, #164]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 8003108:	f023 0301 	bic.w	r3, r3, #1
 800310c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800310e:	f7ff fbc1 	bl	8002894 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003116:	f7ff fbbd 	bl	8002894 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e2dd      	b.n	80036e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003128:	4b20      	ldr	r3, [pc, #128]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1f0      	bne.n	8003116 <HAL_RCC_OscConfig+0x1da>
 8003134:	e000      	b.n	8003138 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003136:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b00      	cmp	r3, #0
 8003142:	d074      	beq.n	800322e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	2b08      	cmp	r3, #8
 8003148:	d005      	beq.n	8003156 <HAL_RCC_OscConfig+0x21a>
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	2b0c      	cmp	r3, #12
 800314e:	d10e      	bne.n	800316e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	2b03      	cmp	r3, #3
 8003154:	d10b      	bne.n	800316e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003156:	4b15      	ldr	r3, [pc, #84]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d064      	beq.n	800322c <HAL_RCC_OscConfig+0x2f0>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d160      	bne.n	800322c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e2ba      	b.n	80036e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003176:	d106      	bne.n	8003186 <HAL_RCC_OscConfig+0x24a>
 8003178:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a0b      	ldr	r2, [pc, #44]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 800317e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	e026      	b.n	80031d4 <HAL_RCC_OscConfig+0x298>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800318e:	d115      	bne.n	80031bc <HAL_RCC_OscConfig+0x280>
 8003190:	4b06      	ldr	r3, [pc, #24]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a05      	ldr	r2, [pc, #20]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 8003196:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	4b03      	ldr	r3, [pc, #12]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a02      	ldr	r2, [pc, #8]	; (80031ac <HAL_RCC_OscConfig+0x270>)
 80031a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a6:	6013      	str	r3, [r2, #0]
 80031a8:	e014      	b.n	80031d4 <HAL_RCC_OscConfig+0x298>
 80031aa:	bf00      	nop
 80031ac:	40021000 	.word	0x40021000
 80031b0:	08005d18 	.word	0x08005d18
 80031b4:	20000000 	.word	0x20000000
 80031b8:	20000004 	.word	0x20000004
 80031bc:	4ba0      	ldr	r3, [pc, #640]	; (8003440 <HAL_RCC_OscConfig+0x504>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a9f      	ldr	r2, [pc, #636]	; (8003440 <HAL_RCC_OscConfig+0x504>)
 80031c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031c6:	6013      	str	r3, [r2, #0]
 80031c8:	4b9d      	ldr	r3, [pc, #628]	; (8003440 <HAL_RCC_OscConfig+0x504>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a9c      	ldr	r2, [pc, #624]	; (8003440 <HAL_RCC_OscConfig+0x504>)
 80031ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d013      	beq.n	8003204 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031dc:	f7ff fb5a 	bl	8002894 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e4:	f7ff fb56 	bl	8002894 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b64      	cmp	r3, #100	; 0x64
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e276      	b.n	80036e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031f6:	4b92      	ldr	r3, [pc, #584]	; (8003440 <HAL_RCC_OscConfig+0x504>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0f0      	beq.n	80031e4 <HAL_RCC_OscConfig+0x2a8>
 8003202:	e014      	b.n	800322e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003204:	f7ff fb46 	bl	8002894 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800320c:	f7ff fb42 	bl	8002894 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b64      	cmp	r3, #100	; 0x64
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e262      	b.n	80036e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800321e:	4b88      	ldr	r3, [pc, #544]	; (8003440 <HAL_RCC_OscConfig+0x504>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1f0      	bne.n	800320c <HAL_RCC_OscConfig+0x2d0>
 800322a:	e000      	b.n	800322e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800322c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d060      	beq.n	80032fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	2b04      	cmp	r3, #4
 800323e:	d005      	beq.n	800324c <HAL_RCC_OscConfig+0x310>
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	2b0c      	cmp	r3, #12
 8003244:	d119      	bne.n	800327a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	2b02      	cmp	r3, #2
 800324a:	d116      	bne.n	800327a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800324c:	4b7c      	ldr	r3, [pc, #496]	; (8003440 <HAL_RCC_OscConfig+0x504>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003254:	2b00      	cmp	r3, #0
 8003256:	d005      	beq.n	8003264 <HAL_RCC_OscConfig+0x328>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e23f      	b.n	80036e4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003264:	4b76      	ldr	r3, [pc, #472]	; (8003440 <HAL_RCC_OscConfig+0x504>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	061b      	lsls	r3, r3, #24
 8003272:	4973      	ldr	r1, [pc, #460]	; (8003440 <HAL_RCC_OscConfig+0x504>)
 8003274:	4313      	orrs	r3, r2
 8003276:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003278:	e040      	b.n	80032fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d023      	beq.n	80032ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003282:	4b6f      	ldr	r3, [pc, #444]	; (8003440 <HAL_RCC_OscConfig+0x504>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a6e      	ldr	r2, [pc, #440]	; (8003440 <HAL_RCC_OscConfig+0x504>)
 8003288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800328c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328e:	f7ff fb01 	bl	8002894 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003294:	e008      	b.n	80032a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003296:	f7ff fafd 	bl	8002894 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e21d      	b.n	80036e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032a8:	4b65      	ldr	r3, [pc, #404]	; (8003440 <HAL_RCC_OscConfig+0x504>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0f0      	beq.n	8003296 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b4:	4b62      	ldr	r3, [pc, #392]	; (8003440 <HAL_RCC_OscConfig+0x504>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	061b      	lsls	r3, r3, #24
 80032c2:	495f      	ldr	r1, [pc, #380]	; (8003440 <HAL_RCC_OscConfig+0x504>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	604b      	str	r3, [r1, #4]
 80032c8:	e018      	b.n	80032fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ca:	4b5d      	ldr	r3, [pc, #372]	; (8003440 <HAL_RCC_OscConfig+0x504>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a5c      	ldr	r2, [pc, #368]	; (8003440 <HAL_RCC_OscConfig+0x504>)
 80032d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d6:	f7ff fadd 	bl	8002894 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032de:	f7ff fad9 	bl	8002894 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e1f9      	b.n	80036e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032f0:	4b53      	ldr	r3, [pc, #332]	; (8003440 <HAL_RCC_OscConfig+0x504>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1f0      	bne.n	80032de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b00      	cmp	r3, #0
 8003306:	d03c      	beq.n	8003382 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d01c      	beq.n	800334a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003310:	4b4b      	ldr	r3, [pc, #300]	; (8003440 <HAL_RCC_OscConfig+0x504>)
 8003312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003316:	4a4a      	ldr	r2, [pc, #296]	; (8003440 <HAL_RCC_OscConfig+0x504>)
 8003318:	f043 0301 	orr.w	r3, r3, #1
 800331c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003320:	f7ff fab8 	bl	8002894 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003328:	f7ff fab4 	bl	8002894 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e1d4      	b.n	80036e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800333a:	4b41      	ldr	r3, [pc, #260]	; (8003440 <HAL_RCC_OscConfig+0x504>)
 800333c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0ef      	beq.n	8003328 <HAL_RCC_OscConfig+0x3ec>
 8003348:	e01b      	b.n	8003382 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800334a:	4b3d      	ldr	r3, [pc, #244]	; (8003440 <HAL_RCC_OscConfig+0x504>)
 800334c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003350:	4a3b      	ldr	r2, [pc, #236]	; (8003440 <HAL_RCC_OscConfig+0x504>)
 8003352:	f023 0301 	bic.w	r3, r3, #1
 8003356:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335a:	f7ff fa9b 	bl	8002894 <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003362:	f7ff fa97 	bl	8002894 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e1b7      	b.n	80036e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003374:	4b32      	ldr	r3, [pc, #200]	; (8003440 <HAL_RCC_OscConfig+0x504>)
 8003376:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1ef      	bne.n	8003362 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 80a6 	beq.w	80034dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003390:	2300      	movs	r3, #0
 8003392:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003394:	4b2a      	ldr	r3, [pc, #168]	; (8003440 <HAL_RCC_OscConfig+0x504>)
 8003396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10d      	bne.n	80033bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a0:	4b27      	ldr	r3, [pc, #156]	; (8003440 <HAL_RCC_OscConfig+0x504>)
 80033a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a4:	4a26      	ldr	r2, [pc, #152]	; (8003440 <HAL_RCC_OscConfig+0x504>)
 80033a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033aa:	6593      	str	r3, [r2, #88]	; 0x58
 80033ac:	4b24      	ldr	r3, [pc, #144]	; (8003440 <HAL_RCC_OscConfig+0x504>)
 80033ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b4:	60bb      	str	r3, [r7, #8]
 80033b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033b8:	2301      	movs	r3, #1
 80033ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033bc:	4b21      	ldr	r3, [pc, #132]	; (8003444 <HAL_RCC_OscConfig+0x508>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d118      	bne.n	80033fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033c8:	4b1e      	ldr	r3, [pc, #120]	; (8003444 <HAL_RCC_OscConfig+0x508>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a1d      	ldr	r2, [pc, #116]	; (8003444 <HAL_RCC_OscConfig+0x508>)
 80033ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033d4:	f7ff fa5e 	bl	8002894 <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033dc:	f7ff fa5a 	bl	8002894 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e17a      	b.n	80036e4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033ee:	4b15      	ldr	r3, [pc, #84]	; (8003444 <HAL_RCC_OscConfig+0x508>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0f0      	beq.n	80033dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d108      	bne.n	8003414 <HAL_RCC_OscConfig+0x4d8>
 8003402:	4b0f      	ldr	r3, [pc, #60]	; (8003440 <HAL_RCC_OscConfig+0x504>)
 8003404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003408:	4a0d      	ldr	r2, [pc, #52]	; (8003440 <HAL_RCC_OscConfig+0x504>)
 800340a:	f043 0301 	orr.w	r3, r3, #1
 800340e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003412:	e029      	b.n	8003468 <HAL_RCC_OscConfig+0x52c>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	2b05      	cmp	r3, #5
 800341a:	d115      	bne.n	8003448 <HAL_RCC_OscConfig+0x50c>
 800341c:	4b08      	ldr	r3, [pc, #32]	; (8003440 <HAL_RCC_OscConfig+0x504>)
 800341e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003422:	4a07      	ldr	r2, [pc, #28]	; (8003440 <HAL_RCC_OscConfig+0x504>)
 8003424:	f043 0304 	orr.w	r3, r3, #4
 8003428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800342c:	4b04      	ldr	r3, [pc, #16]	; (8003440 <HAL_RCC_OscConfig+0x504>)
 800342e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003432:	4a03      	ldr	r2, [pc, #12]	; (8003440 <HAL_RCC_OscConfig+0x504>)
 8003434:	f043 0301 	orr.w	r3, r3, #1
 8003438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800343c:	e014      	b.n	8003468 <HAL_RCC_OscConfig+0x52c>
 800343e:	bf00      	nop
 8003440:	40021000 	.word	0x40021000
 8003444:	40007000 	.word	0x40007000
 8003448:	4b9c      	ldr	r3, [pc, #624]	; (80036bc <HAL_RCC_OscConfig+0x780>)
 800344a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344e:	4a9b      	ldr	r2, [pc, #620]	; (80036bc <HAL_RCC_OscConfig+0x780>)
 8003450:	f023 0301 	bic.w	r3, r3, #1
 8003454:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003458:	4b98      	ldr	r3, [pc, #608]	; (80036bc <HAL_RCC_OscConfig+0x780>)
 800345a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345e:	4a97      	ldr	r2, [pc, #604]	; (80036bc <HAL_RCC_OscConfig+0x780>)
 8003460:	f023 0304 	bic.w	r3, r3, #4
 8003464:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d016      	beq.n	800349e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003470:	f7ff fa10 	bl	8002894 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003476:	e00a      	b.n	800348e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003478:	f7ff fa0c 	bl	8002894 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	f241 3288 	movw	r2, #5000	; 0x1388
 8003486:	4293      	cmp	r3, r2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e12a      	b.n	80036e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800348e:	4b8b      	ldr	r3, [pc, #556]	; (80036bc <HAL_RCC_OscConfig+0x780>)
 8003490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0ed      	beq.n	8003478 <HAL_RCC_OscConfig+0x53c>
 800349c:	e015      	b.n	80034ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349e:	f7ff f9f9 	bl	8002894 <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034a4:	e00a      	b.n	80034bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a6:	f7ff f9f5 	bl	8002894 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e113      	b.n	80036e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034bc:	4b7f      	ldr	r3, [pc, #508]	; (80036bc <HAL_RCC_OscConfig+0x780>)
 80034be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1ed      	bne.n	80034a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034ca:	7ffb      	ldrb	r3, [r7, #31]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d105      	bne.n	80034dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d0:	4b7a      	ldr	r3, [pc, #488]	; (80036bc <HAL_RCC_OscConfig+0x780>)
 80034d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d4:	4a79      	ldr	r2, [pc, #484]	; (80036bc <HAL_RCC_OscConfig+0x780>)
 80034d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034da:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 80fe 	beq.w	80036e2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	f040 80d0 	bne.w	8003690 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80034f0:	4b72      	ldr	r3, [pc, #456]	; (80036bc <HAL_RCC_OscConfig+0x780>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f003 0203 	and.w	r2, r3, #3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	429a      	cmp	r2, r3
 8003502:	d130      	bne.n	8003566 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	3b01      	subs	r3, #1
 8003510:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003512:	429a      	cmp	r2, r3
 8003514:	d127      	bne.n	8003566 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003520:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003522:	429a      	cmp	r2, r3
 8003524:	d11f      	bne.n	8003566 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003530:	2a07      	cmp	r2, #7
 8003532:	bf14      	ite	ne
 8003534:	2201      	movne	r2, #1
 8003536:	2200      	moveq	r2, #0
 8003538:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800353a:	4293      	cmp	r3, r2
 800353c:	d113      	bne.n	8003566 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003548:	085b      	lsrs	r3, r3, #1
 800354a:	3b01      	subs	r3, #1
 800354c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800354e:	429a      	cmp	r2, r3
 8003550:	d109      	bne.n	8003566 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	085b      	lsrs	r3, r3, #1
 800355e:	3b01      	subs	r3, #1
 8003560:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003562:	429a      	cmp	r2, r3
 8003564:	d06e      	beq.n	8003644 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	2b0c      	cmp	r3, #12
 800356a:	d069      	beq.n	8003640 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800356c:	4b53      	ldr	r3, [pc, #332]	; (80036bc <HAL_RCC_OscConfig+0x780>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d105      	bne.n	8003584 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003578:	4b50      	ldr	r3, [pc, #320]	; (80036bc <HAL_RCC_OscConfig+0x780>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e0ad      	b.n	80036e4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003588:	4b4c      	ldr	r3, [pc, #304]	; (80036bc <HAL_RCC_OscConfig+0x780>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a4b      	ldr	r2, [pc, #300]	; (80036bc <HAL_RCC_OscConfig+0x780>)
 800358e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003592:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003594:	f7ff f97e 	bl	8002894 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800359c:	f7ff f97a 	bl	8002894 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e09a      	b.n	80036e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035ae:	4b43      	ldr	r3, [pc, #268]	; (80036bc <HAL_RCC_OscConfig+0x780>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f0      	bne.n	800359c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035ba:	4b40      	ldr	r3, [pc, #256]	; (80036bc <HAL_RCC_OscConfig+0x780>)
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	4b40      	ldr	r3, [pc, #256]	; (80036c0 <HAL_RCC_OscConfig+0x784>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035ca:	3a01      	subs	r2, #1
 80035cc:	0112      	lsls	r2, r2, #4
 80035ce:	4311      	orrs	r1, r2
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035d4:	0212      	lsls	r2, r2, #8
 80035d6:	4311      	orrs	r1, r2
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035dc:	0852      	lsrs	r2, r2, #1
 80035de:	3a01      	subs	r2, #1
 80035e0:	0552      	lsls	r2, r2, #21
 80035e2:	4311      	orrs	r1, r2
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80035e8:	0852      	lsrs	r2, r2, #1
 80035ea:	3a01      	subs	r2, #1
 80035ec:	0652      	lsls	r2, r2, #25
 80035ee:	4311      	orrs	r1, r2
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035f4:	0912      	lsrs	r2, r2, #4
 80035f6:	0452      	lsls	r2, r2, #17
 80035f8:	430a      	orrs	r2, r1
 80035fa:	4930      	ldr	r1, [pc, #192]	; (80036bc <HAL_RCC_OscConfig+0x780>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003600:	4b2e      	ldr	r3, [pc, #184]	; (80036bc <HAL_RCC_OscConfig+0x780>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a2d      	ldr	r2, [pc, #180]	; (80036bc <HAL_RCC_OscConfig+0x780>)
 8003606:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800360a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800360c:	4b2b      	ldr	r3, [pc, #172]	; (80036bc <HAL_RCC_OscConfig+0x780>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	4a2a      	ldr	r2, [pc, #168]	; (80036bc <HAL_RCC_OscConfig+0x780>)
 8003612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003616:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003618:	f7ff f93c 	bl	8002894 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003620:	f7ff f938 	bl	8002894 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e058      	b.n	80036e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003632:	4b22      	ldr	r3, [pc, #136]	; (80036bc <HAL_RCC_OscConfig+0x780>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0f0      	beq.n	8003620 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800363e:	e050      	b.n	80036e2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e04f      	b.n	80036e4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003644:	4b1d      	ldr	r3, [pc, #116]	; (80036bc <HAL_RCC_OscConfig+0x780>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d148      	bne.n	80036e2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003650:	4b1a      	ldr	r3, [pc, #104]	; (80036bc <HAL_RCC_OscConfig+0x780>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a19      	ldr	r2, [pc, #100]	; (80036bc <HAL_RCC_OscConfig+0x780>)
 8003656:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800365a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800365c:	4b17      	ldr	r3, [pc, #92]	; (80036bc <HAL_RCC_OscConfig+0x780>)
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	4a16      	ldr	r2, [pc, #88]	; (80036bc <HAL_RCC_OscConfig+0x780>)
 8003662:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003666:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003668:	f7ff f914 	bl	8002894 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003670:	f7ff f910 	bl	8002894 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e030      	b.n	80036e4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003682:	4b0e      	ldr	r3, [pc, #56]	; (80036bc <HAL_RCC_OscConfig+0x780>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0f0      	beq.n	8003670 <HAL_RCC_OscConfig+0x734>
 800368e:	e028      	b.n	80036e2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	2b0c      	cmp	r3, #12
 8003694:	d023      	beq.n	80036de <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003696:	4b09      	ldr	r3, [pc, #36]	; (80036bc <HAL_RCC_OscConfig+0x780>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a08      	ldr	r2, [pc, #32]	; (80036bc <HAL_RCC_OscConfig+0x780>)
 800369c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a2:	f7ff f8f7 	bl	8002894 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036a8:	e00c      	b.n	80036c4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036aa:	f7ff f8f3 	bl	8002894 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d905      	bls.n	80036c4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e013      	b.n	80036e4 <HAL_RCC_OscConfig+0x7a8>
 80036bc:	40021000 	.word	0x40021000
 80036c0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036c4:	4b09      	ldr	r3, [pc, #36]	; (80036ec <HAL_RCC_OscConfig+0x7b0>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1ec      	bne.n	80036aa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036d0:	4b06      	ldr	r3, [pc, #24]	; (80036ec <HAL_RCC_OscConfig+0x7b0>)
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	4905      	ldr	r1, [pc, #20]	; (80036ec <HAL_RCC_OscConfig+0x7b0>)
 80036d6:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_RCC_OscConfig+0x7b4>)
 80036d8:	4013      	ands	r3, r2
 80036da:	60cb      	str	r3, [r1, #12]
 80036dc:	e001      	b.n	80036e2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e000      	b.n	80036e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3720      	adds	r7, #32
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40021000 	.word	0x40021000
 80036f0:	feeefffc 	.word	0xfeeefffc

080036f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e0e7      	b.n	80038d8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003708:	4b75      	ldr	r3, [pc, #468]	; (80038e0 <HAL_RCC_ClockConfig+0x1ec>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d910      	bls.n	8003738 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003716:	4b72      	ldr	r3, [pc, #456]	; (80038e0 <HAL_RCC_ClockConfig+0x1ec>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f023 0207 	bic.w	r2, r3, #7
 800371e:	4970      	ldr	r1, [pc, #448]	; (80038e0 <HAL_RCC_ClockConfig+0x1ec>)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	4313      	orrs	r3, r2
 8003724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003726:	4b6e      	ldr	r3, [pc, #440]	; (80038e0 <HAL_RCC_ClockConfig+0x1ec>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0307 	and.w	r3, r3, #7
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	429a      	cmp	r2, r3
 8003732:	d001      	beq.n	8003738 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0cf      	b.n	80038d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d010      	beq.n	8003766 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	4b66      	ldr	r3, [pc, #408]	; (80038e4 <HAL_RCC_ClockConfig+0x1f0>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003750:	429a      	cmp	r2, r3
 8003752:	d908      	bls.n	8003766 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003754:	4b63      	ldr	r3, [pc, #396]	; (80038e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	4960      	ldr	r1, [pc, #384]	; (80038e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003762:	4313      	orrs	r3, r2
 8003764:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d04c      	beq.n	800380c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b03      	cmp	r3, #3
 8003778:	d107      	bne.n	800378a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800377a:	4b5a      	ldr	r3, [pc, #360]	; (80038e4 <HAL_RCC_ClockConfig+0x1f0>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d121      	bne.n	80037ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e0a6      	b.n	80038d8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2b02      	cmp	r3, #2
 8003790:	d107      	bne.n	80037a2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003792:	4b54      	ldr	r3, [pc, #336]	; (80038e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d115      	bne.n	80037ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e09a      	b.n	80038d8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d107      	bne.n	80037ba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037aa:	4b4e      	ldr	r3, [pc, #312]	; (80038e4 <HAL_RCC_ClockConfig+0x1f0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d109      	bne.n	80037ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e08e      	b.n	80038d8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037ba:	4b4a      	ldr	r3, [pc, #296]	; (80038e4 <HAL_RCC_ClockConfig+0x1f0>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e086      	b.n	80038d8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037ca:	4b46      	ldr	r3, [pc, #280]	; (80038e4 <HAL_RCC_ClockConfig+0x1f0>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f023 0203 	bic.w	r2, r3, #3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	4943      	ldr	r1, [pc, #268]	; (80038e4 <HAL_RCC_ClockConfig+0x1f0>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037dc:	f7ff f85a 	bl	8002894 <HAL_GetTick>
 80037e0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e2:	e00a      	b.n	80037fa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e4:	f7ff f856 	bl	8002894 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e06e      	b.n	80038d8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fa:	4b3a      	ldr	r3, [pc, #232]	; (80038e4 <HAL_RCC_ClockConfig+0x1f0>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 020c 	and.w	r2, r3, #12
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	429a      	cmp	r2, r3
 800380a:	d1eb      	bne.n	80037e4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d010      	beq.n	800383a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	4b31      	ldr	r3, [pc, #196]	; (80038e4 <HAL_RCC_ClockConfig+0x1f0>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003824:	429a      	cmp	r2, r3
 8003826:	d208      	bcs.n	800383a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003828:	4b2e      	ldr	r3, [pc, #184]	; (80038e4 <HAL_RCC_ClockConfig+0x1f0>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	492b      	ldr	r1, [pc, #172]	; (80038e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003836:	4313      	orrs	r3, r2
 8003838:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800383a:	4b29      	ldr	r3, [pc, #164]	; (80038e0 <HAL_RCC_ClockConfig+0x1ec>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	429a      	cmp	r2, r3
 8003846:	d210      	bcs.n	800386a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003848:	4b25      	ldr	r3, [pc, #148]	; (80038e0 <HAL_RCC_ClockConfig+0x1ec>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f023 0207 	bic.w	r2, r3, #7
 8003850:	4923      	ldr	r1, [pc, #140]	; (80038e0 <HAL_RCC_ClockConfig+0x1ec>)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	4313      	orrs	r3, r2
 8003856:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003858:	4b21      	ldr	r3, [pc, #132]	; (80038e0 <HAL_RCC_ClockConfig+0x1ec>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d001      	beq.n	800386a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e036      	b.n	80038d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	2b00      	cmp	r3, #0
 8003874:	d008      	beq.n	8003888 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003876:	4b1b      	ldr	r3, [pc, #108]	; (80038e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	4918      	ldr	r1, [pc, #96]	; (80038e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003884:	4313      	orrs	r3, r2
 8003886:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0308 	and.w	r3, r3, #8
 8003890:	2b00      	cmp	r3, #0
 8003892:	d009      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003894:	4b13      	ldr	r3, [pc, #76]	; (80038e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	4910      	ldr	r1, [pc, #64]	; (80038e4 <HAL_RCC_ClockConfig+0x1f0>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038a8:	f000 f824 	bl	80038f4 <HAL_RCC_GetSysClockFreq>
 80038ac:	4602      	mov	r2, r0
 80038ae:	4b0d      	ldr	r3, [pc, #52]	; (80038e4 <HAL_RCC_ClockConfig+0x1f0>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	091b      	lsrs	r3, r3, #4
 80038b4:	f003 030f 	and.w	r3, r3, #15
 80038b8:	490b      	ldr	r1, [pc, #44]	; (80038e8 <HAL_RCC_ClockConfig+0x1f4>)
 80038ba:	5ccb      	ldrb	r3, [r1, r3]
 80038bc:	f003 031f 	and.w	r3, r3, #31
 80038c0:	fa22 f303 	lsr.w	r3, r2, r3
 80038c4:	4a09      	ldr	r2, [pc, #36]	; (80038ec <HAL_RCC_ClockConfig+0x1f8>)
 80038c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038c8:	4b09      	ldr	r3, [pc, #36]	; (80038f0 <HAL_RCC_ClockConfig+0x1fc>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7fe ff91 	bl	80027f4 <HAL_InitTick>
 80038d2:	4603      	mov	r3, r0
 80038d4:	72fb      	strb	r3, [r7, #11]

  return status;
 80038d6:	7afb      	ldrb	r3, [r7, #11]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40022000 	.word	0x40022000
 80038e4:	40021000 	.word	0x40021000
 80038e8:	08005d18 	.word	0x08005d18
 80038ec:	20000000 	.word	0x20000000
 80038f0:	20000004 	.word	0x20000004

080038f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b089      	sub	sp, #36	; 0x24
 80038f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61fb      	str	r3, [r7, #28]
 80038fe:	2300      	movs	r3, #0
 8003900:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003902:	4b3e      	ldr	r3, [pc, #248]	; (80039fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 030c 	and.w	r3, r3, #12
 800390a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800390c:	4b3b      	ldr	r3, [pc, #236]	; (80039fc <HAL_RCC_GetSysClockFreq+0x108>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f003 0303 	and.w	r3, r3, #3
 8003914:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d005      	beq.n	8003928 <HAL_RCC_GetSysClockFreq+0x34>
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	2b0c      	cmp	r3, #12
 8003920:	d121      	bne.n	8003966 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d11e      	bne.n	8003966 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003928:	4b34      	ldr	r3, [pc, #208]	; (80039fc <HAL_RCC_GetSysClockFreq+0x108>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0308 	and.w	r3, r3, #8
 8003930:	2b00      	cmp	r3, #0
 8003932:	d107      	bne.n	8003944 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003934:	4b31      	ldr	r3, [pc, #196]	; (80039fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003936:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800393a:	0a1b      	lsrs	r3, r3, #8
 800393c:	f003 030f 	and.w	r3, r3, #15
 8003940:	61fb      	str	r3, [r7, #28]
 8003942:	e005      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003944:	4b2d      	ldr	r3, [pc, #180]	; (80039fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	091b      	lsrs	r3, r3, #4
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003950:	4a2b      	ldr	r2, [pc, #172]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003958:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10d      	bne.n	800397c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003964:	e00a      	b.n	800397c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	2b04      	cmp	r3, #4
 800396a:	d102      	bne.n	8003972 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800396c:	4b25      	ldr	r3, [pc, #148]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x110>)
 800396e:	61bb      	str	r3, [r7, #24]
 8003970:	e004      	b.n	800397c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	2b08      	cmp	r3, #8
 8003976:	d101      	bne.n	800397c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003978:	4b23      	ldr	r3, [pc, #140]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x114>)
 800397a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	2b0c      	cmp	r3, #12
 8003980:	d134      	bne.n	80039ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003982:	4b1e      	ldr	r3, [pc, #120]	; (80039fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	2b02      	cmp	r3, #2
 8003990:	d003      	beq.n	800399a <HAL_RCC_GetSysClockFreq+0xa6>
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	2b03      	cmp	r3, #3
 8003996:	d003      	beq.n	80039a0 <HAL_RCC_GetSysClockFreq+0xac>
 8003998:	e005      	b.n	80039a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800399a:	4b1a      	ldr	r3, [pc, #104]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x110>)
 800399c:	617b      	str	r3, [r7, #20]
      break;
 800399e:	e005      	b.n	80039ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80039a0:	4b19      	ldr	r3, [pc, #100]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x114>)
 80039a2:	617b      	str	r3, [r7, #20]
      break;
 80039a4:	e002      	b.n	80039ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	617b      	str	r3, [r7, #20]
      break;
 80039aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039ac:	4b13      	ldr	r3, [pc, #76]	; (80039fc <HAL_RCC_GetSysClockFreq+0x108>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	091b      	lsrs	r3, r3, #4
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	3301      	adds	r3, #1
 80039b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039ba:	4b10      	ldr	r3, [pc, #64]	; (80039fc <HAL_RCC_GetSysClockFreq+0x108>)
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	0a1b      	lsrs	r3, r3, #8
 80039c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	fb03 f202 	mul.w	r2, r3, r2
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039d2:	4b0a      	ldr	r3, [pc, #40]	; (80039fc <HAL_RCC_GetSysClockFreq+0x108>)
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	0e5b      	lsrs	r3, r3, #25
 80039d8:	f003 0303 	and.w	r3, r3, #3
 80039dc:	3301      	adds	r3, #1
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039ec:	69bb      	ldr	r3, [r7, #24]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3724      	adds	r7, #36	; 0x24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40021000 	.word	0x40021000
 8003a00:	08005d30 	.word	0x08005d30
 8003a04:	00f42400 	.word	0x00f42400
 8003a08:	007a1200 	.word	0x007a1200

08003a0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a10:	4b03      	ldr	r3, [pc, #12]	; (8003a20 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a12:	681b      	ldr	r3, [r3, #0]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	20000000 	.word	0x20000000

08003a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a28:	f7ff fff0 	bl	8003a0c <HAL_RCC_GetHCLKFreq>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	0a1b      	lsrs	r3, r3, #8
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	4904      	ldr	r1, [pc, #16]	; (8003a4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a3a:	5ccb      	ldrb	r3, [r1, r3]
 8003a3c:	f003 031f 	and.w	r3, r3, #31
 8003a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	08005d28 	.word	0x08005d28

08003a50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a54:	f7ff ffda 	bl	8003a0c <HAL_RCC_GetHCLKFreq>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	0adb      	lsrs	r3, r3, #11
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	4904      	ldr	r1, [pc, #16]	; (8003a78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a66:	5ccb      	ldrb	r3, [r1, r3]
 8003a68:	f003 031f 	and.w	r3, r3, #31
 8003a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40021000 	.word	0x40021000
 8003a78:	08005d28 	.word	0x08005d28

08003a7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a84:	2300      	movs	r3, #0
 8003a86:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a88:	4b2a      	ldr	r3, [pc, #168]	; (8003b34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a94:	f7ff f9ee 	bl	8002e74 <HAL_PWREx_GetVoltageRange>
 8003a98:	6178      	str	r0, [r7, #20]
 8003a9a:	e014      	b.n	8003ac6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a9c:	4b25      	ldr	r3, [pc, #148]	; (8003b34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa0:	4a24      	ldr	r2, [pc, #144]	; (8003b34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa6:	6593      	str	r3, [r2, #88]	; 0x58
 8003aa8:	4b22      	ldr	r3, [pc, #136]	; (8003b34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ab4:	f7ff f9de 	bl	8002e74 <HAL_PWREx_GetVoltageRange>
 8003ab8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003aba:	4b1e      	ldr	r3, [pc, #120]	; (8003b34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abe:	4a1d      	ldr	r2, [pc, #116]	; (8003b34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ac0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003acc:	d10b      	bne.n	8003ae6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b80      	cmp	r3, #128	; 0x80
 8003ad2:	d919      	bls.n	8003b08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2ba0      	cmp	r3, #160	; 0xa0
 8003ad8:	d902      	bls.n	8003ae0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ada:	2302      	movs	r3, #2
 8003adc:	613b      	str	r3, [r7, #16]
 8003ade:	e013      	b.n	8003b08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	613b      	str	r3, [r7, #16]
 8003ae4:	e010      	b.n	8003b08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b80      	cmp	r3, #128	; 0x80
 8003aea:	d902      	bls.n	8003af2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003aec:	2303      	movs	r3, #3
 8003aee:	613b      	str	r3, [r7, #16]
 8003af0:	e00a      	b.n	8003b08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b80      	cmp	r3, #128	; 0x80
 8003af6:	d102      	bne.n	8003afe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003af8:	2302      	movs	r3, #2
 8003afa:	613b      	str	r3, [r7, #16]
 8003afc:	e004      	b.n	8003b08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b70      	cmp	r3, #112	; 0x70
 8003b02:	d101      	bne.n	8003b08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b04:	2301      	movs	r3, #1
 8003b06:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b08:	4b0b      	ldr	r3, [pc, #44]	; (8003b38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f023 0207 	bic.w	r2, r3, #7
 8003b10:	4909      	ldr	r1, [pc, #36]	; (8003b38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b18:	4b07      	ldr	r3, [pc, #28]	; (8003b38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d001      	beq.n	8003b2a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3718      	adds	r7, #24
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	40021000 	.word	0x40021000
 8003b38:	40022000 	.word	0x40022000

08003b3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b44:	2300      	movs	r3, #0
 8003b46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b48:	2300      	movs	r3, #0
 8003b4a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d041      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b60:	d02a      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b62:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b66:	d824      	bhi.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b6c:	d008      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b72:	d81e      	bhi.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00a      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003b78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b7c:	d010      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b7e:	e018      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b80:	4b86      	ldr	r3, [pc, #536]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	4a85      	ldr	r2, [pc, #532]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b8a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b8c:	e015      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	3304      	adds	r3, #4
 8003b92:	2100      	movs	r1, #0
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 fabb 	bl	8004110 <RCCEx_PLLSAI1_Config>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b9e:	e00c      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3320      	adds	r3, #32
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 fba6 	bl	80042f8 <RCCEx_PLLSAI2_Config>
 8003bac:	4603      	mov	r3, r0
 8003bae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bb0:	e003      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	74fb      	strb	r3, [r7, #19]
      break;
 8003bb6:	e000      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003bb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bba:	7cfb      	ldrb	r3, [r7, #19]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10b      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bc0:	4b76      	ldr	r3, [pc, #472]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bce:	4973      	ldr	r1, [pc, #460]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003bd6:	e001      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd8:	7cfb      	ldrb	r3, [r7, #19]
 8003bda:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d041      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bf0:	d02a      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003bf2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bf6:	d824      	bhi.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003bf8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bfc:	d008      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003bfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c02:	d81e      	bhi.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00a      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003c08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c0c:	d010      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c0e:	e018      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c10:	4b62      	ldr	r3, [pc, #392]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	4a61      	ldr	r2, [pc, #388]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c1a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c1c:	e015      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3304      	adds	r3, #4
 8003c22:	2100      	movs	r1, #0
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 fa73 	bl	8004110 <RCCEx_PLLSAI1_Config>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c2e:	e00c      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3320      	adds	r3, #32
 8003c34:	2100      	movs	r1, #0
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 fb5e 	bl	80042f8 <RCCEx_PLLSAI2_Config>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c40:	e003      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	74fb      	strb	r3, [r7, #19]
      break;
 8003c46:	e000      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003c48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c4a:	7cfb      	ldrb	r3, [r7, #19]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10b      	bne.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c50:	4b52      	ldr	r3, [pc, #328]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c56:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c5e:	494f      	ldr	r1, [pc, #316]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c66:	e001      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c68:	7cfb      	ldrb	r3, [r7, #19]
 8003c6a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 80a0 	beq.w	8003dba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c7e:	4b47      	ldr	r3, [pc, #284]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003c8e:	2300      	movs	r3, #0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00d      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c94:	4b41      	ldr	r3, [pc, #260]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c98:	4a40      	ldr	r2, [pc, #256]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c9e:	6593      	str	r3, [r2, #88]	; 0x58
 8003ca0:	4b3e      	ldr	r3, [pc, #248]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca8:	60bb      	str	r3, [r7, #8]
 8003caa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cac:	2301      	movs	r3, #1
 8003cae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cb0:	4b3b      	ldr	r3, [pc, #236]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a3a      	ldr	r2, [pc, #232]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cbc:	f7fe fdea 	bl	8002894 <HAL_GetTick>
 8003cc0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cc2:	e009      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc4:	f7fe fde6 	bl	8002894 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d902      	bls.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	74fb      	strb	r3, [r7, #19]
        break;
 8003cd6:	e005      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cd8:	4b31      	ldr	r3, [pc, #196]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0ef      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003ce4:	7cfb      	ldrb	r3, [r7, #19]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d15c      	bne.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cea:	4b2c      	ldr	r3, [pc, #176]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cf4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d01f      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d019      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d08:	4b24      	ldr	r3, [pc, #144]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d14:	4b21      	ldr	r3, [pc, #132]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1a:	4a20      	ldr	r2, [pc, #128]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d24:	4b1d      	ldr	r3, [pc, #116]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2a:	4a1c      	ldr	r2, [pc, #112]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d34:	4a19      	ldr	r2, [pc, #100]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d016      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d46:	f7fe fda5 	bl	8002894 <HAL_GetTick>
 8003d4a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d4c:	e00b      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d4e:	f7fe fda1 	bl	8002894 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d902      	bls.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	74fb      	strb	r3, [r7, #19]
            break;
 8003d64:	e006      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d66:	4b0d      	ldr	r3, [pc, #52]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0ec      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003d74:	7cfb      	ldrb	r3, [r7, #19]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10c      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d7a:	4b08      	ldr	r3, [pc, #32]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d8a:	4904      	ldr	r1, [pc, #16]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d92:	e009      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d94:	7cfb      	ldrb	r3, [r7, #19]
 8003d96:	74bb      	strb	r3, [r7, #18]
 8003d98:	e006      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003d9a:	bf00      	nop
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da4:	7cfb      	ldrb	r3, [r7, #19]
 8003da6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003da8:	7c7b      	ldrb	r3, [r7, #17]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d105      	bne.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dae:	4b9e      	ldr	r3, [pc, #632]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db2:	4a9d      	ldr	r2, [pc, #628]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003db8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00a      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dc6:	4b98      	ldr	r3, [pc, #608]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dcc:	f023 0203 	bic.w	r2, r3, #3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd4:	4994      	ldr	r1, [pc, #592]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00a      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003de8:	4b8f      	ldr	r3, [pc, #572]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dee:	f023 020c 	bic.w	r2, r3, #12
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df6:	498c      	ldr	r1, [pc, #560]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0304 	and.w	r3, r3, #4
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00a      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e0a:	4b87      	ldr	r3, [pc, #540]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e10:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	4983      	ldr	r1, [pc, #524]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00a      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e2c:	4b7e      	ldr	r3, [pc, #504]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3a:	497b      	ldr	r1, [pc, #492]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0310 	and.w	r3, r3, #16
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00a      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e4e:	4b76      	ldr	r3, [pc, #472]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e5c:	4972      	ldr	r1, [pc, #456]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0320 	and.w	r3, r3, #32
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00a      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e70:	4b6d      	ldr	r3, [pc, #436]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e7e:	496a      	ldr	r1, [pc, #424]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00a      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e92:	4b65      	ldr	r3, [pc, #404]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea0:	4961      	ldr	r1, [pc, #388]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00a      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003eb4:	4b5c      	ldr	r3, [pc, #368]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec2:	4959      	ldr	r1, [pc, #356]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00a      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ed6:	4b54      	ldr	r3, [pc, #336]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003edc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee4:	4950      	ldr	r1, [pc, #320]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00a      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ef8:	4b4b      	ldr	r3, [pc, #300]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f06:	4948      	ldr	r1, [pc, #288]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00a      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f1a:	4b43      	ldr	r3, [pc, #268]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f28:	493f      	ldr	r1, [pc, #252]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d028      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f3c:	4b3a      	ldr	r3, [pc, #232]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f4a:	4937      	ldr	r1, [pc, #220]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f5a:	d106      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f5c:	4b32      	ldr	r3, [pc, #200]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	4a31      	ldr	r2, [pc, #196]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f66:	60d3      	str	r3, [r2, #12]
 8003f68:	e011      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f72:	d10c      	bne.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3304      	adds	r3, #4
 8003f78:	2101      	movs	r1, #1
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 f8c8 	bl	8004110 <RCCEx_PLLSAI1_Config>
 8003f80:	4603      	mov	r3, r0
 8003f82:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f84:	7cfb      	ldrb	r3, [r7, #19]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003f8a:	7cfb      	ldrb	r3, [r7, #19]
 8003f8c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d028      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f9a:	4b23      	ldr	r3, [pc, #140]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa8:	491f      	ldr	r1, [pc, #124]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fb8:	d106      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fba:	4b1b      	ldr	r3, [pc, #108]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	4a1a      	ldr	r2, [pc, #104]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fc4:	60d3      	str	r3, [r2, #12]
 8003fc6:	e011      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fd0:	d10c      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	3304      	adds	r3, #4
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 f899 	bl	8004110 <RCCEx_PLLSAI1_Config>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fe2:	7cfb      	ldrb	r3, [r7, #19]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003fe8:	7cfb      	ldrb	r3, [r7, #19]
 8003fea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d02b      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ff8:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004006:	4908      	ldr	r1, [pc, #32]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004008:	4313      	orrs	r3, r2
 800400a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004012:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004016:	d109      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004018:	4b03      	ldr	r3, [pc, #12]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	4a02      	ldr	r2, [pc, #8]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800401e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004022:	60d3      	str	r3, [r2, #12]
 8004024:	e014      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004026:	bf00      	nop
 8004028:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004030:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004034:	d10c      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	3304      	adds	r3, #4
 800403a:	2101      	movs	r1, #1
 800403c:	4618      	mov	r0, r3
 800403e:	f000 f867 	bl	8004110 <RCCEx_PLLSAI1_Config>
 8004042:	4603      	mov	r3, r0
 8004044:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004046:	7cfb      	ldrb	r3, [r7, #19]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800404c:	7cfb      	ldrb	r3, [r7, #19]
 800404e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d02f      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800405c:	4b2b      	ldr	r3, [pc, #172]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800405e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004062:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800406a:	4928      	ldr	r1, [pc, #160]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800406c:	4313      	orrs	r3, r2
 800406e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004076:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800407a:	d10d      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3304      	adds	r3, #4
 8004080:	2102      	movs	r1, #2
 8004082:	4618      	mov	r0, r3
 8004084:	f000 f844 	bl	8004110 <RCCEx_PLLSAI1_Config>
 8004088:	4603      	mov	r3, r0
 800408a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800408c:	7cfb      	ldrb	r3, [r7, #19]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d014      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004092:	7cfb      	ldrb	r3, [r7, #19]
 8004094:	74bb      	strb	r3, [r7, #18]
 8004096:	e011      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800409c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040a0:	d10c      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	3320      	adds	r3, #32
 80040a6:	2102      	movs	r1, #2
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 f925 	bl	80042f8 <RCCEx_PLLSAI2_Config>
 80040ae:	4603      	mov	r3, r0
 80040b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040b2:	7cfb      	ldrb	r3, [r7, #19]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040b8:	7cfb      	ldrb	r3, [r7, #19]
 80040ba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00a      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040c8:	4b10      	ldr	r3, [pc, #64]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040d6:	490d      	ldr	r1, [pc, #52]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00b      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040ea:	4b08      	ldr	r3, [pc, #32]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040fa:	4904      	ldr	r1, [pc, #16]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004102:	7cbb      	ldrb	r3, [r7, #18]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3718      	adds	r7, #24
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	40021000 	.word	0x40021000

08004110 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800411a:	2300      	movs	r3, #0
 800411c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800411e:	4b75      	ldr	r3, [pc, #468]	; (80042f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f003 0303 	and.w	r3, r3, #3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d018      	beq.n	800415c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800412a:	4b72      	ldr	r3, [pc, #456]	; (80042f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f003 0203 	and.w	r2, r3, #3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d10d      	bne.n	8004156 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
       ||
 800413e:	2b00      	cmp	r3, #0
 8004140:	d009      	beq.n	8004156 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004142:	4b6c      	ldr	r3, [pc, #432]	; (80042f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	091b      	lsrs	r3, r3, #4
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	1c5a      	adds	r2, r3, #1
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
       ||
 8004152:	429a      	cmp	r2, r3
 8004154:	d047      	beq.n	80041e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	73fb      	strb	r3, [r7, #15]
 800415a:	e044      	b.n	80041e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b03      	cmp	r3, #3
 8004162:	d018      	beq.n	8004196 <RCCEx_PLLSAI1_Config+0x86>
 8004164:	2b03      	cmp	r3, #3
 8004166:	d825      	bhi.n	80041b4 <RCCEx_PLLSAI1_Config+0xa4>
 8004168:	2b01      	cmp	r3, #1
 800416a:	d002      	beq.n	8004172 <RCCEx_PLLSAI1_Config+0x62>
 800416c:	2b02      	cmp	r3, #2
 800416e:	d009      	beq.n	8004184 <RCCEx_PLLSAI1_Config+0x74>
 8004170:	e020      	b.n	80041b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004172:	4b60      	ldr	r3, [pc, #384]	; (80042f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d11d      	bne.n	80041ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004182:	e01a      	b.n	80041ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004184:	4b5b      	ldr	r3, [pc, #364]	; (80042f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800418c:	2b00      	cmp	r3, #0
 800418e:	d116      	bne.n	80041be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004194:	e013      	b.n	80041be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004196:	4b57      	ldr	r3, [pc, #348]	; (80042f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10f      	bne.n	80041c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041a2:	4b54      	ldr	r3, [pc, #336]	; (80042f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d109      	bne.n	80041c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041b2:	e006      	b.n	80041c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	73fb      	strb	r3, [r7, #15]
      break;
 80041b8:	e004      	b.n	80041c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041ba:	bf00      	nop
 80041bc:	e002      	b.n	80041c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041be:	bf00      	nop
 80041c0:	e000      	b.n	80041c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80041c4:	7bfb      	ldrb	r3, [r7, #15]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10d      	bne.n	80041e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041ca:	4b4a      	ldr	r3, [pc, #296]	; (80042f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6819      	ldr	r1, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	3b01      	subs	r3, #1
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	430b      	orrs	r3, r1
 80041e0:	4944      	ldr	r1, [pc, #272]	; (80042f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041e6:	7bfb      	ldrb	r3, [r7, #15]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d17d      	bne.n	80042e8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041ec:	4b41      	ldr	r3, [pc, #260]	; (80042f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a40      	ldr	r2, [pc, #256]	; (80042f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f8:	f7fe fb4c 	bl	8002894 <HAL_GetTick>
 80041fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041fe:	e009      	b.n	8004214 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004200:	f7fe fb48 	bl	8002894 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d902      	bls.n	8004214 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	73fb      	strb	r3, [r7, #15]
        break;
 8004212:	e005      	b.n	8004220 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004214:	4b37      	ldr	r3, [pc, #220]	; (80042f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1ef      	bne.n	8004200 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004220:	7bfb      	ldrb	r3, [r7, #15]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d160      	bne.n	80042e8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d111      	bne.n	8004250 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800422c:	4b31      	ldr	r3, [pc, #196]	; (80042f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	6892      	ldr	r2, [r2, #8]
 800423c:	0211      	lsls	r1, r2, #8
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	68d2      	ldr	r2, [r2, #12]
 8004242:	0912      	lsrs	r2, r2, #4
 8004244:	0452      	lsls	r2, r2, #17
 8004246:	430a      	orrs	r2, r1
 8004248:	492a      	ldr	r1, [pc, #168]	; (80042f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800424a:	4313      	orrs	r3, r2
 800424c:	610b      	str	r3, [r1, #16]
 800424e:	e027      	b.n	80042a0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d112      	bne.n	800427c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004256:	4b27      	ldr	r3, [pc, #156]	; (80042f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800425e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6892      	ldr	r2, [r2, #8]
 8004266:	0211      	lsls	r1, r2, #8
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6912      	ldr	r2, [r2, #16]
 800426c:	0852      	lsrs	r2, r2, #1
 800426e:	3a01      	subs	r2, #1
 8004270:	0552      	lsls	r2, r2, #21
 8004272:	430a      	orrs	r2, r1
 8004274:	491f      	ldr	r1, [pc, #124]	; (80042f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004276:	4313      	orrs	r3, r2
 8004278:	610b      	str	r3, [r1, #16]
 800427a:	e011      	b.n	80042a0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800427c:	4b1d      	ldr	r3, [pc, #116]	; (80042f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004284:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6892      	ldr	r2, [r2, #8]
 800428c:	0211      	lsls	r1, r2, #8
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6952      	ldr	r2, [r2, #20]
 8004292:	0852      	lsrs	r2, r2, #1
 8004294:	3a01      	subs	r2, #1
 8004296:	0652      	lsls	r2, r2, #25
 8004298:	430a      	orrs	r2, r1
 800429a:	4916      	ldr	r1, [pc, #88]	; (80042f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800429c:	4313      	orrs	r3, r2
 800429e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80042a0:	4b14      	ldr	r3, [pc, #80]	; (80042f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a13      	ldr	r2, [pc, #76]	; (80042f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ac:	f7fe faf2 	bl	8002894 <HAL_GetTick>
 80042b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042b2:	e009      	b.n	80042c8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042b4:	f7fe faee 	bl	8002894 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d902      	bls.n	80042c8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	73fb      	strb	r3, [r7, #15]
          break;
 80042c6:	e005      	b.n	80042d4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042c8:	4b0a      	ldr	r3, [pc, #40]	; (80042f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0ef      	beq.n	80042b4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d106      	bne.n	80042e8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80042da:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042dc:	691a      	ldr	r2, [r3, #16]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	4904      	ldr	r1, [pc, #16]	; (80042f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	40021000 	.word	0x40021000

080042f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004302:	2300      	movs	r3, #0
 8004304:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004306:	4b6a      	ldr	r3, [pc, #424]	; (80044b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d018      	beq.n	8004344 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004312:	4b67      	ldr	r3, [pc, #412]	; (80044b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	f003 0203 	and.w	r2, r3, #3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	429a      	cmp	r2, r3
 8004320:	d10d      	bne.n	800433e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
       ||
 8004326:	2b00      	cmp	r3, #0
 8004328:	d009      	beq.n	800433e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800432a:	4b61      	ldr	r3, [pc, #388]	; (80044b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	091b      	lsrs	r3, r3, #4
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	1c5a      	adds	r2, r3, #1
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
       ||
 800433a:	429a      	cmp	r2, r3
 800433c:	d047      	beq.n	80043ce <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	73fb      	strb	r3, [r7, #15]
 8004342:	e044      	b.n	80043ce <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b03      	cmp	r3, #3
 800434a:	d018      	beq.n	800437e <RCCEx_PLLSAI2_Config+0x86>
 800434c:	2b03      	cmp	r3, #3
 800434e:	d825      	bhi.n	800439c <RCCEx_PLLSAI2_Config+0xa4>
 8004350:	2b01      	cmp	r3, #1
 8004352:	d002      	beq.n	800435a <RCCEx_PLLSAI2_Config+0x62>
 8004354:	2b02      	cmp	r3, #2
 8004356:	d009      	beq.n	800436c <RCCEx_PLLSAI2_Config+0x74>
 8004358:	e020      	b.n	800439c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800435a:	4b55      	ldr	r3, [pc, #340]	; (80044b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d11d      	bne.n	80043a2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800436a:	e01a      	b.n	80043a2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800436c:	4b50      	ldr	r3, [pc, #320]	; (80044b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004374:	2b00      	cmp	r3, #0
 8004376:	d116      	bne.n	80043a6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800437c:	e013      	b.n	80043a6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800437e:	4b4c      	ldr	r3, [pc, #304]	; (80044b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10f      	bne.n	80043aa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800438a:	4b49      	ldr	r3, [pc, #292]	; (80044b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d109      	bne.n	80043aa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800439a:	e006      	b.n	80043aa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	73fb      	strb	r3, [r7, #15]
      break;
 80043a0:	e004      	b.n	80043ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043a2:	bf00      	nop
 80043a4:	e002      	b.n	80043ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043a6:	bf00      	nop
 80043a8:	e000      	b.n	80043ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10d      	bne.n	80043ce <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043b2:	4b3f      	ldr	r3, [pc, #252]	; (80044b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6819      	ldr	r1, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	430b      	orrs	r3, r1
 80043c8:	4939      	ldr	r1, [pc, #228]	; (80044b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043ce:	7bfb      	ldrb	r3, [r7, #15]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d167      	bne.n	80044a4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80043d4:	4b36      	ldr	r3, [pc, #216]	; (80044b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a35      	ldr	r2, [pc, #212]	; (80044b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043e0:	f7fe fa58 	bl	8002894 <HAL_GetTick>
 80043e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043e6:	e009      	b.n	80043fc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043e8:	f7fe fa54 	bl	8002894 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d902      	bls.n	80043fc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	73fb      	strb	r3, [r7, #15]
        break;
 80043fa:	e005      	b.n	8004408 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043fc:	4b2c      	ldr	r3, [pc, #176]	; (80044b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1ef      	bne.n	80043e8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004408:	7bfb      	ldrb	r3, [r7, #15]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d14a      	bne.n	80044a4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d111      	bne.n	8004438 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004414:	4b26      	ldr	r3, [pc, #152]	; (80044b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800441c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6892      	ldr	r2, [r2, #8]
 8004424:	0211      	lsls	r1, r2, #8
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	68d2      	ldr	r2, [r2, #12]
 800442a:	0912      	lsrs	r2, r2, #4
 800442c:	0452      	lsls	r2, r2, #17
 800442e:	430a      	orrs	r2, r1
 8004430:	491f      	ldr	r1, [pc, #124]	; (80044b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004432:	4313      	orrs	r3, r2
 8004434:	614b      	str	r3, [r1, #20]
 8004436:	e011      	b.n	800445c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004438:	4b1d      	ldr	r3, [pc, #116]	; (80044b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004440:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	6892      	ldr	r2, [r2, #8]
 8004448:	0211      	lsls	r1, r2, #8
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6912      	ldr	r2, [r2, #16]
 800444e:	0852      	lsrs	r2, r2, #1
 8004450:	3a01      	subs	r2, #1
 8004452:	0652      	lsls	r2, r2, #25
 8004454:	430a      	orrs	r2, r1
 8004456:	4916      	ldr	r1, [pc, #88]	; (80044b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004458:	4313      	orrs	r3, r2
 800445a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800445c:	4b14      	ldr	r3, [pc, #80]	; (80044b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a13      	ldr	r2, [pc, #76]	; (80044b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004466:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004468:	f7fe fa14 	bl	8002894 <HAL_GetTick>
 800446c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800446e:	e009      	b.n	8004484 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004470:	f7fe fa10 	bl	8002894 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d902      	bls.n	8004484 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	73fb      	strb	r3, [r7, #15]
          break;
 8004482:	e005      	b.n	8004490 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004484:	4b0a      	ldr	r3, [pc, #40]	; (80044b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0ef      	beq.n	8004470 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d106      	bne.n	80044a4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004496:	4b06      	ldr	r3, [pc, #24]	; (80044b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004498:	695a      	ldr	r2, [r3, #20]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	4904      	ldr	r1, [pc, #16]	; (80044b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	40021000 	.word	0x40021000

080044b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e040      	b.n	8004548 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d106      	bne.n	80044dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7fe f8aa 	bl	8002630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2224      	movs	r2, #36	; 0x24
 80044e0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0201 	bic.w	r2, r2, #1
 80044f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f82c 	bl	8004550 <UART_SetConfig>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d101      	bne.n	8004502 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e022      	b.n	8004548 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	2b00      	cmp	r3, #0
 8004508:	d002      	beq.n	8004510 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 fad8 	bl	8004ac0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800451e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689a      	ldr	r2, [r3, #8]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800452e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 0201 	orr.w	r2, r2, #1
 800453e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 fb5f 	bl	8004c04 <UART_CheckIdleState>
 8004546:	4603      	mov	r3, r0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004554:	b08a      	sub	sp, #40	; 0x28
 8004556:	af00      	add	r7, sp, #0
 8004558:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800455a:	2300      	movs	r3, #0
 800455c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	431a      	orrs	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	431a      	orrs	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	4313      	orrs	r3, r2
 8004576:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	4ba4      	ldr	r3, [pc, #656]	; (8004810 <UART_SetConfig+0x2c0>)
 8004580:	4013      	ands	r3, r2
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	6812      	ldr	r2, [r2, #0]
 8004586:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004588:	430b      	orrs	r3, r1
 800458a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	68da      	ldr	r2, [r3, #12]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a99      	ldr	r2, [pc, #612]	; (8004814 <UART_SetConfig+0x2c4>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d004      	beq.n	80045bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b8:	4313      	orrs	r3, r2
 80045ba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045cc:	430a      	orrs	r2, r1
 80045ce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a90      	ldr	r2, [pc, #576]	; (8004818 <UART_SetConfig+0x2c8>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d126      	bne.n	8004628 <UART_SetConfig+0xd8>
 80045da:	4b90      	ldr	r3, [pc, #576]	; (800481c <UART_SetConfig+0x2cc>)
 80045dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e0:	f003 0303 	and.w	r3, r3, #3
 80045e4:	2b03      	cmp	r3, #3
 80045e6:	d81b      	bhi.n	8004620 <UART_SetConfig+0xd0>
 80045e8:	a201      	add	r2, pc, #4	; (adr r2, 80045f0 <UART_SetConfig+0xa0>)
 80045ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ee:	bf00      	nop
 80045f0:	08004601 	.word	0x08004601
 80045f4:	08004611 	.word	0x08004611
 80045f8:	08004609 	.word	0x08004609
 80045fc:	08004619 	.word	0x08004619
 8004600:	2301      	movs	r3, #1
 8004602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004606:	e116      	b.n	8004836 <UART_SetConfig+0x2e6>
 8004608:	2302      	movs	r3, #2
 800460a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800460e:	e112      	b.n	8004836 <UART_SetConfig+0x2e6>
 8004610:	2304      	movs	r3, #4
 8004612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004616:	e10e      	b.n	8004836 <UART_SetConfig+0x2e6>
 8004618:	2308      	movs	r3, #8
 800461a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800461e:	e10a      	b.n	8004836 <UART_SetConfig+0x2e6>
 8004620:	2310      	movs	r3, #16
 8004622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004626:	e106      	b.n	8004836 <UART_SetConfig+0x2e6>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a7c      	ldr	r2, [pc, #496]	; (8004820 <UART_SetConfig+0x2d0>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d138      	bne.n	80046a4 <UART_SetConfig+0x154>
 8004632:	4b7a      	ldr	r3, [pc, #488]	; (800481c <UART_SetConfig+0x2cc>)
 8004634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004638:	f003 030c 	and.w	r3, r3, #12
 800463c:	2b0c      	cmp	r3, #12
 800463e:	d82d      	bhi.n	800469c <UART_SetConfig+0x14c>
 8004640:	a201      	add	r2, pc, #4	; (adr r2, 8004648 <UART_SetConfig+0xf8>)
 8004642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004646:	bf00      	nop
 8004648:	0800467d 	.word	0x0800467d
 800464c:	0800469d 	.word	0x0800469d
 8004650:	0800469d 	.word	0x0800469d
 8004654:	0800469d 	.word	0x0800469d
 8004658:	0800468d 	.word	0x0800468d
 800465c:	0800469d 	.word	0x0800469d
 8004660:	0800469d 	.word	0x0800469d
 8004664:	0800469d 	.word	0x0800469d
 8004668:	08004685 	.word	0x08004685
 800466c:	0800469d 	.word	0x0800469d
 8004670:	0800469d 	.word	0x0800469d
 8004674:	0800469d 	.word	0x0800469d
 8004678:	08004695 	.word	0x08004695
 800467c:	2300      	movs	r3, #0
 800467e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004682:	e0d8      	b.n	8004836 <UART_SetConfig+0x2e6>
 8004684:	2302      	movs	r3, #2
 8004686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800468a:	e0d4      	b.n	8004836 <UART_SetConfig+0x2e6>
 800468c:	2304      	movs	r3, #4
 800468e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004692:	e0d0      	b.n	8004836 <UART_SetConfig+0x2e6>
 8004694:	2308      	movs	r3, #8
 8004696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800469a:	e0cc      	b.n	8004836 <UART_SetConfig+0x2e6>
 800469c:	2310      	movs	r3, #16
 800469e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046a2:	e0c8      	b.n	8004836 <UART_SetConfig+0x2e6>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a5e      	ldr	r2, [pc, #376]	; (8004824 <UART_SetConfig+0x2d4>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d125      	bne.n	80046fa <UART_SetConfig+0x1aa>
 80046ae:	4b5b      	ldr	r3, [pc, #364]	; (800481c <UART_SetConfig+0x2cc>)
 80046b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80046b8:	2b30      	cmp	r3, #48	; 0x30
 80046ba:	d016      	beq.n	80046ea <UART_SetConfig+0x19a>
 80046bc:	2b30      	cmp	r3, #48	; 0x30
 80046be:	d818      	bhi.n	80046f2 <UART_SetConfig+0x1a2>
 80046c0:	2b20      	cmp	r3, #32
 80046c2:	d00a      	beq.n	80046da <UART_SetConfig+0x18a>
 80046c4:	2b20      	cmp	r3, #32
 80046c6:	d814      	bhi.n	80046f2 <UART_SetConfig+0x1a2>
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d002      	beq.n	80046d2 <UART_SetConfig+0x182>
 80046cc:	2b10      	cmp	r3, #16
 80046ce:	d008      	beq.n	80046e2 <UART_SetConfig+0x192>
 80046d0:	e00f      	b.n	80046f2 <UART_SetConfig+0x1a2>
 80046d2:	2300      	movs	r3, #0
 80046d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046d8:	e0ad      	b.n	8004836 <UART_SetConfig+0x2e6>
 80046da:	2302      	movs	r3, #2
 80046dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046e0:	e0a9      	b.n	8004836 <UART_SetConfig+0x2e6>
 80046e2:	2304      	movs	r3, #4
 80046e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046e8:	e0a5      	b.n	8004836 <UART_SetConfig+0x2e6>
 80046ea:	2308      	movs	r3, #8
 80046ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046f0:	e0a1      	b.n	8004836 <UART_SetConfig+0x2e6>
 80046f2:	2310      	movs	r3, #16
 80046f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046f8:	e09d      	b.n	8004836 <UART_SetConfig+0x2e6>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a4a      	ldr	r2, [pc, #296]	; (8004828 <UART_SetConfig+0x2d8>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d125      	bne.n	8004750 <UART_SetConfig+0x200>
 8004704:	4b45      	ldr	r3, [pc, #276]	; (800481c <UART_SetConfig+0x2cc>)
 8004706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800470e:	2bc0      	cmp	r3, #192	; 0xc0
 8004710:	d016      	beq.n	8004740 <UART_SetConfig+0x1f0>
 8004712:	2bc0      	cmp	r3, #192	; 0xc0
 8004714:	d818      	bhi.n	8004748 <UART_SetConfig+0x1f8>
 8004716:	2b80      	cmp	r3, #128	; 0x80
 8004718:	d00a      	beq.n	8004730 <UART_SetConfig+0x1e0>
 800471a:	2b80      	cmp	r3, #128	; 0x80
 800471c:	d814      	bhi.n	8004748 <UART_SetConfig+0x1f8>
 800471e:	2b00      	cmp	r3, #0
 8004720:	d002      	beq.n	8004728 <UART_SetConfig+0x1d8>
 8004722:	2b40      	cmp	r3, #64	; 0x40
 8004724:	d008      	beq.n	8004738 <UART_SetConfig+0x1e8>
 8004726:	e00f      	b.n	8004748 <UART_SetConfig+0x1f8>
 8004728:	2300      	movs	r3, #0
 800472a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800472e:	e082      	b.n	8004836 <UART_SetConfig+0x2e6>
 8004730:	2302      	movs	r3, #2
 8004732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004736:	e07e      	b.n	8004836 <UART_SetConfig+0x2e6>
 8004738:	2304      	movs	r3, #4
 800473a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800473e:	e07a      	b.n	8004836 <UART_SetConfig+0x2e6>
 8004740:	2308      	movs	r3, #8
 8004742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004746:	e076      	b.n	8004836 <UART_SetConfig+0x2e6>
 8004748:	2310      	movs	r3, #16
 800474a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800474e:	e072      	b.n	8004836 <UART_SetConfig+0x2e6>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a35      	ldr	r2, [pc, #212]	; (800482c <UART_SetConfig+0x2dc>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d12a      	bne.n	80047b0 <UART_SetConfig+0x260>
 800475a:	4b30      	ldr	r3, [pc, #192]	; (800481c <UART_SetConfig+0x2cc>)
 800475c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004760:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004764:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004768:	d01a      	beq.n	80047a0 <UART_SetConfig+0x250>
 800476a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800476e:	d81b      	bhi.n	80047a8 <UART_SetConfig+0x258>
 8004770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004774:	d00c      	beq.n	8004790 <UART_SetConfig+0x240>
 8004776:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800477a:	d815      	bhi.n	80047a8 <UART_SetConfig+0x258>
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <UART_SetConfig+0x238>
 8004780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004784:	d008      	beq.n	8004798 <UART_SetConfig+0x248>
 8004786:	e00f      	b.n	80047a8 <UART_SetConfig+0x258>
 8004788:	2300      	movs	r3, #0
 800478a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800478e:	e052      	b.n	8004836 <UART_SetConfig+0x2e6>
 8004790:	2302      	movs	r3, #2
 8004792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004796:	e04e      	b.n	8004836 <UART_SetConfig+0x2e6>
 8004798:	2304      	movs	r3, #4
 800479a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800479e:	e04a      	b.n	8004836 <UART_SetConfig+0x2e6>
 80047a0:	2308      	movs	r3, #8
 80047a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047a6:	e046      	b.n	8004836 <UART_SetConfig+0x2e6>
 80047a8:	2310      	movs	r3, #16
 80047aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ae:	e042      	b.n	8004836 <UART_SetConfig+0x2e6>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a17      	ldr	r2, [pc, #92]	; (8004814 <UART_SetConfig+0x2c4>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d13a      	bne.n	8004830 <UART_SetConfig+0x2e0>
 80047ba:	4b18      	ldr	r3, [pc, #96]	; (800481c <UART_SetConfig+0x2cc>)
 80047bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80047c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047c8:	d01a      	beq.n	8004800 <UART_SetConfig+0x2b0>
 80047ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047ce:	d81b      	bhi.n	8004808 <UART_SetConfig+0x2b8>
 80047d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047d4:	d00c      	beq.n	80047f0 <UART_SetConfig+0x2a0>
 80047d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047da:	d815      	bhi.n	8004808 <UART_SetConfig+0x2b8>
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d003      	beq.n	80047e8 <UART_SetConfig+0x298>
 80047e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047e4:	d008      	beq.n	80047f8 <UART_SetConfig+0x2a8>
 80047e6:	e00f      	b.n	8004808 <UART_SetConfig+0x2b8>
 80047e8:	2300      	movs	r3, #0
 80047ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ee:	e022      	b.n	8004836 <UART_SetConfig+0x2e6>
 80047f0:	2302      	movs	r3, #2
 80047f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047f6:	e01e      	b.n	8004836 <UART_SetConfig+0x2e6>
 80047f8:	2304      	movs	r3, #4
 80047fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047fe:	e01a      	b.n	8004836 <UART_SetConfig+0x2e6>
 8004800:	2308      	movs	r3, #8
 8004802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004806:	e016      	b.n	8004836 <UART_SetConfig+0x2e6>
 8004808:	2310      	movs	r3, #16
 800480a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800480e:	e012      	b.n	8004836 <UART_SetConfig+0x2e6>
 8004810:	efff69f3 	.word	0xefff69f3
 8004814:	40008000 	.word	0x40008000
 8004818:	40013800 	.word	0x40013800
 800481c:	40021000 	.word	0x40021000
 8004820:	40004400 	.word	0x40004400
 8004824:	40004800 	.word	0x40004800
 8004828:	40004c00 	.word	0x40004c00
 800482c:	40005000 	.word	0x40005000
 8004830:	2310      	movs	r3, #16
 8004832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a9f      	ldr	r2, [pc, #636]	; (8004ab8 <UART_SetConfig+0x568>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d17a      	bne.n	8004936 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004840:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004844:	2b08      	cmp	r3, #8
 8004846:	d824      	bhi.n	8004892 <UART_SetConfig+0x342>
 8004848:	a201      	add	r2, pc, #4	; (adr r2, 8004850 <UART_SetConfig+0x300>)
 800484a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484e:	bf00      	nop
 8004850:	08004875 	.word	0x08004875
 8004854:	08004893 	.word	0x08004893
 8004858:	0800487d 	.word	0x0800487d
 800485c:	08004893 	.word	0x08004893
 8004860:	08004883 	.word	0x08004883
 8004864:	08004893 	.word	0x08004893
 8004868:	08004893 	.word	0x08004893
 800486c:	08004893 	.word	0x08004893
 8004870:	0800488b 	.word	0x0800488b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004874:	f7ff f8d6 	bl	8003a24 <HAL_RCC_GetPCLK1Freq>
 8004878:	61f8      	str	r0, [r7, #28]
        break;
 800487a:	e010      	b.n	800489e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800487c:	4b8f      	ldr	r3, [pc, #572]	; (8004abc <UART_SetConfig+0x56c>)
 800487e:	61fb      	str	r3, [r7, #28]
        break;
 8004880:	e00d      	b.n	800489e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004882:	f7ff f837 	bl	80038f4 <HAL_RCC_GetSysClockFreq>
 8004886:	61f8      	str	r0, [r7, #28]
        break;
 8004888:	e009      	b.n	800489e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800488a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800488e:	61fb      	str	r3, [r7, #28]
        break;
 8004890:	e005      	b.n	800489e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004892:	2300      	movs	r3, #0
 8004894:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800489c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 80fb 	beq.w	8004a9c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	4613      	mov	r3, r2
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	4413      	add	r3, r2
 80048b0:	69fa      	ldr	r2, [r7, #28]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d305      	bcc.n	80048c2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048bc:	69fa      	ldr	r2, [r7, #28]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d903      	bls.n	80048ca <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80048c8:	e0e8      	b.n	8004a9c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	2200      	movs	r2, #0
 80048ce:	461c      	mov	r4, r3
 80048d0:	4615      	mov	r5, r2
 80048d2:	f04f 0200 	mov.w	r2, #0
 80048d6:	f04f 0300 	mov.w	r3, #0
 80048da:	022b      	lsls	r3, r5, #8
 80048dc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80048e0:	0222      	lsls	r2, r4, #8
 80048e2:	68f9      	ldr	r1, [r7, #12]
 80048e4:	6849      	ldr	r1, [r1, #4]
 80048e6:	0849      	lsrs	r1, r1, #1
 80048e8:	2000      	movs	r0, #0
 80048ea:	4688      	mov	r8, r1
 80048ec:	4681      	mov	r9, r0
 80048ee:	eb12 0a08 	adds.w	sl, r2, r8
 80048f2:	eb43 0b09 	adc.w	fp, r3, r9
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	603b      	str	r3, [r7, #0]
 80048fe:	607a      	str	r2, [r7, #4]
 8004900:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004904:	4650      	mov	r0, sl
 8004906:	4659      	mov	r1, fp
 8004908:	f7fc f8ea 	bl	8000ae0 <__aeabi_uldivmod>
 800490c:	4602      	mov	r2, r0
 800490e:	460b      	mov	r3, r1
 8004910:	4613      	mov	r3, r2
 8004912:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800491a:	d308      	bcc.n	800492e <UART_SetConfig+0x3de>
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004922:	d204      	bcs.n	800492e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	60da      	str	r2, [r3, #12]
 800492c:	e0b6      	b.n	8004a9c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004934:	e0b2      	b.n	8004a9c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800493e:	d15e      	bne.n	80049fe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004940:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004944:	2b08      	cmp	r3, #8
 8004946:	d828      	bhi.n	800499a <UART_SetConfig+0x44a>
 8004948:	a201      	add	r2, pc, #4	; (adr r2, 8004950 <UART_SetConfig+0x400>)
 800494a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494e:	bf00      	nop
 8004950:	08004975 	.word	0x08004975
 8004954:	0800497d 	.word	0x0800497d
 8004958:	08004985 	.word	0x08004985
 800495c:	0800499b 	.word	0x0800499b
 8004960:	0800498b 	.word	0x0800498b
 8004964:	0800499b 	.word	0x0800499b
 8004968:	0800499b 	.word	0x0800499b
 800496c:	0800499b 	.word	0x0800499b
 8004970:	08004993 	.word	0x08004993
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004974:	f7ff f856 	bl	8003a24 <HAL_RCC_GetPCLK1Freq>
 8004978:	61f8      	str	r0, [r7, #28]
        break;
 800497a:	e014      	b.n	80049a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800497c:	f7ff f868 	bl	8003a50 <HAL_RCC_GetPCLK2Freq>
 8004980:	61f8      	str	r0, [r7, #28]
        break;
 8004982:	e010      	b.n	80049a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004984:	4b4d      	ldr	r3, [pc, #308]	; (8004abc <UART_SetConfig+0x56c>)
 8004986:	61fb      	str	r3, [r7, #28]
        break;
 8004988:	e00d      	b.n	80049a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800498a:	f7fe ffb3 	bl	80038f4 <HAL_RCC_GetSysClockFreq>
 800498e:	61f8      	str	r0, [r7, #28]
        break;
 8004990:	e009      	b.n	80049a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004996:	61fb      	str	r3, [r7, #28]
        break;
 8004998:	e005      	b.n	80049a6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800499a:	2300      	movs	r3, #0
 800499c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80049a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d077      	beq.n	8004a9c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	005a      	lsls	r2, r3, #1
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	085b      	lsrs	r3, r3, #1
 80049b6:	441a      	add	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	2b0f      	cmp	r3, #15
 80049c6:	d916      	bls.n	80049f6 <UART_SetConfig+0x4a6>
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ce:	d212      	bcs.n	80049f6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	f023 030f 	bic.w	r3, r3, #15
 80049d8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	085b      	lsrs	r3, r3, #1
 80049de:	b29b      	uxth	r3, r3
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	8afb      	ldrh	r3, [r7, #22]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	8afa      	ldrh	r2, [r7, #22]
 80049f2:	60da      	str	r2, [r3, #12]
 80049f4:	e052      	b.n	8004a9c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80049fc:	e04e      	b.n	8004a9c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a02:	2b08      	cmp	r3, #8
 8004a04:	d827      	bhi.n	8004a56 <UART_SetConfig+0x506>
 8004a06:	a201      	add	r2, pc, #4	; (adr r2, 8004a0c <UART_SetConfig+0x4bc>)
 8004a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0c:	08004a31 	.word	0x08004a31
 8004a10:	08004a39 	.word	0x08004a39
 8004a14:	08004a41 	.word	0x08004a41
 8004a18:	08004a57 	.word	0x08004a57
 8004a1c:	08004a47 	.word	0x08004a47
 8004a20:	08004a57 	.word	0x08004a57
 8004a24:	08004a57 	.word	0x08004a57
 8004a28:	08004a57 	.word	0x08004a57
 8004a2c:	08004a4f 	.word	0x08004a4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a30:	f7fe fff8 	bl	8003a24 <HAL_RCC_GetPCLK1Freq>
 8004a34:	61f8      	str	r0, [r7, #28]
        break;
 8004a36:	e014      	b.n	8004a62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a38:	f7ff f80a 	bl	8003a50 <HAL_RCC_GetPCLK2Freq>
 8004a3c:	61f8      	str	r0, [r7, #28]
        break;
 8004a3e:	e010      	b.n	8004a62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a40:	4b1e      	ldr	r3, [pc, #120]	; (8004abc <UART_SetConfig+0x56c>)
 8004a42:	61fb      	str	r3, [r7, #28]
        break;
 8004a44:	e00d      	b.n	8004a62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a46:	f7fe ff55 	bl	80038f4 <HAL_RCC_GetSysClockFreq>
 8004a4a:	61f8      	str	r0, [r7, #28]
        break;
 8004a4c:	e009      	b.n	8004a62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a52:	61fb      	str	r3, [r7, #28]
        break;
 8004a54:	e005      	b.n	8004a62 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004a56:	2300      	movs	r3, #0
 8004a58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a60:	bf00      	nop
    }

    if (pclk != 0U)
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d019      	beq.n	8004a9c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	085a      	lsrs	r2, r3, #1
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	441a      	add	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	2b0f      	cmp	r3, #15
 8004a80:	d909      	bls.n	8004a96 <UART_SetConfig+0x546>
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a88:	d205      	bcs.n	8004a96 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	60da      	str	r2, [r3, #12]
 8004a94:	e002      	b.n	8004a9c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004aa8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3728      	adds	r7, #40	; 0x28
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ab6:	bf00      	nop
 8004ab8:	40008000 	.word	0x40008000
 8004abc:	00f42400 	.word	0x00f42400

08004ac0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00a      	beq.n	8004aea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00a      	beq.n	8004b0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	f003 0304 	and.w	r3, r3, #4
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00a      	beq.n	8004b2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	f003 0308 	and.w	r3, r3, #8
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	f003 0310 	and.w	r3, r3, #16
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00a      	beq.n	8004b72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b76:	f003 0320 	and.w	r3, r3, #32
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00a      	beq.n	8004b94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d01a      	beq.n	8004bd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bbe:	d10a      	bne.n	8004bd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00a      	beq.n	8004bf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	605a      	str	r2, [r3, #4]
  }
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af02      	add	r7, sp, #8
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c14:	f7fd fe3e 	bl	8002894 <HAL_GetTick>
 8004c18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0308 	and.w	r3, r3, #8
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d10e      	bne.n	8004c46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f82d 	bl	8004c96 <UART_WaitOnFlagUntilTimeout>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e023      	b.n	8004c8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0304 	and.w	r3, r3, #4
 8004c50:	2b04      	cmp	r3, #4
 8004c52:	d10e      	bne.n	8004c72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f817 	bl	8004c96 <UART_WaitOnFlagUntilTimeout>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e00d      	b.n	8004c8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2220      	movs	r2, #32
 8004c76:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b09c      	sub	sp, #112	; 0x70
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	60f8      	str	r0, [r7, #12]
 8004c9e:	60b9      	str	r1, [r7, #8]
 8004ca0:	603b      	str	r3, [r7, #0]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ca6:	e0a5      	b.n	8004df4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ca8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cae:	f000 80a1 	beq.w	8004df4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cb2:	f7fd fdef 	bl	8002894 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d302      	bcc.n	8004cc8 <UART_WaitOnFlagUntilTimeout+0x32>
 8004cc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d13e      	bne.n	8004d46 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cd0:	e853 3f00 	ldrex	r3, [r3]
 8004cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004cd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cdc:	667b      	str	r3, [r7, #100]	; 0x64
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ce6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ce8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004cec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cee:	e841 2300 	strex	r3, r2, [r1]
 8004cf2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1e6      	bne.n	8004cc8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	3308      	adds	r3, #8
 8004d00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d04:	e853 3f00 	ldrex	r3, [r3]
 8004d08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0c:	f023 0301 	bic.w	r3, r3, #1
 8004d10:	663b      	str	r3, [r7, #96]	; 0x60
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	3308      	adds	r3, #8
 8004d18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d1a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d22:	e841 2300 	strex	r3, r2, [r1]
 8004d26:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1e5      	bne.n	8004cfa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2220      	movs	r2, #32
 8004d32:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2220      	movs	r2, #32
 8004d38:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e067      	b.n	8004e16 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0304 	and.w	r3, r3, #4
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d04f      	beq.n	8004df4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	69db      	ldr	r3, [r3, #28]
 8004d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d62:	d147      	bne.n	8004df4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d6c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d76:	e853 3f00 	ldrex	r3, [r3]
 8004d7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	461a      	mov	r2, r3
 8004d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d8e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d94:	e841 2300 	strex	r3, r2, [r1]
 8004d98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1e6      	bne.n	8004d6e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	3308      	adds	r3, #8
 8004da6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	e853 3f00 	ldrex	r3, [r3]
 8004dae:	613b      	str	r3, [r7, #16]
   return(result);
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	f023 0301 	bic.w	r3, r3, #1
 8004db6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3308      	adds	r3, #8
 8004dbe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004dc0:	623a      	str	r2, [r7, #32]
 8004dc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc4:	69f9      	ldr	r1, [r7, #28]
 8004dc6:	6a3a      	ldr	r2, [r7, #32]
 8004dc8:	e841 2300 	strex	r3, r2, [r1]
 8004dcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1e5      	bne.n	8004da0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2220      	movs	r2, #32
 8004de4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e010      	b.n	8004e16 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	69da      	ldr	r2, [r3, #28]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	bf0c      	ite	eq
 8004e04:	2301      	moveq	r3, #1
 8004e06:	2300      	movne	r3, #0
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	79fb      	ldrb	r3, [r7, #7]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	f43f af4a 	beq.w	8004ca8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3770      	adds	r7, #112	; 0x70
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
	...

08004e20 <__errno>:
 8004e20:	4b01      	ldr	r3, [pc, #4]	; (8004e28 <__errno+0x8>)
 8004e22:	6818      	ldr	r0, [r3, #0]
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	2000000c 	.word	0x2000000c

08004e2c <__libc_init_array>:
 8004e2c:	b570      	push	{r4, r5, r6, lr}
 8004e2e:	4d0d      	ldr	r5, [pc, #52]	; (8004e64 <__libc_init_array+0x38>)
 8004e30:	4c0d      	ldr	r4, [pc, #52]	; (8004e68 <__libc_init_array+0x3c>)
 8004e32:	1b64      	subs	r4, r4, r5
 8004e34:	10a4      	asrs	r4, r4, #2
 8004e36:	2600      	movs	r6, #0
 8004e38:	42a6      	cmp	r6, r4
 8004e3a:	d109      	bne.n	8004e50 <__libc_init_array+0x24>
 8004e3c:	4d0b      	ldr	r5, [pc, #44]	; (8004e6c <__libc_init_array+0x40>)
 8004e3e:	4c0c      	ldr	r4, [pc, #48]	; (8004e70 <__libc_init_array+0x44>)
 8004e40:	f000 ff3c 	bl	8005cbc <_init>
 8004e44:	1b64      	subs	r4, r4, r5
 8004e46:	10a4      	asrs	r4, r4, #2
 8004e48:	2600      	movs	r6, #0
 8004e4a:	42a6      	cmp	r6, r4
 8004e4c:	d105      	bne.n	8004e5a <__libc_init_array+0x2e>
 8004e4e:	bd70      	pop	{r4, r5, r6, pc}
 8004e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e54:	4798      	blx	r3
 8004e56:	3601      	adds	r6, #1
 8004e58:	e7ee      	b.n	8004e38 <__libc_init_array+0xc>
 8004e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e5e:	4798      	blx	r3
 8004e60:	3601      	adds	r6, #1
 8004e62:	e7f2      	b.n	8004e4a <__libc_init_array+0x1e>
 8004e64:	08005d98 	.word	0x08005d98
 8004e68:	08005d98 	.word	0x08005d98
 8004e6c:	08005d98 	.word	0x08005d98
 8004e70:	08005d9c 	.word	0x08005d9c

08004e74 <memset>:
 8004e74:	4402      	add	r2, r0
 8004e76:	4603      	mov	r3, r0
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d100      	bne.n	8004e7e <memset+0xa>
 8004e7c:	4770      	bx	lr
 8004e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e82:	e7f9      	b.n	8004e78 <memset+0x4>

08004e84 <pow>:
 8004e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e86:	ed2d 8b02 	vpush	{d8}
 8004e8a:	eeb0 8a40 	vmov.f32	s16, s0
 8004e8e:	eef0 8a60 	vmov.f32	s17, s1
 8004e92:	ec55 4b11 	vmov	r4, r5, d1
 8004e96:	f000 f867 	bl	8004f68 <__ieee754_pow>
 8004e9a:	4622      	mov	r2, r4
 8004e9c:	462b      	mov	r3, r5
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	4629      	mov	r1, r5
 8004ea2:	ec57 6b10 	vmov	r6, r7, d0
 8004ea6:	f7fb fde5 	bl	8000a74 <__aeabi_dcmpun>
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	d13b      	bne.n	8004f26 <pow+0xa2>
 8004eae:	ec51 0b18 	vmov	r0, r1, d8
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	f7fb fdab 	bl	8000a10 <__aeabi_dcmpeq>
 8004eba:	b1b8      	cbz	r0, 8004eec <pow+0x68>
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	4629      	mov	r1, r5
 8004ec4:	f7fb fda4 	bl	8000a10 <__aeabi_dcmpeq>
 8004ec8:	2800      	cmp	r0, #0
 8004eca:	d146      	bne.n	8004f5a <pow+0xd6>
 8004ecc:	ec45 4b10 	vmov	d0, r4, r5
 8004ed0:	f000 fe63 	bl	8005b9a <finite>
 8004ed4:	b338      	cbz	r0, 8004f26 <pow+0xa2>
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	2300      	movs	r3, #0
 8004eda:	4620      	mov	r0, r4
 8004edc:	4629      	mov	r1, r5
 8004ede:	f7fb fda1 	bl	8000a24 <__aeabi_dcmplt>
 8004ee2:	b300      	cbz	r0, 8004f26 <pow+0xa2>
 8004ee4:	f7ff ff9c 	bl	8004e20 <__errno>
 8004ee8:	2322      	movs	r3, #34	; 0x22
 8004eea:	e01b      	b.n	8004f24 <pow+0xa0>
 8004eec:	ec47 6b10 	vmov	d0, r6, r7
 8004ef0:	f000 fe53 	bl	8005b9a <finite>
 8004ef4:	b9e0      	cbnz	r0, 8004f30 <pow+0xac>
 8004ef6:	eeb0 0a48 	vmov.f32	s0, s16
 8004efa:	eef0 0a68 	vmov.f32	s1, s17
 8004efe:	f000 fe4c 	bl	8005b9a <finite>
 8004f02:	b1a8      	cbz	r0, 8004f30 <pow+0xac>
 8004f04:	ec45 4b10 	vmov	d0, r4, r5
 8004f08:	f000 fe47 	bl	8005b9a <finite>
 8004f0c:	b180      	cbz	r0, 8004f30 <pow+0xac>
 8004f0e:	4632      	mov	r2, r6
 8004f10:	463b      	mov	r3, r7
 8004f12:	4630      	mov	r0, r6
 8004f14:	4639      	mov	r1, r7
 8004f16:	f7fb fdad 	bl	8000a74 <__aeabi_dcmpun>
 8004f1a:	2800      	cmp	r0, #0
 8004f1c:	d0e2      	beq.n	8004ee4 <pow+0x60>
 8004f1e:	f7ff ff7f 	bl	8004e20 <__errno>
 8004f22:	2321      	movs	r3, #33	; 0x21
 8004f24:	6003      	str	r3, [r0, #0]
 8004f26:	ecbd 8b02 	vpop	{d8}
 8004f2a:	ec47 6b10 	vmov	d0, r6, r7
 8004f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f30:	2200      	movs	r2, #0
 8004f32:	2300      	movs	r3, #0
 8004f34:	4630      	mov	r0, r6
 8004f36:	4639      	mov	r1, r7
 8004f38:	f7fb fd6a 	bl	8000a10 <__aeabi_dcmpeq>
 8004f3c:	2800      	cmp	r0, #0
 8004f3e:	d0f2      	beq.n	8004f26 <pow+0xa2>
 8004f40:	eeb0 0a48 	vmov.f32	s0, s16
 8004f44:	eef0 0a68 	vmov.f32	s1, s17
 8004f48:	f000 fe27 	bl	8005b9a <finite>
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	d0ea      	beq.n	8004f26 <pow+0xa2>
 8004f50:	ec45 4b10 	vmov	d0, r4, r5
 8004f54:	f000 fe21 	bl	8005b9a <finite>
 8004f58:	e7c3      	b.n	8004ee2 <pow+0x5e>
 8004f5a:	4f01      	ldr	r7, [pc, #4]	; (8004f60 <pow+0xdc>)
 8004f5c:	2600      	movs	r6, #0
 8004f5e:	e7e2      	b.n	8004f26 <pow+0xa2>
 8004f60:	3ff00000 	.word	0x3ff00000
 8004f64:	00000000 	.word	0x00000000

08004f68 <__ieee754_pow>:
 8004f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f6c:	ed2d 8b06 	vpush	{d8-d10}
 8004f70:	b089      	sub	sp, #36	; 0x24
 8004f72:	ed8d 1b00 	vstr	d1, [sp]
 8004f76:	e9dd 2900 	ldrd	r2, r9, [sp]
 8004f7a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8004f7e:	ea58 0102 	orrs.w	r1, r8, r2
 8004f82:	ec57 6b10 	vmov	r6, r7, d0
 8004f86:	d115      	bne.n	8004fb4 <__ieee754_pow+0x4c>
 8004f88:	19b3      	adds	r3, r6, r6
 8004f8a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8004f8e:	4152      	adcs	r2, r2
 8004f90:	4299      	cmp	r1, r3
 8004f92:	4b89      	ldr	r3, [pc, #548]	; (80051b8 <__ieee754_pow+0x250>)
 8004f94:	4193      	sbcs	r3, r2
 8004f96:	f080 84d2 	bcs.w	800593e <__ieee754_pow+0x9d6>
 8004f9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f9e:	4630      	mov	r0, r6
 8004fa0:	4639      	mov	r1, r7
 8004fa2:	f7fb f917 	bl	80001d4 <__adddf3>
 8004fa6:	ec41 0b10 	vmov	d0, r0, r1
 8004faa:	b009      	add	sp, #36	; 0x24
 8004fac:	ecbd 8b06 	vpop	{d8-d10}
 8004fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fb4:	4b81      	ldr	r3, [pc, #516]	; (80051bc <__ieee754_pow+0x254>)
 8004fb6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8004fba:	429c      	cmp	r4, r3
 8004fbc:	ee10 aa10 	vmov	sl, s0
 8004fc0:	463d      	mov	r5, r7
 8004fc2:	dc06      	bgt.n	8004fd2 <__ieee754_pow+0x6a>
 8004fc4:	d101      	bne.n	8004fca <__ieee754_pow+0x62>
 8004fc6:	2e00      	cmp	r6, #0
 8004fc8:	d1e7      	bne.n	8004f9a <__ieee754_pow+0x32>
 8004fca:	4598      	cmp	r8, r3
 8004fcc:	dc01      	bgt.n	8004fd2 <__ieee754_pow+0x6a>
 8004fce:	d10f      	bne.n	8004ff0 <__ieee754_pow+0x88>
 8004fd0:	b172      	cbz	r2, 8004ff0 <__ieee754_pow+0x88>
 8004fd2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8004fd6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8004fda:	ea55 050a 	orrs.w	r5, r5, sl
 8004fde:	d1dc      	bne.n	8004f9a <__ieee754_pow+0x32>
 8004fe0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004fe4:	18db      	adds	r3, r3, r3
 8004fe6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8004fea:	4152      	adcs	r2, r2
 8004fec:	429d      	cmp	r5, r3
 8004fee:	e7d0      	b.n	8004f92 <__ieee754_pow+0x2a>
 8004ff0:	2d00      	cmp	r5, #0
 8004ff2:	da3b      	bge.n	800506c <__ieee754_pow+0x104>
 8004ff4:	4b72      	ldr	r3, [pc, #456]	; (80051c0 <__ieee754_pow+0x258>)
 8004ff6:	4598      	cmp	r8, r3
 8004ff8:	dc51      	bgt.n	800509e <__ieee754_pow+0x136>
 8004ffa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004ffe:	4598      	cmp	r8, r3
 8005000:	f340 84ac 	ble.w	800595c <__ieee754_pow+0x9f4>
 8005004:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005008:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800500c:	2b14      	cmp	r3, #20
 800500e:	dd0f      	ble.n	8005030 <__ieee754_pow+0xc8>
 8005010:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005014:	fa22 f103 	lsr.w	r1, r2, r3
 8005018:	fa01 f303 	lsl.w	r3, r1, r3
 800501c:	4293      	cmp	r3, r2
 800501e:	f040 849d 	bne.w	800595c <__ieee754_pow+0x9f4>
 8005022:	f001 0101 	and.w	r1, r1, #1
 8005026:	f1c1 0302 	rsb	r3, r1, #2
 800502a:	9304      	str	r3, [sp, #16]
 800502c:	b182      	cbz	r2, 8005050 <__ieee754_pow+0xe8>
 800502e:	e05f      	b.n	80050f0 <__ieee754_pow+0x188>
 8005030:	2a00      	cmp	r2, #0
 8005032:	d15b      	bne.n	80050ec <__ieee754_pow+0x184>
 8005034:	f1c3 0314 	rsb	r3, r3, #20
 8005038:	fa48 f103 	asr.w	r1, r8, r3
 800503c:	fa01 f303 	lsl.w	r3, r1, r3
 8005040:	4543      	cmp	r3, r8
 8005042:	f040 8488 	bne.w	8005956 <__ieee754_pow+0x9ee>
 8005046:	f001 0101 	and.w	r1, r1, #1
 800504a:	f1c1 0302 	rsb	r3, r1, #2
 800504e:	9304      	str	r3, [sp, #16]
 8005050:	4b5c      	ldr	r3, [pc, #368]	; (80051c4 <__ieee754_pow+0x25c>)
 8005052:	4598      	cmp	r8, r3
 8005054:	d132      	bne.n	80050bc <__ieee754_pow+0x154>
 8005056:	f1b9 0f00 	cmp.w	r9, #0
 800505a:	f280 8478 	bge.w	800594e <__ieee754_pow+0x9e6>
 800505e:	4959      	ldr	r1, [pc, #356]	; (80051c4 <__ieee754_pow+0x25c>)
 8005060:	4632      	mov	r2, r6
 8005062:	463b      	mov	r3, r7
 8005064:	2000      	movs	r0, #0
 8005066:	f7fb fb95 	bl	8000794 <__aeabi_ddiv>
 800506a:	e79c      	b.n	8004fa6 <__ieee754_pow+0x3e>
 800506c:	2300      	movs	r3, #0
 800506e:	9304      	str	r3, [sp, #16]
 8005070:	2a00      	cmp	r2, #0
 8005072:	d13d      	bne.n	80050f0 <__ieee754_pow+0x188>
 8005074:	4b51      	ldr	r3, [pc, #324]	; (80051bc <__ieee754_pow+0x254>)
 8005076:	4598      	cmp	r8, r3
 8005078:	d1ea      	bne.n	8005050 <__ieee754_pow+0xe8>
 800507a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800507e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005082:	ea53 030a 	orrs.w	r3, r3, sl
 8005086:	f000 845a 	beq.w	800593e <__ieee754_pow+0x9d6>
 800508a:	4b4f      	ldr	r3, [pc, #316]	; (80051c8 <__ieee754_pow+0x260>)
 800508c:	429c      	cmp	r4, r3
 800508e:	dd08      	ble.n	80050a2 <__ieee754_pow+0x13a>
 8005090:	f1b9 0f00 	cmp.w	r9, #0
 8005094:	f2c0 8457 	blt.w	8005946 <__ieee754_pow+0x9de>
 8005098:	e9dd 0100 	ldrd	r0, r1, [sp]
 800509c:	e783      	b.n	8004fa6 <__ieee754_pow+0x3e>
 800509e:	2302      	movs	r3, #2
 80050a0:	e7e5      	b.n	800506e <__ieee754_pow+0x106>
 80050a2:	f1b9 0f00 	cmp.w	r9, #0
 80050a6:	f04f 0000 	mov.w	r0, #0
 80050aa:	f04f 0100 	mov.w	r1, #0
 80050ae:	f6bf af7a 	bge.w	8004fa6 <__ieee754_pow+0x3e>
 80050b2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80050b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80050ba:	e774      	b.n	8004fa6 <__ieee754_pow+0x3e>
 80050bc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80050c0:	d106      	bne.n	80050d0 <__ieee754_pow+0x168>
 80050c2:	4632      	mov	r2, r6
 80050c4:	463b      	mov	r3, r7
 80050c6:	4630      	mov	r0, r6
 80050c8:	4639      	mov	r1, r7
 80050ca:	f7fb fa39 	bl	8000540 <__aeabi_dmul>
 80050ce:	e76a      	b.n	8004fa6 <__ieee754_pow+0x3e>
 80050d0:	4b3e      	ldr	r3, [pc, #248]	; (80051cc <__ieee754_pow+0x264>)
 80050d2:	4599      	cmp	r9, r3
 80050d4:	d10c      	bne.n	80050f0 <__ieee754_pow+0x188>
 80050d6:	2d00      	cmp	r5, #0
 80050d8:	db0a      	blt.n	80050f0 <__ieee754_pow+0x188>
 80050da:	ec47 6b10 	vmov	d0, r6, r7
 80050de:	b009      	add	sp, #36	; 0x24
 80050e0:	ecbd 8b06 	vpop	{d8-d10}
 80050e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050e8:	f000 bc6c 	b.w	80059c4 <__ieee754_sqrt>
 80050ec:	2300      	movs	r3, #0
 80050ee:	9304      	str	r3, [sp, #16]
 80050f0:	ec47 6b10 	vmov	d0, r6, r7
 80050f4:	f000 fd48 	bl	8005b88 <fabs>
 80050f8:	ec51 0b10 	vmov	r0, r1, d0
 80050fc:	f1ba 0f00 	cmp.w	sl, #0
 8005100:	d129      	bne.n	8005156 <__ieee754_pow+0x1ee>
 8005102:	b124      	cbz	r4, 800510e <__ieee754_pow+0x1a6>
 8005104:	4b2f      	ldr	r3, [pc, #188]	; (80051c4 <__ieee754_pow+0x25c>)
 8005106:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800510a:	429a      	cmp	r2, r3
 800510c:	d123      	bne.n	8005156 <__ieee754_pow+0x1ee>
 800510e:	f1b9 0f00 	cmp.w	r9, #0
 8005112:	da05      	bge.n	8005120 <__ieee754_pow+0x1b8>
 8005114:	4602      	mov	r2, r0
 8005116:	460b      	mov	r3, r1
 8005118:	2000      	movs	r0, #0
 800511a:	492a      	ldr	r1, [pc, #168]	; (80051c4 <__ieee754_pow+0x25c>)
 800511c:	f7fb fb3a 	bl	8000794 <__aeabi_ddiv>
 8005120:	2d00      	cmp	r5, #0
 8005122:	f6bf af40 	bge.w	8004fa6 <__ieee754_pow+0x3e>
 8005126:	9b04      	ldr	r3, [sp, #16]
 8005128:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800512c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005130:	4323      	orrs	r3, r4
 8005132:	d108      	bne.n	8005146 <__ieee754_pow+0x1de>
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	4610      	mov	r0, r2
 800513a:	4619      	mov	r1, r3
 800513c:	f7fb f848 	bl	80001d0 <__aeabi_dsub>
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	e78f      	b.n	8005066 <__ieee754_pow+0xfe>
 8005146:	9b04      	ldr	r3, [sp, #16]
 8005148:	2b01      	cmp	r3, #1
 800514a:	f47f af2c 	bne.w	8004fa6 <__ieee754_pow+0x3e>
 800514e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005152:	4619      	mov	r1, r3
 8005154:	e727      	b.n	8004fa6 <__ieee754_pow+0x3e>
 8005156:	0feb      	lsrs	r3, r5, #31
 8005158:	3b01      	subs	r3, #1
 800515a:	9306      	str	r3, [sp, #24]
 800515c:	9a06      	ldr	r2, [sp, #24]
 800515e:	9b04      	ldr	r3, [sp, #16]
 8005160:	4313      	orrs	r3, r2
 8005162:	d102      	bne.n	800516a <__ieee754_pow+0x202>
 8005164:	4632      	mov	r2, r6
 8005166:	463b      	mov	r3, r7
 8005168:	e7e6      	b.n	8005138 <__ieee754_pow+0x1d0>
 800516a:	4b19      	ldr	r3, [pc, #100]	; (80051d0 <__ieee754_pow+0x268>)
 800516c:	4598      	cmp	r8, r3
 800516e:	f340 80fb 	ble.w	8005368 <__ieee754_pow+0x400>
 8005172:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005176:	4598      	cmp	r8, r3
 8005178:	4b13      	ldr	r3, [pc, #76]	; (80051c8 <__ieee754_pow+0x260>)
 800517a:	dd0c      	ble.n	8005196 <__ieee754_pow+0x22e>
 800517c:	429c      	cmp	r4, r3
 800517e:	dc0f      	bgt.n	80051a0 <__ieee754_pow+0x238>
 8005180:	f1b9 0f00 	cmp.w	r9, #0
 8005184:	da0f      	bge.n	80051a6 <__ieee754_pow+0x23e>
 8005186:	2000      	movs	r0, #0
 8005188:	b009      	add	sp, #36	; 0x24
 800518a:	ecbd 8b06 	vpop	{d8-d10}
 800518e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005192:	f000 bcf0 	b.w	8005b76 <__math_oflow>
 8005196:	429c      	cmp	r4, r3
 8005198:	dbf2      	blt.n	8005180 <__ieee754_pow+0x218>
 800519a:	4b0a      	ldr	r3, [pc, #40]	; (80051c4 <__ieee754_pow+0x25c>)
 800519c:	429c      	cmp	r4, r3
 800519e:	dd19      	ble.n	80051d4 <__ieee754_pow+0x26c>
 80051a0:	f1b9 0f00 	cmp.w	r9, #0
 80051a4:	dcef      	bgt.n	8005186 <__ieee754_pow+0x21e>
 80051a6:	2000      	movs	r0, #0
 80051a8:	b009      	add	sp, #36	; 0x24
 80051aa:	ecbd 8b06 	vpop	{d8-d10}
 80051ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b2:	f000 bcd7 	b.w	8005b64 <__math_uflow>
 80051b6:	bf00      	nop
 80051b8:	fff00000 	.word	0xfff00000
 80051bc:	7ff00000 	.word	0x7ff00000
 80051c0:	433fffff 	.word	0x433fffff
 80051c4:	3ff00000 	.word	0x3ff00000
 80051c8:	3fefffff 	.word	0x3fefffff
 80051cc:	3fe00000 	.word	0x3fe00000
 80051d0:	41e00000 	.word	0x41e00000
 80051d4:	4b60      	ldr	r3, [pc, #384]	; (8005358 <__ieee754_pow+0x3f0>)
 80051d6:	2200      	movs	r2, #0
 80051d8:	f7fa fffa 	bl	80001d0 <__aeabi_dsub>
 80051dc:	a354      	add	r3, pc, #336	; (adr r3, 8005330 <__ieee754_pow+0x3c8>)
 80051de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e2:	4604      	mov	r4, r0
 80051e4:	460d      	mov	r5, r1
 80051e6:	f7fb f9ab 	bl	8000540 <__aeabi_dmul>
 80051ea:	a353      	add	r3, pc, #332	; (adr r3, 8005338 <__ieee754_pow+0x3d0>)
 80051ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f0:	4606      	mov	r6, r0
 80051f2:	460f      	mov	r7, r1
 80051f4:	4620      	mov	r0, r4
 80051f6:	4629      	mov	r1, r5
 80051f8:	f7fb f9a2 	bl	8000540 <__aeabi_dmul>
 80051fc:	4b57      	ldr	r3, [pc, #348]	; (800535c <__ieee754_pow+0x3f4>)
 80051fe:	4682      	mov	sl, r0
 8005200:	468b      	mov	fp, r1
 8005202:	2200      	movs	r2, #0
 8005204:	4620      	mov	r0, r4
 8005206:	4629      	mov	r1, r5
 8005208:	f7fb f99a 	bl	8000540 <__aeabi_dmul>
 800520c:	4602      	mov	r2, r0
 800520e:	460b      	mov	r3, r1
 8005210:	a14b      	add	r1, pc, #300	; (adr r1, 8005340 <__ieee754_pow+0x3d8>)
 8005212:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005216:	f7fa ffdb 	bl	80001d0 <__aeabi_dsub>
 800521a:	4622      	mov	r2, r4
 800521c:	462b      	mov	r3, r5
 800521e:	f7fb f98f 	bl	8000540 <__aeabi_dmul>
 8005222:	4602      	mov	r2, r0
 8005224:	460b      	mov	r3, r1
 8005226:	2000      	movs	r0, #0
 8005228:	494d      	ldr	r1, [pc, #308]	; (8005360 <__ieee754_pow+0x3f8>)
 800522a:	f7fa ffd1 	bl	80001d0 <__aeabi_dsub>
 800522e:	4622      	mov	r2, r4
 8005230:	4680      	mov	r8, r0
 8005232:	4689      	mov	r9, r1
 8005234:	462b      	mov	r3, r5
 8005236:	4620      	mov	r0, r4
 8005238:	4629      	mov	r1, r5
 800523a:	f7fb f981 	bl	8000540 <__aeabi_dmul>
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	4640      	mov	r0, r8
 8005244:	4649      	mov	r1, r9
 8005246:	f7fb f97b 	bl	8000540 <__aeabi_dmul>
 800524a:	a33f      	add	r3, pc, #252	; (adr r3, 8005348 <__ieee754_pow+0x3e0>)
 800524c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005250:	f7fb f976 	bl	8000540 <__aeabi_dmul>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	4650      	mov	r0, sl
 800525a:	4659      	mov	r1, fp
 800525c:	f7fa ffb8 	bl	80001d0 <__aeabi_dsub>
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	4680      	mov	r8, r0
 8005266:	4689      	mov	r9, r1
 8005268:	4630      	mov	r0, r6
 800526a:	4639      	mov	r1, r7
 800526c:	f7fa ffb2 	bl	80001d4 <__adddf3>
 8005270:	2000      	movs	r0, #0
 8005272:	4632      	mov	r2, r6
 8005274:	463b      	mov	r3, r7
 8005276:	4604      	mov	r4, r0
 8005278:	460d      	mov	r5, r1
 800527a:	f7fa ffa9 	bl	80001d0 <__aeabi_dsub>
 800527e:	4602      	mov	r2, r0
 8005280:	460b      	mov	r3, r1
 8005282:	4640      	mov	r0, r8
 8005284:	4649      	mov	r1, r9
 8005286:	f7fa ffa3 	bl	80001d0 <__aeabi_dsub>
 800528a:	9b04      	ldr	r3, [sp, #16]
 800528c:	9a06      	ldr	r2, [sp, #24]
 800528e:	3b01      	subs	r3, #1
 8005290:	4313      	orrs	r3, r2
 8005292:	4682      	mov	sl, r0
 8005294:	468b      	mov	fp, r1
 8005296:	f040 81e7 	bne.w	8005668 <__ieee754_pow+0x700>
 800529a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005350 <__ieee754_pow+0x3e8>
 800529e:	eeb0 8a47 	vmov.f32	s16, s14
 80052a2:	eef0 8a67 	vmov.f32	s17, s15
 80052a6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80052aa:	2600      	movs	r6, #0
 80052ac:	4632      	mov	r2, r6
 80052ae:	463b      	mov	r3, r7
 80052b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80052b4:	f7fa ff8c 	bl	80001d0 <__aeabi_dsub>
 80052b8:	4622      	mov	r2, r4
 80052ba:	462b      	mov	r3, r5
 80052bc:	f7fb f940 	bl	8000540 <__aeabi_dmul>
 80052c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80052c4:	4680      	mov	r8, r0
 80052c6:	4689      	mov	r9, r1
 80052c8:	4650      	mov	r0, sl
 80052ca:	4659      	mov	r1, fp
 80052cc:	f7fb f938 	bl	8000540 <__aeabi_dmul>
 80052d0:	4602      	mov	r2, r0
 80052d2:	460b      	mov	r3, r1
 80052d4:	4640      	mov	r0, r8
 80052d6:	4649      	mov	r1, r9
 80052d8:	f7fa ff7c 	bl	80001d4 <__adddf3>
 80052dc:	4632      	mov	r2, r6
 80052de:	463b      	mov	r3, r7
 80052e0:	4680      	mov	r8, r0
 80052e2:	4689      	mov	r9, r1
 80052e4:	4620      	mov	r0, r4
 80052e6:	4629      	mov	r1, r5
 80052e8:	f7fb f92a 	bl	8000540 <__aeabi_dmul>
 80052ec:	460b      	mov	r3, r1
 80052ee:	4604      	mov	r4, r0
 80052f0:	460d      	mov	r5, r1
 80052f2:	4602      	mov	r2, r0
 80052f4:	4649      	mov	r1, r9
 80052f6:	4640      	mov	r0, r8
 80052f8:	f7fa ff6c 	bl	80001d4 <__adddf3>
 80052fc:	4b19      	ldr	r3, [pc, #100]	; (8005364 <__ieee754_pow+0x3fc>)
 80052fe:	4299      	cmp	r1, r3
 8005300:	ec45 4b19 	vmov	d9, r4, r5
 8005304:	4606      	mov	r6, r0
 8005306:	460f      	mov	r7, r1
 8005308:	468b      	mov	fp, r1
 800530a:	f340 82f1 	ble.w	80058f0 <__ieee754_pow+0x988>
 800530e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005312:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005316:	4303      	orrs	r3, r0
 8005318:	f000 81e4 	beq.w	80056e4 <__ieee754_pow+0x77c>
 800531c:	ec51 0b18 	vmov	r0, r1, d8
 8005320:	2200      	movs	r2, #0
 8005322:	2300      	movs	r3, #0
 8005324:	f7fb fb7e 	bl	8000a24 <__aeabi_dcmplt>
 8005328:	3800      	subs	r0, #0
 800532a:	bf18      	it	ne
 800532c:	2001      	movne	r0, #1
 800532e:	e72b      	b.n	8005188 <__ieee754_pow+0x220>
 8005330:	60000000 	.word	0x60000000
 8005334:	3ff71547 	.word	0x3ff71547
 8005338:	f85ddf44 	.word	0xf85ddf44
 800533c:	3e54ae0b 	.word	0x3e54ae0b
 8005340:	55555555 	.word	0x55555555
 8005344:	3fd55555 	.word	0x3fd55555
 8005348:	652b82fe 	.word	0x652b82fe
 800534c:	3ff71547 	.word	0x3ff71547
 8005350:	00000000 	.word	0x00000000
 8005354:	bff00000 	.word	0xbff00000
 8005358:	3ff00000 	.word	0x3ff00000
 800535c:	3fd00000 	.word	0x3fd00000
 8005360:	3fe00000 	.word	0x3fe00000
 8005364:	408fffff 	.word	0x408fffff
 8005368:	4bd5      	ldr	r3, [pc, #852]	; (80056c0 <__ieee754_pow+0x758>)
 800536a:	402b      	ands	r3, r5
 800536c:	2200      	movs	r2, #0
 800536e:	b92b      	cbnz	r3, 800537c <__ieee754_pow+0x414>
 8005370:	4bd4      	ldr	r3, [pc, #848]	; (80056c4 <__ieee754_pow+0x75c>)
 8005372:	f7fb f8e5 	bl	8000540 <__aeabi_dmul>
 8005376:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800537a:	460c      	mov	r4, r1
 800537c:	1523      	asrs	r3, r4, #20
 800537e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005382:	4413      	add	r3, r2
 8005384:	9305      	str	r3, [sp, #20]
 8005386:	4bd0      	ldr	r3, [pc, #832]	; (80056c8 <__ieee754_pow+0x760>)
 8005388:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800538c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005390:	429c      	cmp	r4, r3
 8005392:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005396:	dd08      	ble.n	80053aa <__ieee754_pow+0x442>
 8005398:	4bcc      	ldr	r3, [pc, #816]	; (80056cc <__ieee754_pow+0x764>)
 800539a:	429c      	cmp	r4, r3
 800539c:	f340 8162 	ble.w	8005664 <__ieee754_pow+0x6fc>
 80053a0:	9b05      	ldr	r3, [sp, #20]
 80053a2:	3301      	adds	r3, #1
 80053a4:	9305      	str	r3, [sp, #20]
 80053a6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80053aa:	2400      	movs	r4, #0
 80053ac:	00e3      	lsls	r3, r4, #3
 80053ae:	9307      	str	r3, [sp, #28]
 80053b0:	4bc7      	ldr	r3, [pc, #796]	; (80056d0 <__ieee754_pow+0x768>)
 80053b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80053b6:	ed93 7b00 	vldr	d7, [r3]
 80053ba:	4629      	mov	r1, r5
 80053bc:	ec53 2b17 	vmov	r2, r3, d7
 80053c0:	eeb0 9a47 	vmov.f32	s18, s14
 80053c4:	eef0 9a67 	vmov.f32	s19, s15
 80053c8:	4682      	mov	sl, r0
 80053ca:	f7fa ff01 	bl	80001d0 <__aeabi_dsub>
 80053ce:	4652      	mov	r2, sl
 80053d0:	4606      	mov	r6, r0
 80053d2:	460f      	mov	r7, r1
 80053d4:	462b      	mov	r3, r5
 80053d6:	ec51 0b19 	vmov	r0, r1, d9
 80053da:	f7fa fefb 	bl	80001d4 <__adddf3>
 80053de:	4602      	mov	r2, r0
 80053e0:	460b      	mov	r3, r1
 80053e2:	2000      	movs	r0, #0
 80053e4:	49bb      	ldr	r1, [pc, #748]	; (80056d4 <__ieee754_pow+0x76c>)
 80053e6:	f7fb f9d5 	bl	8000794 <__aeabi_ddiv>
 80053ea:	ec41 0b1a 	vmov	d10, r0, r1
 80053ee:	4602      	mov	r2, r0
 80053f0:	460b      	mov	r3, r1
 80053f2:	4630      	mov	r0, r6
 80053f4:	4639      	mov	r1, r7
 80053f6:	f7fb f8a3 	bl	8000540 <__aeabi_dmul>
 80053fa:	2300      	movs	r3, #0
 80053fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005400:	9302      	str	r3, [sp, #8]
 8005402:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005406:	46ab      	mov	fp, r5
 8005408:	106d      	asrs	r5, r5, #1
 800540a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800540e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005412:	ec41 0b18 	vmov	d8, r0, r1
 8005416:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800541a:	2200      	movs	r2, #0
 800541c:	4640      	mov	r0, r8
 800541e:	4649      	mov	r1, r9
 8005420:	4614      	mov	r4, r2
 8005422:	461d      	mov	r5, r3
 8005424:	f7fb f88c 	bl	8000540 <__aeabi_dmul>
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	4630      	mov	r0, r6
 800542e:	4639      	mov	r1, r7
 8005430:	f7fa fece 	bl	80001d0 <__aeabi_dsub>
 8005434:	ec53 2b19 	vmov	r2, r3, d9
 8005438:	4606      	mov	r6, r0
 800543a:	460f      	mov	r7, r1
 800543c:	4620      	mov	r0, r4
 800543e:	4629      	mov	r1, r5
 8005440:	f7fa fec6 	bl	80001d0 <__aeabi_dsub>
 8005444:	4602      	mov	r2, r0
 8005446:	460b      	mov	r3, r1
 8005448:	4650      	mov	r0, sl
 800544a:	4659      	mov	r1, fp
 800544c:	f7fa fec0 	bl	80001d0 <__aeabi_dsub>
 8005450:	4642      	mov	r2, r8
 8005452:	464b      	mov	r3, r9
 8005454:	f7fb f874 	bl	8000540 <__aeabi_dmul>
 8005458:	4602      	mov	r2, r0
 800545a:	460b      	mov	r3, r1
 800545c:	4630      	mov	r0, r6
 800545e:	4639      	mov	r1, r7
 8005460:	f7fa feb6 	bl	80001d0 <__aeabi_dsub>
 8005464:	ec53 2b1a 	vmov	r2, r3, d10
 8005468:	f7fb f86a 	bl	8000540 <__aeabi_dmul>
 800546c:	ec53 2b18 	vmov	r2, r3, d8
 8005470:	ec41 0b19 	vmov	d9, r0, r1
 8005474:	ec51 0b18 	vmov	r0, r1, d8
 8005478:	f7fb f862 	bl	8000540 <__aeabi_dmul>
 800547c:	a37c      	add	r3, pc, #496	; (adr r3, 8005670 <__ieee754_pow+0x708>)
 800547e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005482:	4604      	mov	r4, r0
 8005484:	460d      	mov	r5, r1
 8005486:	f7fb f85b 	bl	8000540 <__aeabi_dmul>
 800548a:	a37b      	add	r3, pc, #492	; (adr r3, 8005678 <__ieee754_pow+0x710>)
 800548c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005490:	f7fa fea0 	bl	80001d4 <__adddf3>
 8005494:	4622      	mov	r2, r4
 8005496:	462b      	mov	r3, r5
 8005498:	f7fb f852 	bl	8000540 <__aeabi_dmul>
 800549c:	a378      	add	r3, pc, #480	; (adr r3, 8005680 <__ieee754_pow+0x718>)
 800549e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a2:	f7fa fe97 	bl	80001d4 <__adddf3>
 80054a6:	4622      	mov	r2, r4
 80054a8:	462b      	mov	r3, r5
 80054aa:	f7fb f849 	bl	8000540 <__aeabi_dmul>
 80054ae:	a376      	add	r3, pc, #472	; (adr r3, 8005688 <__ieee754_pow+0x720>)
 80054b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b4:	f7fa fe8e 	bl	80001d4 <__adddf3>
 80054b8:	4622      	mov	r2, r4
 80054ba:	462b      	mov	r3, r5
 80054bc:	f7fb f840 	bl	8000540 <__aeabi_dmul>
 80054c0:	a373      	add	r3, pc, #460	; (adr r3, 8005690 <__ieee754_pow+0x728>)
 80054c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c6:	f7fa fe85 	bl	80001d4 <__adddf3>
 80054ca:	4622      	mov	r2, r4
 80054cc:	462b      	mov	r3, r5
 80054ce:	f7fb f837 	bl	8000540 <__aeabi_dmul>
 80054d2:	a371      	add	r3, pc, #452	; (adr r3, 8005698 <__ieee754_pow+0x730>)
 80054d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d8:	f7fa fe7c 	bl	80001d4 <__adddf3>
 80054dc:	4622      	mov	r2, r4
 80054de:	4606      	mov	r6, r0
 80054e0:	460f      	mov	r7, r1
 80054e2:	462b      	mov	r3, r5
 80054e4:	4620      	mov	r0, r4
 80054e6:	4629      	mov	r1, r5
 80054e8:	f7fb f82a 	bl	8000540 <__aeabi_dmul>
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	4630      	mov	r0, r6
 80054f2:	4639      	mov	r1, r7
 80054f4:	f7fb f824 	bl	8000540 <__aeabi_dmul>
 80054f8:	4642      	mov	r2, r8
 80054fa:	4604      	mov	r4, r0
 80054fc:	460d      	mov	r5, r1
 80054fe:	464b      	mov	r3, r9
 8005500:	ec51 0b18 	vmov	r0, r1, d8
 8005504:	f7fa fe66 	bl	80001d4 <__adddf3>
 8005508:	ec53 2b19 	vmov	r2, r3, d9
 800550c:	f7fb f818 	bl	8000540 <__aeabi_dmul>
 8005510:	4622      	mov	r2, r4
 8005512:	462b      	mov	r3, r5
 8005514:	f7fa fe5e 	bl	80001d4 <__adddf3>
 8005518:	4642      	mov	r2, r8
 800551a:	4682      	mov	sl, r0
 800551c:	468b      	mov	fp, r1
 800551e:	464b      	mov	r3, r9
 8005520:	4640      	mov	r0, r8
 8005522:	4649      	mov	r1, r9
 8005524:	f7fb f80c 	bl	8000540 <__aeabi_dmul>
 8005528:	4b6b      	ldr	r3, [pc, #428]	; (80056d8 <__ieee754_pow+0x770>)
 800552a:	2200      	movs	r2, #0
 800552c:	4606      	mov	r6, r0
 800552e:	460f      	mov	r7, r1
 8005530:	f7fa fe50 	bl	80001d4 <__adddf3>
 8005534:	4652      	mov	r2, sl
 8005536:	465b      	mov	r3, fp
 8005538:	f7fa fe4c 	bl	80001d4 <__adddf3>
 800553c:	2000      	movs	r0, #0
 800553e:	4604      	mov	r4, r0
 8005540:	460d      	mov	r5, r1
 8005542:	4602      	mov	r2, r0
 8005544:	460b      	mov	r3, r1
 8005546:	4640      	mov	r0, r8
 8005548:	4649      	mov	r1, r9
 800554a:	f7fa fff9 	bl	8000540 <__aeabi_dmul>
 800554e:	4b62      	ldr	r3, [pc, #392]	; (80056d8 <__ieee754_pow+0x770>)
 8005550:	4680      	mov	r8, r0
 8005552:	4689      	mov	r9, r1
 8005554:	2200      	movs	r2, #0
 8005556:	4620      	mov	r0, r4
 8005558:	4629      	mov	r1, r5
 800555a:	f7fa fe39 	bl	80001d0 <__aeabi_dsub>
 800555e:	4632      	mov	r2, r6
 8005560:	463b      	mov	r3, r7
 8005562:	f7fa fe35 	bl	80001d0 <__aeabi_dsub>
 8005566:	4602      	mov	r2, r0
 8005568:	460b      	mov	r3, r1
 800556a:	4650      	mov	r0, sl
 800556c:	4659      	mov	r1, fp
 800556e:	f7fa fe2f 	bl	80001d0 <__aeabi_dsub>
 8005572:	ec53 2b18 	vmov	r2, r3, d8
 8005576:	f7fa ffe3 	bl	8000540 <__aeabi_dmul>
 800557a:	4622      	mov	r2, r4
 800557c:	4606      	mov	r6, r0
 800557e:	460f      	mov	r7, r1
 8005580:	462b      	mov	r3, r5
 8005582:	ec51 0b19 	vmov	r0, r1, d9
 8005586:	f7fa ffdb 	bl	8000540 <__aeabi_dmul>
 800558a:	4602      	mov	r2, r0
 800558c:	460b      	mov	r3, r1
 800558e:	4630      	mov	r0, r6
 8005590:	4639      	mov	r1, r7
 8005592:	f7fa fe1f 	bl	80001d4 <__adddf3>
 8005596:	4606      	mov	r6, r0
 8005598:	460f      	mov	r7, r1
 800559a:	4602      	mov	r2, r0
 800559c:	460b      	mov	r3, r1
 800559e:	4640      	mov	r0, r8
 80055a0:	4649      	mov	r1, r9
 80055a2:	f7fa fe17 	bl	80001d4 <__adddf3>
 80055a6:	a33e      	add	r3, pc, #248	; (adr r3, 80056a0 <__ieee754_pow+0x738>)
 80055a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ac:	2000      	movs	r0, #0
 80055ae:	4604      	mov	r4, r0
 80055b0:	460d      	mov	r5, r1
 80055b2:	f7fa ffc5 	bl	8000540 <__aeabi_dmul>
 80055b6:	4642      	mov	r2, r8
 80055b8:	ec41 0b18 	vmov	d8, r0, r1
 80055bc:	464b      	mov	r3, r9
 80055be:	4620      	mov	r0, r4
 80055c0:	4629      	mov	r1, r5
 80055c2:	f7fa fe05 	bl	80001d0 <__aeabi_dsub>
 80055c6:	4602      	mov	r2, r0
 80055c8:	460b      	mov	r3, r1
 80055ca:	4630      	mov	r0, r6
 80055cc:	4639      	mov	r1, r7
 80055ce:	f7fa fdff 	bl	80001d0 <__aeabi_dsub>
 80055d2:	a335      	add	r3, pc, #212	; (adr r3, 80056a8 <__ieee754_pow+0x740>)
 80055d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d8:	f7fa ffb2 	bl	8000540 <__aeabi_dmul>
 80055dc:	a334      	add	r3, pc, #208	; (adr r3, 80056b0 <__ieee754_pow+0x748>)
 80055de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e2:	4606      	mov	r6, r0
 80055e4:	460f      	mov	r7, r1
 80055e6:	4620      	mov	r0, r4
 80055e8:	4629      	mov	r1, r5
 80055ea:	f7fa ffa9 	bl	8000540 <__aeabi_dmul>
 80055ee:	4602      	mov	r2, r0
 80055f0:	460b      	mov	r3, r1
 80055f2:	4630      	mov	r0, r6
 80055f4:	4639      	mov	r1, r7
 80055f6:	f7fa fded 	bl	80001d4 <__adddf3>
 80055fa:	9a07      	ldr	r2, [sp, #28]
 80055fc:	4b37      	ldr	r3, [pc, #220]	; (80056dc <__ieee754_pow+0x774>)
 80055fe:	4413      	add	r3, r2
 8005600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005604:	f7fa fde6 	bl	80001d4 <__adddf3>
 8005608:	4682      	mov	sl, r0
 800560a:	9805      	ldr	r0, [sp, #20]
 800560c:	468b      	mov	fp, r1
 800560e:	f7fa ff2d 	bl	800046c <__aeabi_i2d>
 8005612:	9a07      	ldr	r2, [sp, #28]
 8005614:	4b32      	ldr	r3, [pc, #200]	; (80056e0 <__ieee754_pow+0x778>)
 8005616:	4413      	add	r3, r2
 8005618:	e9d3 8900 	ldrd	r8, r9, [r3]
 800561c:	4606      	mov	r6, r0
 800561e:	460f      	mov	r7, r1
 8005620:	4652      	mov	r2, sl
 8005622:	465b      	mov	r3, fp
 8005624:	ec51 0b18 	vmov	r0, r1, d8
 8005628:	f7fa fdd4 	bl	80001d4 <__adddf3>
 800562c:	4642      	mov	r2, r8
 800562e:	464b      	mov	r3, r9
 8005630:	f7fa fdd0 	bl	80001d4 <__adddf3>
 8005634:	4632      	mov	r2, r6
 8005636:	463b      	mov	r3, r7
 8005638:	f7fa fdcc 	bl	80001d4 <__adddf3>
 800563c:	2000      	movs	r0, #0
 800563e:	4632      	mov	r2, r6
 8005640:	463b      	mov	r3, r7
 8005642:	4604      	mov	r4, r0
 8005644:	460d      	mov	r5, r1
 8005646:	f7fa fdc3 	bl	80001d0 <__aeabi_dsub>
 800564a:	4642      	mov	r2, r8
 800564c:	464b      	mov	r3, r9
 800564e:	f7fa fdbf 	bl	80001d0 <__aeabi_dsub>
 8005652:	ec53 2b18 	vmov	r2, r3, d8
 8005656:	f7fa fdbb 	bl	80001d0 <__aeabi_dsub>
 800565a:	4602      	mov	r2, r0
 800565c:	460b      	mov	r3, r1
 800565e:	4650      	mov	r0, sl
 8005660:	4659      	mov	r1, fp
 8005662:	e610      	b.n	8005286 <__ieee754_pow+0x31e>
 8005664:	2401      	movs	r4, #1
 8005666:	e6a1      	b.n	80053ac <__ieee754_pow+0x444>
 8005668:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80056b8 <__ieee754_pow+0x750>
 800566c:	e617      	b.n	800529e <__ieee754_pow+0x336>
 800566e:	bf00      	nop
 8005670:	4a454eef 	.word	0x4a454eef
 8005674:	3fca7e28 	.word	0x3fca7e28
 8005678:	93c9db65 	.word	0x93c9db65
 800567c:	3fcd864a 	.word	0x3fcd864a
 8005680:	a91d4101 	.word	0xa91d4101
 8005684:	3fd17460 	.word	0x3fd17460
 8005688:	518f264d 	.word	0x518f264d
 800568c:	3fd55555 	.word	0x3fd55555
 8005690:	db6fabff 	.word	0xdb6fabff
 8005694:	3fdb6db6 	.word	0x3fdb6db6
 8005698:	33333303 	.word	0x33333303
 800569c:	3fe33333 	.word	0x3fe33333
 80056a0:	e0000000 	.word	0xe0000000
 80056a4:	3feec709 	.word	0x3feec709
 80056a8:	dc3a03fd 	.word	0xdc3a03fd
 80056ac:	3feec709 	.word	0x3feec709
 80056b0:	145b01f5 	.word	0x145b01f5
 80056b4:	be3e2fe0 	.word	0xbe3e2fe0
 80056b8:	00000000 	.word	0x00000000
 80056bc:	3ff00000 	.word	0x3ff00000
 80056c0:	7ff00000 	.word	0x7ff00000
 80056c4:	43400000 	.word	0x43400000
 80056c8:	0003988e 	.word	0x0003988e
 80056cc:	000bb679 	.word	0x000bb679
 80056d0:	08005d60 	.word	0x08005d60
 80056d4:	3ff00000 	.word	0x3ff00000
 80056d8:	40080000 	.word	0x40080000
 80056dc:	08005d80 	.word	0x08005d80
 80056e0:	08005d70 	.word	0x08005d70
 80056e4:	a3b5      	add	r3, pc, #724	; (adr r3, 80059bc <__ieee754_pow+0xa54>)
 80056e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ea:	4640      	mov	r0, r8
 80056ec:	4649      	mov	r1, r9
 80056ee:	f7fa fd71 	bl	80001d4 <__adddf3>
 80056f2:	4622      	mov	r2, r4
 80056f4:	ec41 0b1a 	vmov	d10, r0, r1
 80056f8:	462b      	mov	r3, r5
 80056fa:	4630      	mov	r0, r6
 80056fc:	4639      	mov	r1, r7
 80056fe:	f7fa fd67 	bl	80001d0 <__aeabi_dsub>
 8005702:	4602      	mov	r2, r0
 8005704:	460b      	mov	r3, r1
 8005706:	ec51 0b1a 	vmov	r0, r1, d10
 800570a:	f7fb f9a9 	bl	8000a60 <__aeabi_dcmpgt>
 800570e:	2800      	cmp	r0, #0
 8005710:	f47f ae04 	bne.w	800531c <__ieee754_pow+0x3b4>
 8005714:	4aa4      	ldr	r2, [pc, #656]	; (80059a8 <__ieee754_pow+0xa40>)
 8005716:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800571a:	4293      	cmp	r3, r2
 800571c:	f340 8108 	ble.w	8005930 <__ieee754_pow+0x9c8>
 8005720:	151b      	asrs	r3, r3, #20
 8005722:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005726:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800572a:	fa4a f303 	asr.w	r3, sl, r3
 800572e:	445b      	add	r3, fp
 8005730:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005734:	4e9d      	ldr	r6, [pc, #628]	; (80059ac <__ieee754_pow+0xa44>)
 8005736:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800573a:	4116      	asrs	r6, r2
 800573c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005740:	2000      	movs	r0, #0
 8005742:	ea23 0106 	bic.w	r1, r3, r6
 8005746:	f1c2 0214 	rsb	r2, r2, #20
 800574a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800574e:	fa4a fa02 	asr.w	sl, sl, r2
 8005752:	f1bb 0f00 	cmp.w	fp, #0
 8005756:	4602      	mov	r2, r0
 8005758:	460b      	mov	r3, r1
 800575a:	4620      	mov	r0, r4
 800575c:	4629      	mov	r1, r5
 800575e:	bfb8      	it	lt
 8005760:	f1ca 0a00 	rsblt	sl, sl, #0
 8005764:	f7fa fd34 	bl	80001d0 <__aeabi_dsub>
 8005768:	ec41 0b19 	vmov	d9, r0, r1
 800576c:	4642      	mov	r2, r8
 800576e:	464b      	mov	r3, r9
 8005770:	ec51 0b19 	vmov	r0, r1, d9
 8005774:	f7fa fd2e 	bl	80001d4 <__adddf3>
 8005778:	a37b      	add	r3, pc, #492	; (adr r3, 8005968 <__ieee754_pow+0xa00>)
 800577a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577e:	2000      	movs	r0, #0
 8005780:	4604      	mov	r4, r0
 8005782:	460d      	mov	r5, r1
 8005784:	f7fa fedc 	bl	8000540 <__aeabi_dmul>
 8005788:	ec53 2b19 	vmov	r2, r3, d9
 800578c:	4606      	mov	r6, r0
 800578e:	460f      	mov	r7, r1
 8005790:	4620      	mov	r0, r4
 8005792:	4629      	mov	r1, r5
 8005794:	f7fa fd1c 	bl	80001d0 <__aeabi_dsub>
 8005798:	4602      	mov	r2, r0
 800579a:	460b      	mov	r3, r1
 800579c:	4640      	mov	r0, r8
 800579e:	4649      	mov	r1, r9
 80057a0:	f7fa fd16 	bl	80001d0 <__aeabi_dsub>
 80057a4:	a372      	add	r3, pc, #456	; (adr r3, 8005970 <__ieee754_pow+0xa08>)
 80057a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057aa:	f7fa fec9 	bl	8000540 <__aeabi_dmul>
 80057ae:	a372      	add	r3, pc, #456	; (adr r3, 8005978 <__ieee754_pow+0xa10>)
 80057b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b4:	4680      	mov	r8, r0
 80057b6:	4689      	mov	r9, r1
 80057b8:	4620      	mov	r0, r4
 80057ba:	4629      	mov	r1, r5
 80057bc:	f7fa fec0 	bl	8000540 <__aeabi_dmul>
 80057c0:	4602      	mov	r2, r0
 80057c2:	460b      	mov	r3, r1
 80057c4:	4640      	mov	r0, r8
 80057c6:	4649      	mov	r1, r9
 80057c8:	f7fa fd04 	bl	80001d4 <__adddf3>
 80057cc:	4604      	mov	r4, r0
 80057ce:	460d      	mov	r5, r1
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	4630      	mov	r0, r6
 80057d6:	4639      	mov	r1, r7
 80057d8:	f7fa fcfc 	bl	80001d4 <__adddf3>
 80057dc:	4632      	mov	r2, r6
 80057de:	463b      	mov	r3, r7
 80057e0:	4680      	mov	r8, r0
 80057e2:	4689      	mov	r9, r1
 80057e4:	f7fa fcf4 	bl	80001d0 <__aeabi_dsub>
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	4620      	mov	r0, r4
 80057ee:	4629      	mov	r1, r5
 80057f0:	f7fa fcee 	bl	80001d0 <__aeabi_dsub>
 80057f4:	4642      	mov	r2, r8
 80057f6:	4606      	mov	r6, r0
 80057f8:	460f      	mov	r7, r1
 80057fa:	464b      	mov	r3, r9
 80057fc:	4640      	mov	r0, r8
 80057fe:	4649      	mov	r1, r9
 8005800:	f7fa fe9e 	bl	8000540 <__aeabi_dmul>
 8005804:	a35e      	add	r3, pc, #376	; (adr r3, 8005980 <__ieee754_pow+0xa18>)
 8005806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580a:	4604      	mov	r4, r0
 800580c:	460d      	mov	r5, r1
 800580e:	f7fa fe97 	bl	8000540 <__aeabi_dmul>
 8005812:	a35d      	add	r3, pc, #372	; (adr r3, 8005988 <__ieee754_pow+0xa20>)
 8005814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005818:	f7fa fcda 	bl	80001d0 <__aeabi_dsub>
 800581c:	4622      	mov	r2, r4
 800581e:	462b      	mov	r3, r5
 8005820:	f7fa fe8e 	bl	8000540 <__aeabi_dmul>
 8005824:	a35a      	add	r3, pc, #360	; (adr r3, 8005990 <__ieee754_pow+0xa28>)
 8005826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582a:	f7fa fcd3 	bl	80001d4 <__adddf3>
 800582e:	4622      	mov	r2, r4
 8005830:	462b      	mov	r3, r5
 8005832:	f7fa fe85 	bl	8000540 <__aeabi_dmul>
 8005836:	a358      	add	r3, pc, #352	; (adr r3, 8005998 <__ieee754_pow+0xa30>)
 8005838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583c:	f7fa fcc8 	bl	80001d0 <__aeabi_dsub>
 8005840:	4622      	mov	r2, r4
 8005842:	462b      	mov	r3, r5
 8005844:	f7fa fe7c 	bl	8000540 <__aeabi_dmul>
 8005848:	a355      	add	r3, pc, #340	; (adr r3, 80059a0 <__ieee754_pow+0xa38>)
 800584a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584e:	f7fa fcc1 	bl	80001d4 <__adddf3>
 8005852:	4622      	mov	r2, r4
 8005854:	462b      	mov	r3, r5
 8005856:	f7fa fe73 	bl	8000540 <__aeabi_dmul>
 800585a:	4602      	mov	r2, r0
 800585c:	460b      	mov	r3, r1
 800585e:	4640      	mov	r0, r8
 8005860:	4649      	mov	r1, r9
 8005862:	f7fa fcb5 	bl	80001d0 <__aeabi_dsub>
 8005866:	4604      	mov	r4, r0
 8005868:	460d      	mov	r5, r1
 800586a:	4602      	mov	r2, r0
 800586c:	460b      	mov	r3, r1
 800586e:	4640      	mov	r0, r8
 8005870:	4649      	mov	r1, r9
 8005872:	f7fa fe65 	bl	8000540 <__aeabi_dmul>
 8005876:	2200      	movs	r2, #0
 8005878:	ec41 0b19 	vmov	d9, r0, r1
 800587c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005880:	4620      	mov	r0, r4
 8005882:	4629      	mov	r1, r5
 8005884:	f7fa fca4 	bl	80001d0 <__aeabi_dsub>
 8005888:	4602      	mov	r2, r0
 800588a:	460b      	mov	r3, r1
 800588c:	ec51 0b19 	vmov	r0, r1, d9
 8005890:	f7fa ff80 	bl	8000794 <__aeabi_ddiv>
 8005894:	4632      	mov	r2, r6
 8005896:	4604      	mov	r4, r0
 8005898:	460d      	mov	r5, r1
 800589a:	463b      	mov	r3, r7
 800589c:	4640      	mov	r0, r8
 800589e:	4649      	mov	r1, r9
 80058a0:	f7fa fe4e 	bl	8000540 <__aeabi_dmul>
 80058a4:	4632      	mov	r2, r6
 80058a6:	463b      	mov	r3, r7
 80058a8:	f7fa fc94 	bl	80001d4 <__adddf3>
 80058ac:	4602      	mov	r2, r0
 80058ae:	460b      	mov	r3, r1
 80058b0:	4620      	mov	r0, r4
 80058b2:	4629      	mov	r1, r5
 80058b4:	f7fa fc8c 	bl	80001d0 <__aeabi_dsub>
 80058b8:	4642      	mov	r2, r8
 80058ba:	464b      	mov	r3, r9
 80058bc:	f7fa fc88 	bl	80001d0 <__aeabi_dsub>
 80058c0:	460b      	mov	r3, r1
 80058c2:	4602      	mov	r2, r0
 80058c4:	493a      	ldr	r1, [pc, #232]	; (80059b0 <__ieee754_pow+0xa48>)
 80058c6:	2000      	movs	r0, #0
 80058c8:	f7fa fc82 	bl	80001d0 <__aeabi_dsub>
 80058cc:	ec41 0b10 	vmov	d0, r0, r1
 80058d0:	ee10 3a90 	vmov	r3, s1
 80058d4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80058d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058dc:	da2b      	bge.n	8005936 <__ieee754_pow+0x9ce>
 80058de:	4650      	mov	r0, sl
 80058e0:	f000 f966 	bl	8005bb0 <scalbn>
 80058e4:	ec51 0b10 	vmov	r0, r1, d0
 80058e8:	ec53 2b18 	vmov	r2, r3, d8
 80058ec:	f7ff bbed 	b.w	80050ca <__ieee754_pow+0x162>
 80058f0:	4b30      	ldr	r3, [pc, #192]	; (80059b4 <__ieee754_pow+0xa4c>)
 80058f2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80058f6:	429e      	cmp	r6, r3
 80058f8:	f77f af0c 	ble.w	8005714 <__ieee754_pow+0x7ac>
 80058fc:	4b2e      	ldr	r3, [pc, #184]	; (80059b8 <__ieee754_pow+0xa50>)
 80058fe:	440b      	add	r3, r1
 8005900:	4303      	orrs	r3, r0
 8005902:	d009      	beq.n	8005918 <__ieee754_pow+0x9b0>
 8005904:	ec51 0b18 	vmov	r0, r1, d8
 8005908:	2200      	movs	r2, #0
 800590a:	2300      	movs	r3, #0
 800590c:	f7fb f88a 	bl	8000a24 <__aeabi_dcmplt>
 8005910:	3800      	subs	r0, #0
 8005912:	bf18      	it	ne
 8005914:	2001      	movne	r0, #1
 8005916:	e447      	b.n	80051a8 <__ieee754_pow+0x240>
 8005918:	4622      	mov	r2, r4
 800591a:	462b      	mov	r3, r5
 800591c:	f7fa fc58 	bl	80001d0 <__aeabi_dsub>
 8005920:	4642      	mov	r2, r8
 8005922:	464b      	mov	r3, r9
 8005924:	f7fb f892 	bl	8000a4c <__aeabi_dcmpge>
 8005928:	2800      	cmp	r0, #0
 800592a:	f43f aef3 	beq.w	8005714 <__ieee754_pow+0x7ac>
 800592e:	e7e9      	b.n	8005904 <__ieee754_pow+0x99c>
 8005930:	f04f 0a00 	mov.w	sl, #0
 8005934:	e71a      	b.n	800576c <__ieee754_pow+0x804>
 8005936:	ec51 0b10 	vmov	r0, r1, d0
 800593a:	4619      	mov	r1, r3
 800593c:	e7d4      	b.n	80058e8 <__ieee754_pow+0x980>
 800593e:	491c      	ldr	r1, [pc, #112]	; (80059b0 <__ieee754_pow+0xa48>)
 8005940:	2000      	movs	r0, #0
 8005942:	f7ff bb30 	b.w	8004fa6 <__ieee754_pow+0x3e>
 8005946:	2000      	movs	r0, #0
 8005948:	2100      	movs	r1, #0
 800594a:	f7ff bb2c 	b.w	8004fa6 <__ieee754_pow+0x3e>
 800594e:	4630      	mov	r0, r6
 8005950:	4639      	mov	r1, r7
 8005952:	f7ff bb28 	b.w	8004fa6 <__ieee754_pow+0x3e>
 8005956:	9204      	str	r2, [sp, #16]
 8005958:	f7ff bb7a 	b.w	8005050 <__ieee754_pow+0xe8>
 800595c:	2300      	movs	r3, #0
 800595e:	f7ff bb64 	b.w	800502a <__ieee754_pow+0xc2>
 8005962:	bf00      	nop
 8005964:	f3af 8000 	nop.w
 8005968:	00000000 	.word	0x00000000
 800596c:	3fe62e43 	.word	0x3fe62e43
 8005970:	fefa39ef 	.word	0xfefa39ef
 8005974:	3fe62e42 	.word	0x3fe62e42
 8005978:	0ca86c39 	.word	0x0ca86c39
 800597c:	be205c61 	.word	0xbe205c61
 8005980:	72bea4d0 	.word	0x72bea4d0
 8005984:	3e663769 	.word	0x3e663769
 8005988:	c5d26bf1 	.word	0xc5d26bf1
 800598c:	3ebbbd41 	.word	0x3ebbbd41
 8005990:	af25de2c 	.word	0xaf25de2c
 8005994:	3f11566a 	.word	0x3f11566a
 8005998:	16bebd93 	.word	0x16bebd93
 800599c:	3f66c16c 	.word	0x3f66c16c
 80059a0:	5555553e 	.word	0x5555553e
 80059a4:	3fc55555 	.word	0x3fc55555
 80059a8:	3fe00000 	.word	0x3fe00000
 80059ac:	000fffff 	.word	0x000fffff
 80059b0:	3ff00000 	.word	0x3ff00000
 80059b4:	4090cbff 	.word	0x4090cbff
 80059b8:	3f6f3400 	.word	0x3f6f3400
 80059bc:	652b82fe 	.word	0x652b82fe
 80059c0:	3c971547 	.word	0x3c971547

080059c4 <__ieee754_sqrt>:
 80059c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059c8:	ec55 4b10 	vmov	r4, r5, d0
 80059cc:	4e55      	ldr	r6, [pc, #340]	; (8005b24 <__ieee754_sqrt+0x160>)
 80059ce:	43ae      	bics	r6, r5
 80059d0:	ee10 0a10 	vmov	r0, s0
 80059d4:	ee10 3a10 	vmov	r3, s0
 80059d8:	462a      	mov	r2, r5
 80059da:	4629      	mov	r1, r5
 80059dc:	d110      	bne.n	8005a00 <__ieee754_sqrt+0x3c>
 80059de:	ee10 2a10 	vmov	r2, s0
 80059e2:	462b      	mov	r3, r5
 80059e4:	f7fa fdac 	bl	8000540 <__aeabi_dmul>
 80059e8:	4602      	mov	r2, r0
 80059ea:	460b      	mov	r3, r1
 80059ec:	4620      	mov	r0, r4
 80059ee:	4629      	mov	r1, r5
 80059f0:	f7fa fbf0 	bl	80001d4 <__adddf3>
 80059f4:	4604      	mov	r4, r0
 80059f6:	460d      	mov	r5, r1
 80059f8:	ec45 4b10 	vmov	d0, r4, r5
 80059fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a00:	2d00      	cmp	r5, #0
 8005a02:	dc10      	bgt.n	8005a26 <__ieee754_sqrt+0x62>
 8005a04:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005a08:	4330      	orrs	r0, r6
 8005a0a:	d0f5      	beq.n	80059f8 <__ieee754_sqrt+0x34>
 8005a0c:	b15d      	cbz	r5, 8005a26 <__ieee754_sqrt+0x62>
 8005a0e:	ee10 2a10 	vmov	r2, s0
 8005a12:	462b      	mov	r3, r5
 8005a14:	ee10 0a10 	vmov	r0, s0
 8005a18:	f7fa fbda 	bl	80001d0 <__aeabi_dsub>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	460b      	mov	r3, r1
 8005a20:	f7fa feb8 	bl	8000794 <__aeabi_ddiv>
 8005a24:	e7e6      	b.n	80059f4 <__ieee754_sqrt+0x30>
 8005a26:	1512      	asrs	r2, r2, #20
 8005a28:	d074      	beq.n	8005b14 <__ieee754_sqrt+0x150>
 8005a2a:	07d4      	lsls	r4, r2, #31
 8005a2c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005a30:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8005a34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005a38:	bf5e      	ittt	pl
 8005a3a:	0fda      	lsrpl	r2, r3, #31
 8005a3c:	005b      	lslpl	r3, r3, #1
 8005a3e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8005a42:	2400      	movs	r4, #0
 8005a44:	0fda      	lsrs	r2, r3, #31
 8005a46:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8005a4a:	107f      	asrs	r7, r7, #1
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	2516      	movs	r5, #22
 8005a50:	4620      	mov	r0, r4
 8005a52:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005a56:	1886      	adds	r6, r0, r2
 8005a58:	428e      	cmp	r6, r1
 8005a5a:	bfde      	ittt	le
 8005a5c:	1b89      	suble	r1, r1, r6
 8005a5e:	18b0      	addle	r0, r6, r2
 8005a60:	18a4      	addle	r4, r4, r2
 8005a62:	0049      	lsls	r1, r1, #1
 8005a64:	3d01      	subs	r5, #1
 8005a66:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8005a6a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8005a6e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005a72:	d1f0      	bne.n	8005a56 <__ieee754_sqrt+0x92>
 8005a74:	462a      	mov	r2, r5
 8005a76:	f04f 0e20 	mov.w	lr, #32
 8005a7a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005a7e:	4281      	cmp	r1, r0
 8005a80:	eb06 0c05 	add.w	ip, r6, r5
 8005a84:	dc02      	bgt.n	8005a8c <__ieee754_sqrt+0xc8>
 8005a86:	d113      	bne.n	8005ab0 <__ieee754_sqrt+0xec>
 8005a88:	459c      	cmp	ip, r3
 8005a8a:	d811      	bhi.n	8005ab0 <__ieee754_sqrt+0xec>
 8005a8c:	f1bc 0f00 	cmp.w	ip, #0
 8005a90:	eb0c 0506 	add.w	r5, ip, r6
 8005a94:	da43      	bge.n	8005b1e <__ieee754_sqrt+0x15a>
 8005a96:	2d00      	cmp	r5, #0
 8005a98:	db41      	blt.n	8005b1e <__ieee754_sqrt+0x15a>
 8005a9a:	f100 0801 	add.w	r8, r0, #1
 8005a9e:	1a09      	subs	r1, r1, r0
 8005aa0:	459c      	cmp	ip, r3
 8005aa2:	bf88      	it	hi
 8005aa4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8005aa8:	eba3 030c 	sub.w	r3, r3, ip
 8005aac:	4432      	add	r2, r6
 8005aae:	4640      	mov	r0, r8
 8005ab0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8005ab4:	f1be 0e01 	subs.w	lr, lr, #1
 8005ab8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8005abc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005ac0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005ac4:	d1db      	bne.n	8005a7e <__ieee754_sqrt+0xba>
 8005ac6:	430b      	orrs	r3, r1
 8005ac8:	d006      	beq.n	8005ad8 <__ieee754_sqrt+0x114>
 8005aca:	1c50      	adds	r0, r2, #1
 8005acc:	bf13      	iteet	ne
 8005ace:	3201      	addne	r2, #1
 8005ad0:	3401      	addeq	r4, #1
 8005ad2:	4672      	moveq	r2, lr
 8005ad4:	f022 0201 	bicne.w	r2, r2, #1
 8005ad8:	1063      	asrs	r3, r4, #1
 8005ada:	0852      	lsrs	r2, r2, #1
 8005adc:	07e1      	lsls	r1, r4, #31
 8005ade:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005ae2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005ae6:	bf48      	it	mi
 8005ae8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005aec:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005af0:	4614      	mov	r4, r2
 8005af2:	e781      	b.n	80059f8 <__ieee754_sqrt+0x34>
 8005af4:	0ad9      	lsrs	r1, r3, #11
 8005af6:	3815      	subs	r0, #21
 8005af8:	055b      	lsls	r3, r3, #21
 8005afa:	2900      	cmp	r1, #0
 8005afc:	d0fa      	beq.n	8005af4 <__ieee754_sqrt+0x130>
 8005afe:	02cd      	lsls	r5, r1, #11
 8005b00:	d50a      	bpl.n	8005b18 <__ieee754_sqrt+0x154>
 8005b02:	f1c2 0420 	rsb	r4, r2, #32
 8005b06:	fa23 f404 	lsr.w	r4, r3, r4
 8005b0a:	1e55      	subs	r5, r2, #1
 8005b0c:	4093      	lsls	r3, r2
 8005b0e:	4321      	orrs	r1, r4
 8005b10:	1b42      	subs	r2, r0, r5
 8005b12:	e78a      	b.n	8005a2a <__ieee754_sqrt+0x66>
 8005b14:	4610      	mov	r0, r2
 8005b16:	e7f0      	b.n	8005afa <__ieee754_sqrt+0x136>
 8005b18:	0049      	lsls	r1, r1, #1
 8005b1a:	3201      	adds	r2, #1
 8005b1c:	e7ef      	b.n	8005afe <__ieee754_sqrt+0x13a>
 8005b1e:	4680      	mov	r8, r0
 8005b20:	e7bd      	b.n	8005a9e <__ieee754_sqrt+0xda>
 8005b22:	bf00      	nop
 8005b24:	7ff00000 	.word	0x7ff00000

08005b28 <with_errno>:
 8005b28:	b570      	push	{r4, r5, r6, lr}
 8005b2a:	4604      	mov	r4, r0
 8005b2c:	460d      	mov	r5, r1
 8005b2e:	4616      	mov	r6, r2
 8005b30:	f7ff f976 	bl	8004e20 <__errno>
 8005b34:	4629      	mov	r1, r5
 8005b36:	6006      	str	r6, [r0, #0]
 8005b38:	4620      	mov	r0, r4
 8005b3a:	bd70      	pop	{r4, r5, r6, pc}

08005b3c <xflow>:
 8005b3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b3e:	4614      	mov	r4, r2
 8005b40:	461d      	mov	r5, r3
 8005b42:	b108      	cbz	r0, 8005b48 <xflow+0xc>
 8005b44:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005b48:	e9cd 2300 	strd	r2, r3, [sp]
 8005b4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b50:	4620      	mov	r0, r4
 8005b52:	4629      	mov	r1, r5
 8005b54:	f7fa fcf4 	bl	8000540 <__aeabi_dmul>
 8005b58:	2222      	movs	r2, #34	; 0x22
 8005b5a:	b003      	add	sp, #12
 8005b5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b60:	f7ff bfe2 	b.w	8005b28 <with_errno>

08005b64 <__math_uflow>:
 8005b64:	b508      	push	{r3, lr}
 8005b66:	2200      	movs	r2, #0
 8005b68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005b6c:	f7ff ffe6 	bl	8005b3c <xflow>
 8005b70:	ec41 0b10 	vmov	d0, r0, r1
 8005b74:	bd08      	pop	{r3, pc}

08005b76 <__math_oflow>:
 8005b76:	b508      	push	{r3, lr}
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005b7e:	f7ff ffdd 	bl	8005b3c <xflow>
 8005b82:	ec41 0b10 	vmov	d0, r0, r1
 8005b86:	bd08      	pop	{r3, pc}

08005b88 <fabs>:
 8005b88:	ec51 0b10 	vmov	r0, r1, d0
 8005b8c:	ee10 2a10 	vmov	r2, s0
 8005b90:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005b94:	ec43 2b10 	vmov	d0, r2, r3
 8005b98:	4770      	bx	lr

08005b9a <finite>:
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	ed8d 0b00 	vstr	d0, [sp]
 8005ba0:	9801      	ldr	r0, [sp, #4]
 8005ba2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005ba6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005baa:	0fc0      	lsrs	r0, r0, #31
 8005bac:	b002      	add	sp, #8
 8005bae:	4770      	bx	lr

08005bb0 <scalbn>:
 8005bb0:	b570      	push	{r4, r5, r6, lr}
 8005bb2:	ec55 4b10 	vmov	r4, r5, d0
 8005bb6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005bba:	4606      	mov	r6, r0
 8005bbc:	462b      	mov	r3, r5
 8005bbe:	b99a      	cbnz	r2, 8005be8 <scalbn+0x38>
 8005bc0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005bc4:	4323      	orrs	r3, r4
 8005bc6:	d036      	beq.n	8005c36 <scalbn+0x86>
 8005bc8:	4b39      	ldr	r3, [pc, #228]	; (8005cb0 <scalbn+0x100>)
 8005bca:	4629      	mov	r1, r5
 8005bcc:	ee10 0a10 	vmov	r0, s0
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f7fa fcb5 	bl	8000540 <__aeabi_dmul>
 8005bd6:	4b37      	ldr	r3, [pc, #220]	; (8005cb4 <scalbn+0x104>)
 8005bd8:	429e      	cmp	r6, r3
 8005bda:	4604      	mov	r4, r0
 8005bdc:	460d      	mov	r5, r1
 8005bde:	da10      	bge.n	8005c02 <scalbn+0x52>
 8005be0:	a32b      	add	r3, pc, #172	; (adr r3, 8005c90 <scalbn+0xe0>)
 8005be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be6:	e03a      	b.n	8005c5e <scalbn+0xae>
 8005be8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005bec:	428a      	cmp	r2, r1
 8005bee:	d10c      	bne.n	8005c0a <scalbn+0x5a>
 8005bf0:	ee10 2a10 	vmov	r2, s0
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	4629      	mov	r1, r5
 8005bf8:	f7fa faec 	bl	80001d4 <__adddf3>
 8005bfc:	4604      	mov	r4, r0
 8005bfe:	460d      	mov	r5, r1
 8005c00:	e019      	b.n	8005c36 <scalbn+0x86>
 8005c02:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005c06:	460b      	mov	r3, r1
 8005c08:	3a36      	subs	r2, #54	; 0x36
 8005c0a:	4432      	add	r2, r6
 8005c0c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005c10:	428a      	cmp	r2, r1
 8005c12:	dd08      	ble.n	8005c26 <scalbn+0x76>
 8005c14:	2d00      	cmp	r5, #0
 8005c16:	a120      	add	r1, pc, #128	; (adr r1, 8005c98 <scalbn+0xe8>)
 8005c18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c1c:	da1c      	bge.n	8005c58 <scalbn+0xa8>
 8005c1e:	a120      	add	r1, pc, #128	; (adr r1, 8005ca0 <scalbn+0xf0>)
 8005c20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c24:	e018      	b.n	8005c58 <scalbn+0xa8>
 8005c26:	2a00      	cmp	r2, #0
 8005c28:	dd08      	ble.n	8005c3c <scalbn+0x8c>
 8005c2a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005c2e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005c32:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005c36:	ec45 4b10 	vmov	d0, r4, r5
 8005c3a:	bd70      	pop	{r4, r5, r6, pc}
 8005c3c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005c40:	da19      	bge.n	8005c76 <scalbn+0xc6>
 8005c42:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005c46:	429e      	cmp	r6, r3
 8005c48:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005c4c:	dd0a      	ble.n	8005c64 <scalbn+0xb4>
 8005c4e:	a112      	add	r1, pc, #72	; (adr r1, 8005c98 <scalbn+0xe8>)
 8005c50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1e2      	bne.n	8005c1e <scalbn+0x6e>
 8005c58:	a30f      	add	r3, pc, #60	; (adr r3, 8005c98 <scalbn+0xe8>)
 8005c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5e:	f7fa fc6f 	bl	8000540 <__aeabi_dmul>
 8005c62:	e7cb      	b.n	8005bfc <scalbn+0x4c>
 8005c64:	a10a      	add	r1, pc, #40	; (adr r1, 8005c90 <scalbn+0xe0>)
 8005c66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d0b8      	beq.n	8005be0 <scalbn+0x30>
 8005c6e:	a10e      	add	r1, pc, #56	; (adr r1, 8005ca8 <scalbn+0xf8>)
 8005c70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c74:	e7b4      	b.n	8005be0 <scalbn+0x30>
 8005c76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005c7a:	3236      	adds	r2, #54	; 0x36
 8005c7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005c80:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005c84:	4620      	mov	r0, r4
 8005c86:	4b0c      	ldr	r3, [pc, #48]	; (8005cb8 <scalbn+0x108>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	e7e8      	b.n	8005c5e <scalbn+0xae>
 8005c8c:	f3af 8000 	nop.w
 8005c90:	c2f8f359 	.word	0xc2f8f359
 8005c94:	01a56e1f 	.word	0x01a56e1f
 8005c98:	8800759c 	.word	0x8800759c
 8005c9c:	7e37e43c 	.word	0x7e37e43c
 8005ca0:	8800759c 	.word	0x8800759c
 8005ca4:	fe37e43c 	.word	0xfe37e43c
 8005ca8:	c2f8f359 	.word	0xc2f8f359
 8005cac:	81a56e1f 	.word	0x81a56e1f
 8005cb0:	43500000 	.word	0x43500000
 8005cb4:	ffff3cb0 	.word	0xffff3cb0
 8005cb8:	3c900000 	.word	0x3c900000

08005cbc <_init>:
 8005cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cbe:	bf00      	nop
 8005cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cc2:	bc08      	pop	{r3}
 8005cc4:	469e      	mov	lr, r3
 8005cc6:	4770      	bx	lr

08005cc8 <_fini>:
 8005cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cca:	bf00      	nop
 8005ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cce:	bc08      	pop	{r3}
 8005cd0:	469e      	mov	lr, r3
 8005cd2:	4770      	bx	lr
